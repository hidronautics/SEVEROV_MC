
SEVEROV_with_discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c324  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  0800c4b8  0800c4b8  0001c4b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c678  0800c678  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  0800c678  0800c678  0001c678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c680  0800c680  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c680  0800c680  0001c680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c684  0800c684  0001c684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0800c688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020100  2**0
                  CONTENTS
 10 .bss          000009b4  20000100  20000100  00020100  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000ab4  20000ab4  00020100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .debug_info   000212b4  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dc3  00000000  00000000  000413e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001708  00000000  00000000  000451a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001580  00000000  00000000  000468b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022471  00000000  00000000  00047e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002019a  00000000  00000000  0006a2a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c92a6  00000000  00000000  0008a43b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001536e1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a10  00000000  00000000  00153734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c49c 	.word	0x0800c49c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	0800c49c 	.word	0x0800c49c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9d7 	b.w	8001058 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f86b 	bl	8000d94 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f85e 	bl	8000d94 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f84d 	bl	8000d94 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f83f 	bl	8000d94 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff fed3 	bl	8000adc <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc49 	bl	80005f8 <__aeabi_dmul>
 8000d66:	f7ff ff1f 	bl	8000ba8 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fbca 	bl	8000504 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc40 	bl	80005f8 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff fa82 	bl	8000288 <__aeabi_dsub>
 8000d84:	f7ff ff10 	bl	8000ba8 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	468c      	mov	ip, r1
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f040 8083 	bne.w	8000eaa <__udivmoddi4+0x116>
 8000da4:	428a      	cmp	r2, r1
 8000da6:	4617      	mov	r7, r2
 8000da8:	d947      	bls.n	8000e3a <__udivmoddi4+0xa6>
 8000daa:	fab2 f282 	clz	r2, r2
 8000dae:	b142      	cbz	r2, 8000dc2 <__udivmoddi4+0x2e>
 8000db0:	f1c2 0020 	rsb	r0, r2, #32
 8000db4:	fa24 f000 	lsr.w	r0, r4, r0
 8000db8:	4091      	lsls	r1, r2
 8000dba:	4097      	lsls	r7, r2
 8000dbc:	ea40 0c01 	orr.w	ip, r0, r1
 8000dc0:	4094      	lsls	r4, r2
 8000dc2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000dc6:	0c23      	lsrs	r3, r4, #16
 8000dc8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dcc:	fa1f fe87 	uxth.w	lr, r7
 8000dd0:	fb08 c116 	mls	r1, r8, r6, ip
 8000dd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd8:	fb06 f10e 	mul.w	r1, r6, lr
 8000ddc:	4299      	cmp	r1, r3
 8000dde:	d909      	bls.n	8000df4 <__udivmoddi4+0x60>
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000de6:	f080 8119 	bcs.w	800101c <__udivmoddi4+0x288>
 8000dea:	4299      	cmp	r1, r3
 8000dec:	f240 8116 	bls.w	800101c <__udivmoddi4+0x288>
 8000df0:	3e02      	subs	r6, #2
 8000df2:	443b      	add	r3, r7
 8000df4:	1a5b      	subs	r3, r3, r1
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dfc:	fb08 3310 	mls	r3, r8, r0, r3
 8000e00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d909      	bls.n	8000e20 <__udivmoddi4+0x8c>
 8000e0c:	193c      	adds	r4, r7, r4
 8000e0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e12:	f080 8105 	bcs.w	8001020 <__udivmoddi4+0x28c>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f240 8102 	bls.w	8001020 <__udivmoddi4+0x28c>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	443c      	add	r4, r7
 8000e20:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e24:	eba4 040e 	sub.w	r4, r4, lr
 8000e28:	2600      	movs	r6, #0
 8000e2a:	b11d      	cbz	r5, 8000e34 <__udivmoddi4+0xa0>
 8000e2c:	40d4      	lsrs	r4, r2
 8000e2e:	2300      	movs	r3, #0
 8000e30:	e9c5 4300 	strd	r4, r3, [r5]
 8000e34:	4631      	mov	r1, r6
 8000e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3a:	b902      	cbnz	r2, 8000e3e <__udivmoddi4+0xaa>
 8000e3c:	deff      	udf	#255	; 0xff
 8000e3e:	fab2 f282 	clz	r2, r2
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	d150      	bne.n	8000ee8 <__udivmoddi4+0x154>
 8000e46:	1bcb      	subs	r3, r1, r7
 8000e48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e4c:	fa1f f887 	uxth.w	r8, r7
 8000e50:	2601      	movs	r6, #1
 8000e52:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e56:	0c21      	lsrs	r1, r4, #16
 8000e58:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e5c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e60:	fb08 f30c 	mul.w	r3, r8, ip
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0xe4>
 8000e68:	1879      	adds	r1, r7, r1
 8000e6a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0xe2>
 8000e70:	428b      	cmp	r3, r1
 8000e72:	f200 80e9 	bhi.w	8001048 <__udivmoddi4+0x2b4>
 8000e76:	4684      	mov	ip, r0
 8000e78:	1ac9      	subs	r1, r1, r3
 8000e7a:	b2a3      	uxth	r3, r4
 8000e7c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e80:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e84:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e88:	fb08 f800 	mul.w	r8, r8, r0
 8000e8c:	45a0      	cmp	r8, r4
 8000e8e:	d907      	bls.n	8000ea0 <__udivmoddi4+0x10c>
 8000e90:	193c      	adds	r4, r7, r4
 8000e92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x10a>
 8000e98:	45a0      	cmp	r8, r4
 8000e9a:	f200 80d9 	bhi.w	8001050 <__udivmoddi4+0x2bc>
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	eba4 0408 	sub.w	r4, r4, r8
 8000ea4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ea8:	e7bf      	b.n	8000e2a <__udivmoddi4+0x96>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d909      	bls.n	8000ec2 <__udivmoddi4+0x12e>
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	f000 80b1 	beq.w	8001016 <__udivmoddi4+0x282>
 8000eb4:	2600      	movs	r6, #0
 8000eb6:	e9c5 0100 	strd	r0, r1, [r5]
 8000eba:	4630      	mov	r0, r6
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	fab3 f683 	clz	r6, r3
 8000ec6:	2e00      	cmp	r6, #0
 8000ec8:	d14a      	bne.n	8000f60 <__udivmoddi4+0x1cc>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d302      	bcc.n	8000ed4 <__udivmoddi4+0x140>
 8000ece:	4282      	cmp	r2, r0
 8000ed0:	f200 80b8 	bhi.w	8001044 <__udivmoddi4+0x2b0>
 8000ed4:	1a84      	subs	r4, r0, r2
 8000ed6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eda:	2001      	movs	r0, #1
 8000edc:	468c      	mov	ip, r1
 8000ede:	2d00      	cmp	r5, #0
 8000ee0:	d0a8      	beq.n	8000e34 <__udivmoddi4+0xa0>
 8000ee2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ee6:	e7a5      	b.n	8000e34 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f603 	lsr.w	r6, r0, r3
 8000ef0:	4097      	lsls	r7, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000efa:	40d9      	lsrs	r1, r3
 8000efc:	4330      	orrs	r0, r6
 8000efe:	0c03      	lsrs	r3, r0, #16
 8000f00:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f04:	fa1f f887 	uxth.w	r8, r7
 8000f08:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f10:	fb06 f108 	mul.w	r1, r6, r8
 8000f14:	4299      	cmp	r1, r3
 8000f16:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1a:	d909      	bls.n	8000f30 <__udivmoddi4+0x19c>
 8000f1c:	18fb      	adds	r3, r7, r3
 8000f1e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f22:	f080 808d 	bcs.w	8001040 <__udivmoddi4+0x2ac>
 8000f26:	4299      	cmp	r1, r3
 8000f28:	f240 808a 	bls.w	8001040 <__udivmoddi4+0x2ac>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	443b      	add	r3, r7
 8000f30:	1a5b      	subs	r3, r3, r1
 8000f32:	b281      	uxth	r1, r0
 8000f34:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f38:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f40:	fb00 f308 	mul.w	r3, r0, r8
 8000f44:	428b      	cmp	r3, r1
 8000f46:	d907      	bls.n	8000f58 <__udivmoddi4+0x1c4>
 8000f48:	1879      	adds	r1, r7, r1
 8000f4a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4e:	d273      	bcs.n	8001038 <__udivmoddi4+0x2a4>
 8000f50:	428b      	cmp	r3, r1
 8000f52:	d971      	bls.n	8001038 <__udivmoddi4+0x2a4>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4439      	add	r1, r7
 8000f58:	1acb      	subs	r3, r1, r3
 8000f5a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f5e:	e778      	b.n	8000e52 <__udivmoddi4+0xbe>
 8000f60:	f1c6 0c20 	rsb	ip, r6, #32
 8000f64:	fa03 f406 	lsl.w	r4, r3, r6
 8000f68:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f6c:	431c      	orrs	r4, r3
 8000f6e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f72:	fa01 f306 	lsl.w	r3, r1, r6
 8000f76:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f7a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f7e:	431f      	orrs	r7, r3
 8000f80:	0c3b      	lsrs	r3, r7, #16
 8000f82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f86:	fa1f f884 	uxth.w	r8, r4
 8000f8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f8e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f92:	fb09 fa08 	mul.w	sl, r9, r8
 8000f96:	458a      	cmp	sl, r1
 8000f98:	fa02 f206 	lsl.w	r2, r2, r6
 8000f9c:	fa00 f306 	lsl.w	r3, r0, r6
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x220>
 8000fa2:	1861      	adds	r1, r4, r1
 8000fa4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000fa8:	d248      	bcs.n	800103c <__udivmoddi4+0x2a8>
 8000faa:	458a      	cmp	sl, r1
 8000fac:	d946      	bls.n	800103c <__udivmoddi4+0x2a8>
 8000fae:	f1a9 0902 	sub.w	r9, r9, #2
 8000fb2:	4421      	add	r1, r4
 8000fb4:	eba1 010a 	sub.w	r1, r1, sl
 8000fb8:	b2bf      	uxth	r7, r7
 8000fba:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fbe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fc2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fc6:	fb00 f808 	mul.w	r8, r0, r8
 8000fca:	45b8      	cmp	r8, r7
 8000fcc:	d907      	bls.n	8000fde <__udivmoddi4+0x24a>
 8000fce:	19e7      	adds	r7, r4, r7
 8000fd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fd4:	d22e      	bcs.n	8001034 <__udivmoddi4+0x2a0>
 8000fd6:	45b8      	cmp	r8, r7
 8000fd8:	d92c      	bls.n	8001034 <__udivmoddi4+0x2a0>
 8000fda:	3802      	subs	r0, #2
 8000fdc:	4427      	add	r7, r4
 8000fde:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fe2:	eba7 0708 	sub.w	r7, r7, r8
 8000fe6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fea:	454f      	cmp	r7, r9
 8000fec:	46c6      	mov	lr, r8
 8000fee:	4649      	mov	r1, r9
 8000ff0:	d31a      	bcc.n	8001028 <__udivmoddi4+0x294>
 8000ff2:	d017      	beq.n	8001024 <__udivmoddi4+0x290>
 8000ff4:	b15d      	cbz	r5, 800100e <__udivmoddi4+0x27a>
 8000ff6:	ebb3 020e 	subs.w	r2, r3, lr
 8000ffa:	eb67 0701 	sbc.w	r7, r7, r1
 8000ffe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001002:	40f2      	lsrs	r2, r6
 8001004:	ea4c 0202 	orr.w	r2, ip, r2
 8001008:	40f7      	lsrs	r7, r6
 800100a:	e9c5 2700 	strd	r2, r7, [r5]
 800100e:	2600      	movs	r6, #0
 8001010:	4631      	mov	r1, r6
 8001012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001016:	462e      	mov	r6, r5
 8001018:	4628      	mov	r0, r5
 800101a:	e70b      	b.n	8000e34 <__udivmoddi4+0xa0>
 800101c:	4606      	mov	r6, r0
 800101e:	e6e9      	b.n	8000df4 <__udivmoddi4+0x60>
 8001020:	4618      	mov	r0, r3
 8001022:	e6fd      	b.n	8000e20 <__udivmoddi4+0x8c>
 8001024:	4543      	cmp	r3, r8
 8001026:	d2e5      	bcs.n	8000ff4 <__udivmoddi4+0x260>
 8001028:	ebb8 0e02 	subs.w	lr, r8, r2
 800102c:	eb69 0104 	sbc.w	r1, r9, r4
 8001030:	3801      	subs	r0, #1
 8001032:	e7df      	b.n	8000ff4 <__udivmoddi4+0x260>
 8001034:	4608      	mov	r0, r1
 8001036:	e7d2      	b.n	8000fde <__udivmoddi4+0x24a>
 8001038:	4660      	mov	r0, ip
 800103a:	e78d      	b.n	8000f58 <__udivmoddi4+0x1c4>
 800103c:	4681      	mov	r9, r0
 800103e:	e7b9      	b.n	8000fb4 <__udivmoddi4+0x220>
 8001040:	4666      	mov	r6, ip
 8001042:	e775      	b.n	8000f30 <__udivmoddi4+0x19c>
 8001044:	4630      	mov	r0, r6
 8001046:	e74a      	b.n	8000ede <__udivmoddi4+0x14a>
 8001048:	f1ac 0c02 	sub.w	ip, ip, #2
 800104c:	4439      	add	r1, r7
 800104e:	e713      	b.n	8000e78 <__udivmoddi4+0xe4>
 8001050:	3802      	subs	r0, #2
 8001052:	443c      	add	r4, r7
 8001054:	e724      	b.n	8000ea0 <__udivmoddi4+0x10c>
 8001056:	bf00      	nop

08001058 <__aeabi_idiv0>:
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop

0800105c <cmp>:
uint8_t PROM_READ = 0xA0;
int32_t result;

HAL_StatusTypeDef ret;

int cmp(const void *a, const void *b) {
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
    return *(int*)a - *(int*)b;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	1ad3      	subs	r3, r2, r3
}
 8001070:	4618      	mov	r0, r3
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <pressure_init>:

	uint32_t pressure_init()
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af02      	add	r7, sp, #8
	HAL_I2C_Init(&hi2c2);
 8001082:	482c      	ldr	r0, [pc, #176]	; (8001134 <pressure_init+0xb8>)
 8001084:	f005 fb02 	bl	800668c <HAL_I2C_Init>
	HAL_Delay(200);
 8001088:	20c8      	movs	r0, #200	; 0xc8
 800108a:	f004 f803 	bl	8005094 <HAL_Delay>

	uint8_t *p;
	p = &RES_DEVICE;
 800108e:	4b2a      	ldr	r3, [pc, #168]	; (8001138 <pressure_init+0xbc>)
 8001090:	60bb      	str	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c2, DEVICE_ADDR, p, COMMAND_LENGTH, HAL_MAX_DELAY);
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	2301      	movs	r3, #1
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	21ec      	movs	r1, #236	; 0xec
 800109e:	4825      	ldr	r0, [pc, #148]	; (8001134 <pressure_init+0xb8>)
 80010a0:	f005 fb84 	bl	80067ac <HAL_I2C_Master_Transmit>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b24      	ldr	r3, [pc, #144]	; (800113c <pressure_init+0xc0>)
 80010aa:	701a      	strb	r2, [r3, #0]
	if(ret == HAL_ERROR){
 80010ac:	4b23      	ldr	r3, [pc, #140]	; (800113c <pressure_init+0xc0>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d101      	bne.n	80010b8 <pressure_init+0x3c>
		return 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	e038      	b.n	800112a <pressure_init+0xae>
	}
	HAL_Delay(200);
 80010b8:	20c8      	movs	r0, #200	; 0xc8
 80010ba:	f003 ffeb 	bl	8005094 <HAL_Delay>
	uint8_t prom_addr = 160;
 80010be:	23a0      	movs	r3, #160	; 0xa0
 80010c0:	71fb      	strb	r3, [r7, #7]

	//receiving the coefs
	for (uint8_t i = 0; i < 8; i++) {
 80010c2:	2300      	movs	r3, #0
 80010c4:	73fb      	strb	r3, [r7, #15]
 80010c6:	e02c      	b.n	8001122 <pressure_init+0xa6>
		uint8_t prom_buff[2];
		prom_addr += 2;
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	3302      	adds	r3, #2
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	71fb      	strb	r3, [r7, #7]
		p = &prom_addr;
 80010d0:	1dfb      	adds	r3, r7, #7
 80010d2:	60bb      	str	r3, [r7, #8]
		HAL_I2C_Master_Transmit(&hi2c2, DEVICE_ADDR, p, COMMAND_LENGTH, HAL_MAX_DELAY);
 80010d4:	f04f 33ff 	mov.w	r3, #4294967295
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	2301      	movs	r3, #1
 80010dc:	68ba      	ldr	r2, [r7, #8]
 80010de:	21ec      	movs	r1, #236	; 0xec
 80010e0:	4814      	ldr	r0, [pc, #80]	; (8001134 <pressure_init+0xb8>)
 80010e2:	f005 fb63 	bl	80067ac <HAL_I2C_Master_Transmit>
		HAL_Delay(1);
 80010e6:	2001      	movs	r0, #1
 80010e8:	f003 ffd4 	bl	8005094 <HAL_Delay>
		HAL_I2C_Master_Receive(&hi2c2, DEVICE_ADDR, prom_buff, PROM_LENGTH, HAL_MAX_DELAY);
 80010ec:	1d3a      	adds	r2, r7, #4
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2302      	movs	r3, #2
 80010f6:	21ec      	movs	r1, #236	; 0xec
 80010f8:	480e      	ldr	r0, [pc, #56]	; (8001134 <pressure_init+0xb8>)
 80010fa:	f005 fc4b 	bl	8006994 <HAL_I2C_Master_Receive>
		C[i] = (prom_buff[0] << 8) | (prom_buff[1]);
 80010fe:	793b      	ldrb	r3, [r7, #4]
 8001100:	021b      	lsls	r3, r3, #8
 8001102:	b21a      	sxth	r2, r3
 8001104:	797b      	ldrb	r3, [r7, #5]
 8001106:	b21b      	sxth	r3, r3
 8001108:	4313      	orrs	r3, r2
 800110a:	b21a      	sxth	r2, r3
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	b291      	uxth	r1, r2
 8001110:	4a0b      	ldr	r2, [pc, #44]	; (8001140 <pressure_init+0xc4>)
 8001112:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		HAL_Delay(1);
 8001116:	2001      	movs	r0, #1
 8001118:	f003 ffbc 	bl	8005094 <HAL_Delay>
	for (uint8_t i = 0; i < 8; i++) {
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	3301      	adds	r3, #1
 8001120:	73fb      	strb	r3, [r7, #15]
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	2b07      	cmp	r3, #7
 8001126:	d9cf      	bls.n	80010c8 <pressure_init+0x4c>

	}
	return 1;
 8001128:	2301      	movs	r3, #1
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	2000035c 	.word	0x2000035c
 8001138:	20000000 	.word	0x20000000
 800113c:	20000220 	.word	0x20000220
 8001140:	20000208 	.word	0x20000208

08001144 <check_pressure>:

int32_t check_pressure()
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af02      	add	r7, sp, #8
	uint8_t *p;
	p = &CONVERT_D1;
 800114a:	4b33      	ldr	r3, [pc, #204]	; (8001218 <check_pressure+0xd4>)
 800114c:	607b      	str	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c2, DEVICE_ADDR, p, COMMAND_LENGTH, HAL_MAX_DELAY);
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	2301      	movs	r3, #1
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	21ec      	movs	r1, #236	; 0xec
 800115a:	4830      	ldr	r0, [pc, #192]	; (800121c <check_pressure+0xd8>)
 800115c:	f005 fb26 	bl	80067ac <HAL_I2C_Master_Transmit>
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
 8001164:	4b2e      	ldr	r3, [pc, #184]	; (8001220 <check_pressure+0xdc>)
 8001166:	701a      	strb	r2, [r3, #0]
	HAL_Delay(20);
 8001168:	2014      	movs	r0, #20
 800116a:	f003 ff93 	bl	8005094 <HAL_Delay>

	uint8_t adc_buff[3];
	//reading D1 data
	p = &ADC_READ;
 800116e:	4b2d      	ldr	r3, [pc, #180]	; (8001224 <check_pressure+0xe0>)
 8001170:	607b      	str	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c2, DEVICE_ADDR, p, COMMAND_LENGTH, HAL_MAX_DELAY);
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	2301      	movs	r3, #1
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	21ec      	movs	r1, #236	; 0xec
 800117e:	4827      	ldr	r0, [pc, #156]	; (800121c <check_pressure+0xd8>)
 8001180:	f005 fb14 	bl	80067ac <HAL_I2C_Master_Transmit>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	4b25      	ldr	r3, [pc, #148]	; (8001220 <check_pressure+0xdc>)
 800118a:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(300);
	HAL_I2C_Master_Receive(&hi2c2, DEVICE_ADDR, adc_buff, ADC_LENGTH, HAL_MAX_DELAY);
 800118c:	463a      	mov	r2, r7
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2303      	movs	r3, #3
 8001196:	21ec      	movs	r1, #236	; 0xec
 8001198:	4820      	ldr	r0, [pc, #128]	; (800121c <check_pressure+0xd8>)
 800119a:	f005 fbfb 	bl	8006994 <HAL_I2C_Master_Receive>

	D1 = (adc_buff[0] << 16) | (adc_buff[1] << 8) | (adc_buff[2]);
 800119e:	783b      	ldrb	r3, [r7, #0]
 80011a0:	041a      	lsls	r2, r3, #16
 80011a2:	787b      	ldrb	r3, [r7, #1]
 80011a4:	021b      	lsls	r3, r3, #8
 80011a6:	4313      	orrs	r3, r2
 80011a8:	78ba      	ldrb	r2, [r7, #2]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b1e      	ldr	r3, [pc, #120]	; (8001228 <check_pressure+0xe4>)
 80011b0:	601a      	str	r2, [r3, #0]

	//initializing D2 conversion
	p = &CONVERT_D2;
 80011b2:	4b1e      	ldr	r3, [pc, #120]	; (800122c <check_pressure+0xe8>)
 80011b4:	607b      	str	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c2, DEVICE_ADDR, p,
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2301      	movs	r3, #1
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	21ec      	movs	r1, #236	; 0xec
 80011c2:	4816      	ldr	r0, [pc, #88]	; (800121c <check_pressure+0xd8>)
 80011c4:	f005 faf2 	bl	80067ac <HAL_I2C_Master_Transmit>
			COMMAND_LENGTH, HAL_MAX_DELAY);
	HAL_Delay(20);
 80011c8:	2014      	movs	r0, #20
 80011ca:	f003 ff63 	bl	8005094 <HAL_Delay>

	//reading D2 data
	p = &ADC_READ;
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <check_pressure+0xe0>)
 80011d0:	607b      	str	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c2, DEVICE_ADDR, p,
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2301      	movs	r3, #1
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	21ec      	movs	r1, #236	; 0xec
 80011de:	480f      	ldr	r0, [pc, #60]	; (800121c <check_pressure+0xd8>)
 80011e0:	f005 fae4 	bl	80067ac <HAL_I2C_Master_Transmit>
			COMMAND_LENGTH, HAL_MAX_DELAY);
	HAL_I2C_Master_Receive(&hi2c2, DEVICE_ADDR, adc_buff,
 80011e4:	463a      	mov	r2, r7
 80011e6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2303      	movs	r3, #3
 80011ee:	21ec      	movs	r1, #236	; 0xec
 80011f0:	480a      	ldr	r0, [pc, #40]	; (800121c <check_pressure+0xd8>)
 80011f2:	f005 fbcf 	bl	8006994 <HAL_I2C_Master_Receive>
			ADC_LENGTH, HAL_MAX_DELAY);

	D2 = (adc_buff[0] << 16) | (adc_buff[1] << 8) | (adc_buff[2]);
 80011f6:	783b      	ldrb	r3, [r7, #0]
 80011f8:	041a      	lsls	r2, r3, #16
 80011fa:	787b      	ldrb	r3, [r7, #1]
 80011fc:	021b      	lsls	r3, r3, #8
 80011fe:	4313      	orrs	r3, r2
 8001200:	78ba      	ldrb	r2, [r7, #2]
 8001202:	4313      	orrs	r3, r2
 8001204:	461a      	mov	r2, r3
 8001206:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <check_pressure+0xec>)
 8001208:	601a      	str	r2, [r3, #0]
	return calculate();
 800120a:	f000 f839 	bl	8001280 <calculate>
 800120e:	4603      	mov	r3, r0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000001 	.word	0x20000001
 800121c:	2000035c 	.word	0x2000035c
 8001220:	20000220 	.word	0x20000220
 8001224:	2000011c 	.word	0x2000011c
 8001228:	20000224 	.word	0x20000224
 800122c:	20000002 	.word	0x20000002
 8001230:	20000218 	.word	0x20000218

08001234 <reset_pressure>:

uint32_t reset_pressure(){
 8001234:	b580      	push	{r7, lr}
 8001236:	b08c      	sub	sp, #48	; 0x30
 8001238:	af00      	add	r7, sp, #0
	int32_t current_pressure[10];

	for(int i =0;i<10;i++)
 800123a:	2300      	movs	r3, #0
 800123c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800123e:	e00f      	b.n	8001260 <reset_pressure+0x2c>
	{
		current_pressure[i]=check_pressure();
 8001240:	f7ff ff80 	bl	8001144 <check_pressure>
 8001244:	4602      	mov	r2, r0
 8001246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800124e:	440b      	add	r3, r1
 8001250:	f843 2c2c 	str.w	r2, [r3, #-44]
		HAL_Delay(100);
 8001254:	2064      	movs	r0, #100	; 0x64
 8001256:	f003 ff1d 	bl	8005094 <HAL_Delay>
	for(int i =0;i<10;i++)
 800125a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800125c:	3301      	adds	r3, #1
 800125e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001262:	2b09      	cmp	r3, #9
 8001264:	ddec      	ble.n	8001240 <reset_pressure+0xc>
	}
	qsort(current_pressure, 10, sizeof(int32_t), cmp );
 8001266:	1d38      	adds	r0, r7, #4
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <reset_pressure+0x48>)
 800126a:	2204      	movs	r2, #4
 800126c:	210a      	movs	r1, #10
 800126e:	f00a f820 	bl	800b2b2 <qsort>
	return current_pressure[4];
 8001272:	697b      	ldr	r3, [r7, #20]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3730      	adds	r7, #48	; 0x30
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	0800105d 	.word	0x0800105d

08001280 <calculate>:

int32_t calculate()
{
 8001280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001284:	b0aa      	sub	sp, #168	; 0xa8
 8001286:	af00      	add	r7, sp, #0
	int64_t dT = 0;
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	f04f 0300 	mov.w	r3, #0
 8001290:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	int64_t TEMP = 0;
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	f04f 0300 	mov.w	r3, #0
 800129c:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	int64_t OFF = 0;
 80012a0:	f04f 0200 	mov.w	r2, #0
 80012a4:	f04f 0300 	mov.w	r3, #0
 80012a8:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	int64_t SENS = 0;
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	f04f 0300 	mov.w	r3, #0
 80012b4:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	int64_t P = 0;
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	f04f 0300 	mov.w	r3, #0
 80012c0:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80

	int64_t SENSi = 0;
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	f04f 0300 	mov.w	r3, #0
 80012cc:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	int64_t OFFi = 0;
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	f04f 0300 	mov.w	r3, #0
 80012d8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	int64_t Ti = 0;
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	f04f 0300 	mov.w	r3, #0
 80012e4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int64_t OFF2 = 0;
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t SENS2 = 0;
 80012f4:	f04f 0200 	mov.w	r2, #0
 80012f8:	f04f 0300 	mov.w	r3, #0
 80012fc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	int64_t P2 = 0;
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	f04f 0300 	mov.w	r3, #0
 8001308:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	int64_t TEMP2 = 0;
 800130c:	f04f 0200 	mov.w	r2, #0
 8001310:	f04f 0300 	mov.w	r3, #0
 8001314:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	//first order compensation
	dT = D2 - C[4]*256;
 8001318:	4bc7      	ldr	r3, [pc, #796]	; (8001638 <calculate+0x3b8>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4bc7      	ldr	r3, [pc, #796]	; (800163c <calculate+0x3bc>)
 800131e:	891b      	ldrh	r3, [r3, #8]
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	461a      	mov	r2, r3
 8001326:	f04f 0300 	mov.w	r3, #0
 800132a:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	TEMP = 2000 + dT*C[5]/8388608;
 800132e:	4bc3      	ldr	r3, [pc, #780]	; (800163c <calculate+0x3bc>)
 8001330:	895b      	ldrh	r3, [r3, #10]
 8001332:	b29a      	uxth	r2, r3
 8001334:	f04f 0300 	mov.w	r3, #0
 8001338:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800133c:	fb03 f001 	mul.w	r0, r3, r1
 8001340:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001344:	fb02 f101 	mul.w	r1, r2, r1
 8001348:	4408      	add	r0, r1
 800134a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800134e:	fba1 2302 	umull	r2, r3, r1, r2
 8001352:	18c1      	adds	r1, r0, r3
 8001354:	460b      	mov	r3, r1
 8001356:	4610      	mov	r0, r2
 8001358:	4619      	mov	r1, r3
 800135a:	2800      	cmp	r0, #0
 800135c:	f171 0300 	sbcs.w	r3, r1, #0
 8001360:	da05      	bge.n	800136e <calculate+0xee>
 8001362:	4ab7      	ldr	r2, [pc, #732]	; (8001640 <calculate+0x3c0>)
 8001364:	f04f 0300 	mov.w	r3, #0
 8001368:	1880      	adds	r0, r0, r2
 800136a:	eb43 0101 	adc.w	r1, r3, r1
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	f04f 0300 	mov.w	r3, #0
 8001376:	0dc2      	lsrs	r2, r0, #23
 8001378:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800137c:	15cb      	asrs	r3, r1, #23
 800137e:	f512 64fa 	adds.w	r4, r2, #2000	; 0x7d0
 8001382:	f143 0500 	adc.w	r5, r3, #0
 8001386:	e9c7 4526 	strd	r4, r5, [r7, #152]	; 0x98
	OFF = C[1]*65536 + (C[3]*dT)/128;
 800138a:	4bac      	ldr	r3, [pc, #688]	; (800163c <calculate+0x3bc>)
 800138c:	885b      	ldrh	r3, [r3, #2]
 800138e:	041b      	lsls	r3, r3, #16
 8001390:	461c      	mov	r4, r3
 8001392:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001396:	4ba9      	ldr	r3, [pc, #676]	; (800163c <calculate+0x3bc>)
 8001398:	88db      	ldrh	r3, [r3, #6]
 800139a:	b29a      	uxth	r2, r3
 800139c:	f04f 0300 	mov.w	r3, #0
 80013a0:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80013a4:	fb03 f001 	mul.w	r0, r3, r1
 80013a8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80013ac:	fb02 f101 	mul.w	r1, r2, r1
 80013b0:	4408      	add	r0, r1
 80013b2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80013b6:	fba1 2302 	umull	r2, r3, r1, r2
 80013ba:	18c1      	adds	r1, r0, r3
 80013bc:	460b      	mov	r3, r1
 80013be:	2a00      	cmp	r2, #0
 80013c0:	f173 0100 	sbcs.w	r1, r3, #0
 80013c4:	da02      	bge.n	80013cc <calculate+0x14c>
 80013c6:	327f      	adds	r2, #127	; 0x7f
 80013c8:	f143 0300 	adc.w	r3, r3, #0
 80013cc:	f04f 0000 	mov.w	r0, #0
 80013d0:	f04f 0100 	mov.w	r1, #0
 80013d4:	09d0      	lsrs	r0, r2, #7
 80013d6:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 80013da:	11d9      	asrs	r1, r3, #7
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	18a1      	adds	r1, r4, r2
 80013e2:	6239      	str	r1, [r7, #32]
 80013e4:	eb45 0303 	adc.w	r3, r5, r3
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
 80013ea:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80013ee:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
	SENS = C[0]*32768 + (C[2]*dT)/256;
 80013f2:	4b92      	ldr	r3, [pc, #584]	; (800163c <calculate+0x3bc>)
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	03db      	lsls	r3, r3, #15
 80013f8:	461c      	mov	r4, r3
 80013fa:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80013fe:	4b8f      	ldr	r3, [pc, #572]	; (800163c <calculate+0x3bc>)
 8001400:	889b      	ldrh	r3, [r3, #4]
 8001402:	b29a      	uxth	r2, r3
 8001404:	f04f 0300 	mov.w	r3, #0
 8001408:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800140c:	fb03 f001 	mul.w	r0, r3, r1
 8001410:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001414:	fb02 f101 	mul.w	r1, r2, r1
 8001418:	4408      	add	r0, r1
 800141a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800141e:	fba1 2302 	umull	r2, r3, r1, r2
 8001422:	18c1      	adds	r1, r0, r3
 8001424:	460b      	mov	r3, r1
 8001426:	2a00      	cmp	r2, #0
 8001428:	f173 0100 	sbcs.w	r1, r3, #0
 800142c:	da02      	bge.n	8001434 <calculate+0x1b4>
 800142e:	32ff      	adds	r2, #255	; 0xff
 8001430:	f143 0300 	adc.w	r3, r3, #0
 8001434:	f04f 0000 	mov.w	r0, #0
 8001438:	f04f 0100 	mov.w	r1, #0
 800143c:	0a10      	lsrs	r0, r2, #8
 800143e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001442:	1219      	asrs	r1, r3, #8
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	18a1      	adds	r1, r4, r2
 800144a:	61b9      	str	r1, [r7, #24]
 800144c:	eb45 0303 	adc.w	r3, r5, r3
 8001450:	61fb      	str	r3, [r7, #28]
 8001452:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001456:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
	P = ((D1 * SENS)/(2097152) - OFF)/8192;
 800145a:	4b7a      	ldr	r3, [pc, #488]	; (8001644 <calculate+0x3c4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	461a      	mov	r2, r3
 8001460:	f04f 0300 	mov.w	r3, #0
 8001464:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001468:	fb03 f001 	mul.w	r0, r3, r1
 800146c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001470:	fb02 f101 	mul.w	r1, r2, r1
 8001474:	4408      	add	r0, r1
 8001476:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800147a:	fba1 2302 	umull	r2, r3, r1, r2
 800147e:	18c1      	adds	r1, r0, r3
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	2800      	cmp	r0, #0
 8001488:	f171 0300 	sbcs.w	r3, r1, #0
 800148c:	da05      	bge.n	800149a <calculate+0x21a>
 800148e:	4a6e      	ldr	r2, [pc, #440]	; (8001648 <calculate+0x3c8>)
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	1880      	adds	r0, r0, r2
 8001496:	eb43 0101 	adc.w	r1, r3, r1
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	f04f 0300 	mov.w	r3, #0
 80014a2:	0d42      	lsrs	r2, r0, #21
 80014a4:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 80014a8:	154b      	asrs	r3, r1, #21
 80014aa:	4610      	mov	r0, r2
 80014ac:	4619      	mov	r1, r3
 80014ae:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80014b2:	1a84      	subs	r4, r0, r2
 80014b4:	63bc      	str	r4, [r7, #56]	; 0x38
 80014b6:	eb61 0303 	sbc.w	r3, r1, r3
 80014ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014bc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80014c0:	2800      	cmp	r0, #0
 80014c2:	f171 0300 	sbcs.w	r3, r1, #0
 80014c6:	da06      	bge.n	80014d6 <calculate+0x256>
 80014c8:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80014cc:	f04f 0300 	mov.w	r3, #0
 80014d0:	1880      	adds	r0, r0, r2
 80014d2:	eb43 0101 	adc.w	r1, r3, r1
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	f04f 0300 	mov.w	r3, #0
 80014de:	0b42      	lsrs	r2, r0, #13
 80014e0:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 80014e4:	134b      	asrs	r3, r1, #13
 80014e6:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	//			OFFi = OFFi + 7*(TEMP + 1500l)*(TEMP + 1500l);
	//			SENSi = SENSi + 4*(TEMP + 1500l)*(TEMP + 1500l);
	//		}
	//	} else
	//	{
	Ti = (2*dT*dT)/1.37438953E11;
 80014ea:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80014ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80014f2:	fb03 f102 	mul.w	r1, r3, r2
 80014f6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80014fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80014fe:	fb03 f302 	mul.w	r3, r3, r2
 8001502:	4419      	add	r1, r3
 8001504:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001508:	fba3 2303 	umull	r2, r3, r3, r3
 800150c:	4419      	add	r1, r3
 800150e:	460b      	mov	r3, r1
 8001510:	1891      	adds	r1, r2, r2
 8001512:	6139      	str	r1, [r7, #16]
 8001514:	415b      	adcs	r3, r3
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	f7ff f83c 	bl	800059c <__aeabi_l2d>
 8001524:	a342      	add	r3, pc, #264	; (adr r3, 8001630 <calculate+0x3b0>)
 8001526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152a:	f7ff f98f 	bl	800084c <__aeabi_ddiv>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4610      	mov	r0, r2
 8001534:	4619      	mov	r1, r3
 8001536:	f7ff fbf7 	bl	8000d28 <__aeabi_d2lz>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	OFFi = ((TEMP-2000)*(TEMP - 2000))/16;
 8001542:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001546:	f5b2 6afa 	subs.w	sl, r2, #2000	; 0x7d0
 800154a:	f143 3bff 	adc.w	fp, r3, #4294967295
 800154e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001552:	f5b2 68fa 	subs.w	r8, r2, #2000	; 0x7d0
 8001556:	f143 39ff 	adc.w	r9, r3, #4294967295
 800155a:	fb08 f20b 	mul.w	r2, r8, fp
 800155e:	fb0a f309 	mul.w	r3, sl, r9
 8001562:	18d1      	adds	r1, r2, r3
 8001564:	fbaa 2308 	umull	r2, r3, sl, r8
 8001568:	4419      	add	r1, r3
 800156a:	460b      	mov	r3, r1
 800156c:	2a00      	cmp	r2, #0
 800156e:	f173 0100 	sbcs.w	r1, r3, #0
 8001572:	da02      	bge.n	800157a <calculate+0x2fa>
 8001574:	320f      	adds	r2, #15
 8001576:	f143 0300 	adc.w	r3, r3, #0
 800157a:	f04f 0000 	mov.w	r0, #0
 800157e:	f04f 0100 	mov.w	r1, #0
 8001582:	0910      	lsrs	r0, r2, #4
 8001584:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 8001588:	1119      	asrs	r1, r3, #4
 800158a:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
	SENSi = 0;
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	f04f 0300 	mov.w	r3, #0
 8001596:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

	//	}

	OFF2 = OFF - OFFi;
 800159a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800159e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80015a2:	1a84      	subs	r4, r0, r2
 80015a4:	60bc      	str	r4, [r7, #8]
 80015a6:	eb61 0303 	sbc.w	r3, r1, r3
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80015b0:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	SENS2 = SENS - SENSi;
 80015b4:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80015b8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80015bc:	1a84      	subs	r4, r0, r2
 80015be:	603c      	str	r4, [r7, #0]
 80015c0:	eb61 0303 	sbc.w	r3, r1, r3
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80015ca:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58

	TEMP2 = (TEMP - Ti) / 100; //C
 80015ce:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80015d2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80015d6:	1a84      	subs	r4, r0, r2
 80015d8:	633c      	str	r4, [r7, #48]	; 0x30
 80015da:	eb61 0303 	sbc.w	r3, r1, r3
 80015de:	637b      	str	r3, [r7, #52]	; 0x34
 80015e0:	f04f 0264 	mov.w	r2, #100	; 0x64
 80015e4:	f04f 0300 	mov.w	r3, #0
 80015e8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80015ec:	f7ff fb4c 	bl	8000c88 <__aeabi_ldivmod>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	P2 = (((D1*SENS2)/2097152 - OFF2)/8192)/10; //mbar
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <calculate+0x3c4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	f04f 0300 	mov.w	r3, #0
 8001602:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001604:	fb03 f001 	mul.w	r0, r3, r1
 8001608:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800160a:	fb02 f101 	mul.w	r1, r2, r1
 800160e:	4401      	add	r1, r0
 8001610:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001612:	fba0 2302 	umull	r2, r3, r0, r2
 8001616:	4419      	add	r1, r3
 8001618:	460b      	mov	r3, r1
 800161a:	2a00      	cmp	r2, #0
 800161c:	f173 0100 	sbcs.w	r1, r3, #0
 8001620:	da14      	bge.n	800164c <calculate+0x3cc>
 8001622:	4809      	ldr	r0, [pc, #36]	; (8001648 <calculate+0x3c8>)
 8001624:	f04f 0100 	mov.w	r1, #0
 8001628:	1812      	adds	r2, r2, r0
 800162a:	eb41 0303 	adc.w	r3, r1, r3
 800162e:	e00d      	b.n	800164c <calculate+0x3cc>
 8001630:	fe280000 	.word	0xfe280000
 8001634:	423fffff 	.word	0x423fffff
 8001638:	20000218 	.word	0x20000218
 800163c:	20000208 	.word	0x20000208
 8001640:	007fffff 	.word	0x007fffff
 8001644:	20000224 	.word	0x20000224
 8001648:	001fffff 	.word	0x001fffff
 800164c:	f04f 0000 	mov.w	r0, #0
 8001650:	f04f 0100 	mov.w	r1, #0
 8001654:	0d50      	lsrs	r0, r2, #21
 8001656:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800165a:	1559      	asrs	r1, r3, #21
 800165c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001660:	1a84      	subs	r4, r0, r2
 8001662:	62bc      	str	r4, [r7, #40]	; 0x28
 8001664:	eb61 0303 	sbc.w	r3, r1, r3
 8001668:	62fb      	str	r3, [r7, #44]	; 0x2c
 800166a:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 800166e:	f04f 0300 	mov.w	r3, #0
 8001672:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001676:	f7ff fb07 	bl	8000c88 <__aeabi_ldivmod>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	int32_t res[2];
	res[0] = P;
 8001682:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001686:	643b      	str	r3, [r7, #64]	; 0x40
	res[1] = TEMP/100;
 8001688:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800168c:	f04f 0264 	mov.w	r2, #100	; 0x64
 8001690:	f04f 0300 	mov.w	r3, #0
 8001694:	f7ff faf8 	bl	8000c88 <__aeabi_ldivmod>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4613      	mov	r3, r2
 800169e:	647b      	str	r3, [r7, #68]	; 0x44
	//	strcat(snum1,"\r\n");
	//	HAL_UART_Transmit(&huart2, (uint8_t*) snum1, strlen(snum1),6);



	return res[0]/10;
 80016a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016a2:	4a05      	ldr	r2, [pc, #20]	; (80016b8 <calculate+0x438>)
 80016a4:	fb82 1203 	smull	r1, r2, r2, r3
 80016a8:	1092      	asrs	r2, r2, #2
 80016aa:	17db      	asrs	r3, r3, #31
 80016ac:	1ad3      	subs	r3, r2, r3
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	37a8      	adds	r7, #168	; 0xa8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016b8:	66666667 	.word	0x66666667

080016bc <Thruster_Init>:
extern TIM_HandleTypeDef htim3;



void Thruster_Init()
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 80016c0:	2100      	movs	r1, #0
 80016c2:	4811      	ldr	r0, [pc, #68]	; (8001708 <Thruster_Init+0x4c>)
 80016c4:	f008 f96e 	bl	80099a4 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 80016c8:	2104      	movs	r1, #4
 80016ca:	480f      	ldr	r0, [pc, #60]	; (8001708 <Thruster_Init+0x4c>)
 80016cc:	f008 f96a 	bl	80099a4 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 80016d0:	2108      	movs	r1, #8
 80016d2:	480d      	ldr	r0, [pc, #52]	; (8001708 <Thruster_Init+0x4c>)
 80016d4:	f008 f966 	bl	80099a4 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_4);
 80016d8:	210c      	movs	r1, #12
 80016da:	480b      	ldr	r0, [pc, #44]	; (8001708 <Thruster_Init+0x4c>)
 80016dc:	f008 f962 	bl	80099a4 <HAL_TIM_PWM_Start_IT>

	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 80016e0:	2100      	movs	r1, #0
 80016e2:	480a      	ldr	r0, [pc, #40]	; (800170c <Thruster_Init+0x50>)
 80016e4:	f008 f95e 	bl	80099a4 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 80016e8:	2104      	movs	r1, #4
 80016ea:	4808      	ldr	r0, [pc, #32]	; (800170c <Thruster_Init+0x50>)
 80016ec:	f008 f95a 	bl	80099a4 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 80016f0:	2108      	movs	r1, #8
 80016f2:	4806      	ldr	r0, [pc, #24]	; (800170c <Thruster_Init+0x50>)
 80016f4:	f008 f956 	bl	80099a4 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_4);
 80016f8:	210c      	movs	r1, #12
 80016fa:	4804      	ldr	r0, [pc, #16]	; (800170c <Thruster_Init+0x50>)
 80016fc:	f008 f952 	bl	80099a4 <HAL_TIM_PWM_Start_IT>

	Thruster_Stop();
 8001700:	f000 f806 	bl	8001710 <Thruster_Stop>

}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}
 8001708:	200006c4 	.word	0x200006c4
 800170c:	200003c4 	.word	0x200003c4

08001710 <Thruster_Stop>:

void Thruster_Stop()
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
	int speed = 150;
 8001716:	2396      	movs	r3, #150	; 0x96
 8001718:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, speed);
 800171a:	4b14      	ldr	r3, [pc, #80]	; (800176c <Thruster_Stop+0x5c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, speed);
 8001722:	4b12      	ldr	r3, [pc, #72]	; (800176c <Thruster_Stop+0x5c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, speed);
 800172a:	4b10      	ldr	r3, [pc, #64]	; (800176c <Thruster_Stop+0x5c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, speed);
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <Thruster_Stop+0x5c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	641a      	str	r2, [r3, #64]	; 0x40

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, speed);
 800173a:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <Thruster_Stop+0x60>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <Thruster_Stop+0x60>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, speed);
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <Thruster_Stop+0x60>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, speed);
 8001752:	4b07      	ldr	r3, [pc, #28]	; (8001770 <Thruster_Stop+0x60>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(4000);
 800175a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800175e:	f003 fc99 	bl	8005094 <HAL_Delay>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200006c4 	.word	0x200006c4
 8001770:	200003c4 	.word	0x200003c4

08001774 <Thruster_Set_Speed>:

void Thruster_Set_Speed(int *speed)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, speed[2]);//3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3308      	adds	r3, #8
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <Thruster_Set_Speed+0x74>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, speed[0]);//1
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <Thruster_Set_Speed+0x74>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, speed[6]);//7
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3318      	adds	r3, #24
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b13      	ldr	r3, [pc, #76]	; (80017e8 <Thruster_Set_Speed+0x74>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, speed[7]);//8
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	331c      	adds	r3, #28
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <Thruster_Set_Speed+0x74>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	641a      	str	r2, [r3, #64]	; 0x40

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, speed[1]);//2
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3304      	adds	r3, #4
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <Thruster_Set_Speed+0x78>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed[3]);//4
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	330c      	adds	r3, #12
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <Thruster_Set_Speed+0x78>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, speed[4]);//5
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3310      	adds	r3, #16
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <Thruster_Set_Speed+0x78>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, speed[5]);//6
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3314      	adds	r3, #20
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <Thruster_Set_Speed+0x78>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	641a      	str	r2, [r3, #64]	; 0x40

}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	200006c4 	.word	0x200006c4
 80017ec:	200003c4 	.word	0x200003c4

080017f0 <Thruster_Set_Perc>:

void Thruster_Set_Perc(int *speed)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08c      	sub	sp, #48	; 0x30
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	int sec_speed[8];
	for(int i = 0;i<8;i++)
 80017f8:	2300      	movs	r3, #0
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017fc:	e03e      	b.n	800187c <Thruster_Set_Perc+0x8c>
	{
		if((speed[i]<100)&&(speed[i]>-100))
 80017fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b63      	cmp	r3, #99	; 0x63
 800180a:	dc2c      	bgt.n	8001866 <Thruster_Set_Perc+0x76>
 800180c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	4413      	add	r3, r2
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800181a:	db24      	blt.n	8001866 <Thruster_Set_Perc+0x76>
			sec_speed[i] = speed[i]*kpercsec+150;
 800181c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	4413      	add	r3, r2
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fe7c 	bl	8000524 <__aeabi_i2d>
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <Thruster_Set_Perc+0xb0>)
 8001832:	f7fe fee1 	bl	80005f8 <__aeabi_dmul>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4610      	mov	r0, r2
 800183c:	4619      	mov	r1, r3
 800183e:	a316      	add	r3, pc, #88	; (adr r3, 8001898 <Thruster_Set_Perc+0xa8>)
 8001840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001844:	f7fe fd22 	bl	800028c <__adddf3>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	f7ff f982 	bl	8000b58 <__aeabi_d2iz>
 8001854:	4602      	mov	r2, r0
 8001856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800185e:	440b      	add	r3, r1
 8001860:	f843 2c24 	str.w	r2, [r3, #-36]
 8001864:	e007      	b.n	8001876 <Thruster_Set_Perc+0x86>
		else
			sec_speed[i] = 150;
 8001866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800186e:	4413      	add	r3, r2
 8001870:	2296      	movs	r2, #150	; 0x96
 8001872:	f843 2c24 	str.w	r2, [r3, #-36]
	for(int i = 0;i<8;i++)
 8001876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001878:	3301      	adds	r3, #1
 800187a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800187c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800187e:	2b07      	cmp	r3, #7
 8001880:	ddbd      	ble.n	80017fe <Thruster_Set_Perc+0xe>
	}

	Thruster_Set_Speed(sec_speed);
 8001882:	f107 030c 	add.w	r3, r7, #12
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff ff74 	bl	8001774 <Thruster_Set_Speed>

}
 800188c:	bf00      	nop
 800188e:	3730      	adds	r7, #48	; 0x30
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	f3af 8000 	nop.w
 8001898:	00000000 	.word	0x00000000
 800189c:	4062c000 	.word	0x4062c000
 80018a0:	3fe00000 	.word	0x3fe00000
 80018a4:	00000000 	.word	0x00000000

080018a8 <imu9dof>:
#define PI 3.1416f
float pitch_qs, roll_qs, yaw_qs;
extern float magX_bias, magY_bias;

void imu9dof(float* acc_in, float* gyro_in, float* mag_in, float dt, float* out)
{
 80018a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018ac:	b09e      	sub	sp, #120	; 0x78
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6178      	str	r0, [r7, #20]
 80018b2:	6139      	str	r1, [r7, #16]
 80018b4:	60fa      	str	r2, [r7, #12]
 80018b6:	ed87 0a02 	vstr	s0, [r7, #8]
 80018ba:	607b      	str	r3, [r7, #4]
	float Q_angle = 0.001f, Q_bias = 0.003f, R_measure = 0.001f;
 80018bc:	4bd0      	ldr	r3, [pc, #832]	; (8001c00 <imu9dof+0x358>)
 80018be:	677b      	str	r3, [r7, #116]	; 0x74
 80018c0:	4bd0      	ldr	r3, [pc, #832]	; (8001c04 <imu9dof+0x35c>)
 80018c2:	673b      	str	r3, [r7, #112]	; 0x70
 80018c4:	4bce      	ldr	r3, [pc, #824]	; (8001c00 <imu9dof+0x358>)
 80018c6:	66fb      	str	r3, [r7, #108]	; 0x6c
	float Q_angle_yaw = 0.01f, Q_bias_yaw = 0.03f, R_measure_yaw = 0.001f;
 80018c8:	4bcf      	ldr	r3, [pc, #828]	; (8001c08 <imu9dof+0x360>)
 80018ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80018cc:	4bcf      	ldr	r3, [pc, #828]	; (8001c0c <imu9dof+0x364>)
 80018ce:	667b      	str	r3, [r7, #100]	; 0x64
 80018d0:	4bcb      	ldr	r3, [pc, #812]	; (8001c00 <imu9dof+0x358>)
 80018d2:	663b      	str	r3, [r7, #96]	; 0x60
	static float pitch = 0.0f, roll = 0.0f, yaw = 0.0f, bias_pitch = 0.0f, bias_roll = 0.0f, bias_yaw = 0.0f;
	static float P_pitch[2][2], P_roll[2][2], P_yaw[2][2];

	// Pitch
	P_pitch[0][0] = 0.0f;
 80018d4:	4bce      	ldr	r3, [pc, #824]	; (8001c10 <imu9dof+0x368>)
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
  P_pitch[0][1] = 0.0f;
 80018dc:	4bcc      	ldr	r3, [pc, #816]	; (8001c10 <imu9dof+0x368>)
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	605a      	str	r2, [r3, #4]
  P_pitch[1][0] = 0.0f;
 80018e4:	4bca      	ldr	r3, [pc, #808]	; (8001c10 <imu9dof+0x368>)
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  P_pitch[1][1] = 0.0f;
 80018ec:	4bc8      	ldr	r3, [pc, #800]	; (8001c10 <imu9dof+0x368>)
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	60da      	str	r2, [r3, #12]

	gyro_in[1] = -gyro_in[1] - bias_pitch;
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	3304      	adds	r3, #4
 80018f8:	edd3 7a00 	vldr	s15, [r3]
 80018fc:	eeb1 7a67 	vneg.f32	s14, s15
 8001900:	4bc4      	ldr	r3, [pc, #784]	; (8001c14 <imu9dof+0x36c>)
 8001902:	edd3 7a00 	vldr	s15, [r3]
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	3304      	adds	r3, #4
 800190a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800190e:	edc3 7a00 	vstr	s15, [r3]
	pitch += dt*gyro_in[1];
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	3304      	adds	r3, #4
 8001916:	ed93 7a00 	vldr	s14, [r3]
 800191a:	edd7 7a02 	vldr	s15, [r7, #8]
 800191e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001922:	4bbd      	ldr	r3, [pc, #756]	; (8001c18 <imu9dof+0x370>)
 8001924:	edd3 7a00 	vldr	s15, [r3]
 8001928:	ee77 7a27 	vadd.f32	s15, s14, s15
 800192c:	4bba      	ldr	r3, [pc, #744]	; (8001c18 <imu9dof+0x370>)
 800192e:	edc3 7a00 	vstr	s15, [r3]

	P_pitch[0][0] += dt * (dt*P_pitch[1][1] - P_pitch[0][1] - P_pitch[1][0] + Q_angle);
 8001932:	4bb7      	ldr	r3, [pc, #732]	; (8001c10 <imu9dof+0x368>)
 8001934:	ed93 7a00 	vldr	s14, [r3]
 8001938:	4bb5      	ldr	r3, [pc, #724]	; (8001c10 <imu9dof+0x368>)
 800193a:	edd3 6a03 	vldr	s13, [r3, #12]
 800193e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001942:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001946:	4bb2      	ldr	r3, [pc, #712]	; (8001c10 <imu9dof+0x368>)
 8001948:	edd3 7a01 	vldr	s15, [r3, #4]
 800194c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001950:	4baf      	ldr	r3, [pc, #700]	; (8001c10 <imu9dof+0x368>)
 8001952:	edd3 7a02 	vldr	s15, [r3, #8]
 8001956:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800195a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800195e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001962:	edd7 7a02 	vldr	s15, [r7, #8]
 8001966:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800196a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800196e:	4ba8      	ldr	r3, [pc, #672]	; (8001c10 <imu9dof+0x368>)
 8001970:	edc3 7a00 	vstr	s15, [r3]
	P_pitch[0][1] -= dt * P_pitch[1][1];
 8001974:	4ba6      	ldr	r3, [pc, #664]	; (8001c10 <imu9dof+0x368>)
 8001976:	ed93 7a01 	vldr	s14, [r3, #4]
 800197a:	4ba5      	ldr	r3, [pc, #660]	; (8001c10 <imu9dof+0x368>)
 800197c:	edd3 6a03 	vldr	s13, [r3, #12]
 8001980:	edd7 7a02 	vldr	s15, [r7, #8]
 8001984:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001988:	ee77 7a67 	vsub.f32	s15, s14, s15
 800198c:	4ba0      	ldr	r3, [pc, #640]	; (8001c10 <imu9dof+0x368>)
 800198e:	edc3 7a01 	vstr	s15, [r3, #4]
	P_pitch[1][0] -= dt * P_pitch[1][1];
 8001992:	4b9f      	ldr	r3, [pc, #636]	; (8001c10 <imu9dof+0x368>)
 8001994:	ed93 7a02 	vldr	s14, [r3, #8]
 8001998:	4b9d      	ldr	r3, [pc, #628]	; (8001c10 <imu9dof+0x368>)
 800199a:	edd3 6a03 	vldr	s13, [r3, #12]
 800199e:	edd7 7a02 	vldr	s15, [r7, #8]
 80019a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019aa:	4b99      	ldr	r3, [pc, #612]	; (8001c10 <imu9dof+0x368>)
 80019ac:	edc3 7a02 	vstr	s15, [r3, #8]
  P_pitch[1][1] += Q_bias * dt;
 80019b0:	4b97      	ldr	r3, [pc, #604]	; (8001c10 <imu9dof+0x368>)
 80019b2:	ed93 7a03 	vldr	s14, [r3, #12]
 80019b6:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 80019ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80019be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c6:	4b92      	ldr	r3, [pc, #584]	; (8001c10 <imu9dof+0x368>)
 80019c8:	edc3 7a03 	vstr	s15, [r3, #12]

	pitch_qs = -atan2(-acc_in[1], sqrt((acc_in[0]*acc_in[0])+(acc_in[2]*acc_in[2])))*180/PI;
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	3304      	adds	r3, #4
 80019d0:	edd3 7a00 	vldr	s15, [r3]
 80019d4:	eef1 7a67 	vneg.f32	s15, s15
 80019d8:	ee17 3a90 	vmov	r3, s15
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe fdb3 	bl	8000548 <__aeabi_f2d>
 80019e2:	4682      	mov	sl, r0
 80019e4:	468b      	mov	fp, r1
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	ed93 7a00 	vldr	s14, [r3]
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	edd3 7a00 	vldr	s15, [r3]
 80019f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	3308      	adds	r3, #8
 80019fa:	edd3 6a00 	vldr	s13, [r3]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	3308      	adds	r3, #8
 8001a02:	edd3 7a00 	vldr	s15, [r3]
 8001a06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a0e:	ee17 0a90 	vmov	r0, s15
 8001a12:	f7fe fd99 	bl	8000548 <__aeabi_f2d>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	ec43 2b10 	vmov	d0, r2, r3
 8001a1e:	f00a f9dd 	bl	800bddc <sqrt>
 8001a22:	eeb0 7a40 	vmov.f32	s14, s0
 8001a26:	eef0 7a60 	vmov.f32	s15, s1
 8001a2a:	eeb0 1a47 	vmov.f32	s2, s14
 8001a2e:	eef0 1a67 	vmov.f32	s3, s15
 8001a32:	ec4b ab10 	vmov	d0, sl, fp
 8001a36:	f00a f9cf 	bl	800bdd8 <atan2>
 8001a3a:	ec53 2b10 	vmov	r2, r3, d0
 8001a3e:	4690      	mov	r8, r2
 8001a40:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	4b74      	ldr	r3, [pc, #464]	; (8001c1c <imu9dof+0x374>)
 8001a4a:	4640      	mov	r0, r8
 8001a4c:	4649      	mov	r1, r9
 8001a4e:	f7fe fdd3 	bl	80005f8 <__aeabi_dmul>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4610      	mov	r0, r2
 8001a58:	4619      	mov	r1, r3
 8001a5a:	a367      	add	r3, pc, #412	; (adr r3, 8001bf8 <imu9dof+0x350>)
 8001a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a60:	f7fe fef4 	bl	800084c <__aeabi_ddiv>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f7ff f8bc 	bl	8000be8 <__aeabi_d2f>
 8001a70:	4603      	mov	r3, r0
 8001a72:	4a6b      	ldr	r2, [pc, #428]	; (8001c20 <imu9dof+0x378>)
 8001a74:	6013      	str	r3, [r2, #0]
	float y_pitch = pitch_qs - pitch;
 8001a76:	4b6a      	ldr	r3, [pc, #424]	; (8001c20 <imu9dof+0x378>)
 8001a78:	ed93 7a00 	vldr	s14, [r3]
 8001a7c:	4b66      	ldr	r3, [pc, #408]	; (8001c18 <imu9dof+0x370>)
 8001a7e:	edd3 7a00 	vldr	s15, [r3]
 8001a82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a86:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

	float S_pitch = P_pitch[0][0] + R_measure;
 8001a8a:	4b61      	ldr	r3, [pc, #388]	; (8001c10 <imu9dof+0x368>)
 8001a8c:	edd3 7a00 	vldr	s15, [r3]
 8001a90:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8001a94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a98:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

	float K_pitch[2];
	K_pitch[0] = P_pitch[0][0] / S_pitch;
 8001a9c:	4b5c      	ldr	r3, [pc, #368]	; (8001c10 <imu9dof+0x368>)
 8001a9e:	edd3 6a00 	vldr	s13, [r3]
 8001aa2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001aa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aaa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  K_pitch[1] = P_pitch[1][0] / S_pitch;
 8001aae:	4b58      	ldr	r3, [pc, #352]	; (8001c10 <imu9dof+0x368>)
 8001ab0:	edd3 6a02 	vldr	s13, [r3, #8]
 8001ab4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001ab8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001abc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	pitch += K_pitch[0] * y_pitch;
 8001ac0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001ac4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001ac8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001acc:	4b52      	ldr	r3, [pc, #328]	; (8001c18 <imu9dof+0x370>)
 8001ace:	edd3 7a00 	vldr	s15, [r3]
 8001ad2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ad6:	4b50      	ldr	r3, [pc, #320]	; (8001c18 <imu9dof+0x370>)
 8001ad8:	edc3 7a00 	vstr	s15, [r3]
  bias_pitch += K_pitch[1] * y_pitch;
 8001adc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001ae0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001ae4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ae8:	4b4a      	ldr	r3, [pc, #296]	; (8001c14 <imu9dof+0x36c>)
 8001aea:	edd3 7a00 	vldr	s15, [r3]
 8001aee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af2:	4b48      	ldr	r3, [pc, #288]	; (8001c14 <imu9dof+0x36c>)
 8001af4:	edc3 7a00 	vstr	s15, [r3]

	float P00_temp_pitch = P_pitch[0][0];
 8001af8:	4b45      	ldr	r3, [pc, #276]	; (8001c10 <imu9dof+0x368>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	657b      	str	r3, [r7, #84]	; 0x54
  float P01_temp_pitch = P_pitch[0][1];
 8001afe:	4b44      	ldr	r3, [pc, #272]	; (8001c10 <imu9dof+0x368>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	653b      	str	r3, [r7, #80]	; 0x50

  P_pitch[0][0] -= K_pitch[0] * P00_temp_pitch;
 8001b04:	4b42      	ldr	r3, [pc, #264]	; (8001c10 <imu9dof+0x368>)
 8001b06:	ed93 7a00 	vldr	s14, [r3]
 8001b0a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001b0e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001b12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b1a:	4b3d      	ldr	r3, [pc, #244]	; (8001c10 <imu9dof+0x368>)
 8001b1c:	edc3 7a00 	vstr	s15, [r3]
  P_pitch[0][1] -= K_pitch[0] * P01_temp_pitch;
 8001b20:	4b3b      	ldr	r3, [pc, #236]	; (8001c10 <imu9dof+0x368>)
 8001b22:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b26:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001b2a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001b2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b36:	4b36      	ldr	r3, [pc, #216]	; (8001c10 <imu9dof+0x368>)
 8001b38:	edc3 7a01 	vstr	s15, [r3, #4]
  P_pitch[1][0] -= K_pitch[1] * P00_temp_pitch;
 8001b3c:	4b34      	ldr	r3, [pc, #208]	; (8001c10 <imu9dof+0x368>)
 8001b3e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b42:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001b46:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001b4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b52:	4b2f      	ldr	r3, [pc, #188]	; (8001c10 <imu9dof+0x368>)
 8001b54:	edc3 7a02 	vstr	s15, [r3, #8]
  P_pitch[1][1] -= K_pitch[1] * P01_temp_pitch;
 8001b58:	4b2d      	ldr	r3, [pc, #180]	; (8001c10 <imu9dof+0x368>)
 8001b5a:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b5e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001b62:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001b66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b6e:	4b28      	ldr	r3, [pc, #160]	; (8001c10 <imu9dof+0x368>)
 8001b70:	edc3 7a03 	vstr	s15, [r3, #12]

	//Roll
	P_roll[0][0] = 0.0f;
 8001b74:	4b2b      	ldr	r3, [pc, #172]	; (8001c24 <imu9dof+0x37c>)
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
  P_roll[0][1] = 0.0f;
 8001b7c:	4b29      	ldr	r3, [pc, #164]	; (8001c24 <imu9dof+0x37c>)
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	605a      	str	r2, [r3, #4]
  P_roll[1][0] = 0.0f;
 8001b84:	4b27      	ldr	r3, [pc, #156]	; (8001c24 <imu9dof+0x37c>)
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
  P_roll[1][1] = 0.0f;
 8001b8c:	4b25      	ldr	r3, [pc, #148]	; (8001c24 <imu9dof+0x37c>)
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	60da      	str	r2, [r3, #12]

	gyro_in[0] = gyro_in[0] - bias_roll;
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	ed93 7a00 	vldr	s14, [r3]
 8001b9a:	4b23      	ldr	r3, [pc, #140]	; (8001c28 <imu9dof+0x380>)
 8001b9c:	edd3 7a00 	vldr	s15, [r3]
 8001ba0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	edc3 7a00 	vstr	s15, [r3]
	roll += dt*gyro_in[0];
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	ed93 7a00 	vldr	s14, [r3]
 8001bb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bb8:	4b1c      	ldr	r3, [pc, #112]	; (8001c2c <imu9dof+0x384>)
 8001bba:	edd3 7a00 	vldr	s15, [r3]
 8001bbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc2:	4b1a      	ldr	r3, [pc, #104]	; (8001c2c <imu9dof+0x384>)
 8001bc4:	edc3 7a00 	vstr	s15, [r3]

	P_roll[0][0] += dt * (dt*P_roll[1][1] - P_roll[0][1] - P_roll[1][0] + Q_angle);
 8001bc8:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <imu9dof+0x37c>)
 8001bca:	ed93 7a00 	vldr	s14, [r3]
 8001bce:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <imu9dof+0x37c>)
 8001bd0:	edd3 6a03 	vldr	s13, [r3, #12]
 8001bd4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bd8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <imu9dof+0x37c>)
 8001bde:	edd3 7a01 	vldr	s15, [r3, #4]
 8001be2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001be6:	4b0f      	ldr	r3, [pc, #60]	; (8001c24 <imu9dof+0x37c>)
 8001be8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bec:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001bf0:	e01e      	b.n	8001c30 <imu9dof+0x388>
 8001bf2:	bf00      	nop
 8001bf4:	f3af 8000 	nop.w
 8001bf8:	20000000 	.word	0x20000000
 8001bfc:	400921ff 	.word	0x400921ff
 8001c00:	3a83126f 	.word	0x3a83126f
 8001c04:	3b449ba6 	.word	0x3b449ba6
 8001c08:	3c23d70a 	.word	0x3c23d70a
 8001c0c:	3cf5c28f 	.word	0x3cf5c28f
 8001c10:	20000120 	.word	0x20000120
 8001c14:	20000130 	.word	0x20000130
 8001c18:	20000134 	.word	0x20000134
 8001c1c:	40668000 	.word	0x40668000
 8001c20:	2000022c 	.word	0x2000022c
 8001c24:	20000138 	.word	0x20000138
 8001c28:	20000148 	.word	0x20000148
 8001c2c:	2000014c 	.word	0x2000014c
 8001c30:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001c34:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001c38:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c44:	4bd8      	ldr	r3, [pc, #864]	; (8001fa8 <imu9dof+0x700>)
 8001c46:	edc3 7a00 	vstr	s15, [r3]
	P_roll[0][1] -= dt * P_roll[1][1];
 8001c4a:	4bd7      	ldr	r3, [pc, #860]	; (8001fa8 <imu9dof+0x700>)
 8001c4c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c50:	4bd5      	ldr	r3, [pc, #852]	; (8001fa8 <imu9dof+0x700>)
 8001c52:	edd3 6a03 	vldr	s13, [r3, #12]
 8001c56:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c62:	4bd1      	ldr	r3, [pc, #836]	; (8001fa8 <imu9dof+0x700>)
 8001c64:	edc3 7a01 	vstr	s15, [r3, #4]
	P_roll[1][0] -= dt * P_roll[1][1];
 8001c68:	4bcf      	ldr	r3, [pc, #828]	; (8001fa8 <imu9dof+0x700>)
 8001c6a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c6e:	4bce      	ldr	r3, [pc, #824]	; (8001fa8 <imu9dof+0x700>)
 8001c70:	edd3 6a03 	vldr	s13, [r3, #12]
 8001c74:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c80:	4bc9      	ldr	r3, [pc, #804]	; (8001fa8 <imu9dof+0x700>)
 8001c82:	edc3 7a02 	vstr	s15, [r3, #8]
  P_roll[1][1] += Q_bias * dt;
 8001c86:	4bc8      	ldr	r3, [pc, #800]	; (8001fa8 <imu9dof+0x700>)
 8001c88:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c8c:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8001c90:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c9c:	4bc2      	ldr	r3, [pc, #776]	; (8001fa8 <imu9dof+0x700>)
 8001c9e:	edc3 7a03 	vstr	s15, [r3, #12]

	roll_qs = atan2(-acc_in[0], sqrt((acc_in[1]*acc_in[1])+(acc_in[2]*acc_in[2])))*180/PI;
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	edd3 7a00 	vldr	s15, [r3]
 8001ca8:	eef1 7a67 	vneg.f32	s15, s15
 8001cac:	ee17 3a90 	vmov	r3, s15
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7fe fc49 	bl	8000548 <__aeabi_f2d>
 8001cb6:	4680      	mov	r8, r0
 8001cb8:	4689      	mov	r9, r1
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	ed93 7a00 	vldr	s14, [r3]
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	edd3 7a00 	vldr	s15, [r3]
 8001cca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	3308      	adds	r3, #8
 8001cd2:	edd3 6a00 	vldr	s13, [r3]
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	3308      	adds	r3, #8
 8001cda:	edd3 7a00 	vldr	s15, [r3]
 8001cde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ce2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce6:	ee17 0a90 	vmov	r0, s15
 8001cea:	f7fe fc2d 	bl	8000548 <__aeabi_f2d>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	ec43 2b10 	vmov	d0, r2, r3
 8001cf6:	f00a f871 	bl	800bddc <sqrt>
 8001cfa:	eeb0 7a40 	vmov.f32	s14, s0
 8001cfe:	eef0 7a60 	vmov.f32	s15, s1
 8001d02:	eeb0 1a47 	vmov.f32	s2, s14
 8001d06:	eef0 1a67 	vmov.f32	s3, s15
 8001d0a:	ec49 8b10 	vmov	d0, r8, r9
 8001d0e:	f00a f863 	bl	800bdd8 <atan2>
 8001d12:	ec51 0b10 	vmov	r0, r1, d0
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	4ba4      	ldr	r3, [pc, #656]	; (8001fac <imu9dof+0x704>)
 8001d1c:	f7fe fc6c 	bl	80005f8 <__aeabi_dmul>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4610      	mov	r0, r2
 8001d26:	4619      	mov	r1, r3
 8001d28:	a39d      	add	r3, pc, #628	; (adr r3, 8001fa0 <imu9dof+0x6f8>)
 8001d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2e:	f7fe fd8d 	bl	800084c <__aeabi_ddiv>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	4610      	mov	r0, r2
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f7fe ff55 	bl	8000be8 <__aeabi_d2f>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	4a9b      	ldr	r2, [pc, #620]	; (8001fb0 <imu9dof+0x708>)
 8001d42:	6013      	str	r3, [r2, #0]
	float y_roll = roll_qs - roll;
 8001d44:	4b9a      	ldr	r3, [pc, #616]	; (8001fb0 <imu9dof+0x708>)
 8001d46:	ed93 7a00 	vldr	s14, [r3]
 8001d4a:	4b9a      	ldr	r3, [pc, #616]	; (8001fb4 <imu9dof+0x70c>)
 8001d4c:	edd3 7a00 	vldr	s15, [r3]
 8001d50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d54:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

	float S_roll = P_roll[0][0] + R_measure;
 8001d58:	4b93      	ldr	r3, [pc, #588]	; (8001fa8 <imu9dof+0x700>)
 8001d5a:	edd3 7a00 	vldr	s15, [r3]
 8001d5e:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8001d62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d66:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

	float K_roll[2];
	K_roll[0] = P_roll[0][0] / S_roll;
 8001d6a:	4b8f      	ldr	r3, [pc, #572]	; (8001fa8 <imu9dof+0x700>)
 8001d6c:	edd3 6a00 	vldr	s13, [r3]
 8001d70:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001d74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d78:	edc7 7a08 	vstr	s15, [r7, #32]
  K_roll[1] = P_roll[1][0] / S_roll;
 8001d7c:	4b8a      	ldr	r3, [pc, #552]	; (8001fa8 <imu9dof+0x700>)
 8001d7e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001d82:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001d86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d8a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	roll += K_roll[0] * y_roll;
 8001d8e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d92:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001d96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d9a:	4b86      	ldr	r3, [pc, #536]	; (8001fb4 <imu9dof+0x70c>)
 8001d9c:	edd3 7a00 	vldr	s15, [r3]
 8001da0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da4:	4b83      	ldr	r3, [pc, #524]	; (8001fb4 <imu9dof+0x70c>)
 8001da6:	edc3 7a00 	vstr	s15, [r3]
  bias_roll += K_roll[1] * y_roll;
 8001daa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001dae:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001db2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001db6:	4b80      	ldr	r3, [pc, #512]	; (8001fb8 <imu9dof+0x710>)
 8001db8:	edd3 7a00 	vldr	s15, [r3]
 8001dbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc0:	4b7d      	ldr	r3, [pc, #500]	; (8001fb8 <imu9dof+0x710>)
 8001dc2:	edc3 7a00 	vstr	s15, [r3]

	float P00_temp_roll = P_roll[0][0];
 8001dc6:	4b78      	ldr	r3, [pc, #480]	; (8001fa8 <imu9dof+0x700>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	647b      	str	r3, [r7, #68]	; 0x44
  float P01_temp_roll = P_roll[0][1];
 8001dcc:	4b76      	ldr	r3, [pc, #472]	; (8001fa8 <imu9dof+0x700>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	643b      	str	r3, [r7, #64]	; 0x40

  P_roll[0][0] -= K_roll[0] * P00_temp_roll;
 8001dd2:	4b75      	ldr	r3, [pc, #468]	; (8001fa8 <imu9dof+0x700>)
 8001dd4:	ed93 7a00 	vldr	s14, [r3]
 8001dd8:	edd7 6a08 	vldr	s13, [r7, #32]
 8001ddc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001de0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001de8:	4b6f      	ldr	r3, [pc, #444]	; (8001fa8 <imu9dof+0x700>)
 8001dea:	edc3 7a00 	vstr	s15, [r3]
  P_roll[0][1] -= K_roll[0] * P01_temp_roll;
 8001dee:	4b6e      	ldr	r3, [pc, #440]	; (8001fa8 <imu9dof+0x700>)
 8001df0:	ed93 7a01 	vldr	s14, [r3, #4]
 8001df4:	edd7 6a08 	vldr	s13, [r7, #32]
 8001df8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001dfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e04:	4b68      	ldr	r3, [pc, #416]	; (8001fa8 <imu9dof+0x700>)
 8001e06:	edc3 7a01 	vstr	s15, [r3, #4]
  P_roll[1][0] -= K_roll[1] * P00_temp_roll;
 8001e0a:	4b67      	ldr	r3, [pc, #412]	; (8001fa8 <imu9dof+0x700>)
 8001e0c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e10:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001e14:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e20:	4b61      	ldr	r3, [pc, #388]	; (8001fa8 <imu9dof+0x700>)
 8001e22:	edc3 7a02 	vstr	s15, [r3, #8]
  P_roll[1][1] -= K_roll[1] * P01_temp_roll;
 8001e26:	4b60      	ldr	r3, [pc, #384]	; (8001fa8 <imu9dof+0x700>)
 8001e28:	ed93 7a03 	vldr	s14, [r3, #12]
 8001e2c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001e30:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001e34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e3c:	4b5a      	ldr	r3, [pc, #360]	; (8001fa8 <imu9dof+0x700>)
 8001e3e:	edc3 7a03 	vstr	s15, [r3, #12]

	//Yaw

	P_yaw[0][0] = 0.0f;
 8001e42:	4b5e      	ldr	r3, [pc, #376]	; (8001fbc <imu9dof+0x714>)
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
  P_yaw[0][1] = 0.0f;
 8001e4a:	4b5c      	ldr	r3, [pc, #368]	; (8001fbc <imu9dof+0x714>)
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	605a      	str	r2, [r3, #4]
  P_yaw[1][0] = 0.0f;
 8001e52:	4b5a      	ldr	r3, [pc, #360]	; (8001fbc <imu9dof+0x714>)
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  P_yaw[1][1] = 0.0f;
 8001e5a:	4b58      	ldr	r3, [pc, #352]	; (8001fbc <imu9dof+0x714>)
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	60da      	str	r2, [r3, #12]

	gyro_in[2] = -gyro_in[2] - bias_yaw;
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	3308      	adds	r3, #8
 8001e66:	edd3 7a00 	vldr	s15, [r3]
 8001e6a:	eeb1 7a67 	vneg.f32	s14, s15
 8001e6e:	4b54      	ldr	r3, [pc, #336]	; (8001fc0 <imu9dof+0x718>)
 8001e70:	edd3 7a00 	vldr	s15, [r3]
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	3308      	adds	r3, #8
 8001e78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e7c:	edc3 7a00 	vstr	s15, [r3]
	yaw += dt*gyro_in[2];
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	3308      	adds	r3, #8
 8001e84:	ed93 7a00 	vldr	s14, [r3]
 8001e88:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e90:	4b4c      	ldr	r3, [pc, #304]	; (8001fc4 <imu9dof+0x71c>)
 8001e92:	edd3 7a00 	vldr	s15, [r3]
 8001e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e9a:	4b4a      	ldr	r3, [pc, #296]	; (8001fc4 <imu9dof+0x71c>)
 8001e9c:	edc3 7a00 	vstr	s15, [r3]

	P_yaw[0][0] += dt * (dt*P_yaw[1][1] - P_yaw[0][1] - P_yaw[1][0] + Q_angle_yaw);
 8001ea0:	4b46      	ldr	r3, [pc, #280]	; (8001fbc <imu9dof+0x714>)
 8001ea2:	ed93 7a00 	vldr	s14, [r3]
 8001ea6:	4b45      	ldr	r3, [pc, #276]	; (8001fbc <imu9dof+0x714>)
 8001ea8:	edd3 6a03 	vldr	s13, [r3, #12]
 8001eac:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eb0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001eb4:	4b41      	ldr	r3, [pc, #260]	; (8001fbc <imu9dof+0x714>)
 8001eb6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001eba:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ebe:	4b3f      	ldr	r3, [pc, #252]	; (8001fbc <imu9dof+0x714>)
 8001ec0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ec4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ec8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001ecc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001ed0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ed4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ed8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001edc:	4b37      	ldr	r3, [pc, #220]	; (8001fbc <imu9dof+0x714>)
 8001ede:	edc3 7a00 	vstr	s15, [r3]
	P_yaw[0][1] -= dt * P_yaw[1][1];
 8001ee2:	4b36      	ldr	r3, [pc, #216]	; (8001fbc <imu9dof+0x714>)
 8001ee4:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ee8:	4b34      	ldr	r3, [pc, #208]	; (8001fbc <imu9dof+0x714>)
 8001eea:	edd3 6a03 	vldr	s13, [r3, #12]
 8001eee:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ef2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ef6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001efa:	4b30      	ldr	r3, [pc, #192]	; (8001fbc <imu9dof+0x714>)
 8001efc:	edc3 7a01 	vstr	s15, [r3, #4]
	P_yaw[1][0] -= dt * P_yaw[1][1];
 8001f00:	4b2e      	ldr	r3, [pc, #184]	; (8001fbc <imu9dof+0x714>)
 8001f02:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f06:	4b2d      	ldr	r3, [pc, #180]	; (8001fbc <imu9dof+0x714>)
 8001f08:	edd3 6a03 	vldr	s13, [r3, #12]
 8001f0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f18:	4b28      	ldr	r3, [pc, #160]	; (8001fbc <imu9dof+0x714>)
 8001f1a:	edc3 7a02 	vstr	s15, [r3, #8]
  P_yaw[1][1] += Q_bias_yaw * dt;
 8001f1e:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <imu9dof+0x714>)
 8001f20:	ed93 7a03 	vldr	s14, [r3, #12]
 8001f24:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8001f28:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f34:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <imu9dof+0x714>)
 8001f36:	edc3 7a03 	vstr	s15, [r3, #12]

	yaw_qs = -atan2(mag_in[0] - magX_bias,mag_in[1] - magY_bias)*180/PI;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	ed93 7a00 	vldr	s14, [r3]
 8001f40:	4b21      	ldr	r3, [pc, #132]	; (8001fc8 <imu9dof+0x720>)
 8001f42:	edd3 7a00 	vldr	s15, [r3]
 8001f46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f4a:	ee17 0a90 	vmov	r0, s15
 8001f4e:	f7fe fafb 	bl	8000548 <__aeabi_f2d>
 8001f52:	4680      	mov	r8, r0
 8001f54:	4689      	mov	r9, r1
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	ed93 7a00 	vldr	s14, [r3]
 8001f5e:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <imu9dof+0x724>)
 8001f60:	edd3 7a00 	vldr	s15, [r3]
 8001f64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f68:	ee17 0a90 	vmov	r0, s15
 8001f6c:	f7fe faec 	bl	8000548 <__aeabi_f2d>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	ec43 2b11 	vmov	d1, r2, r3
 8001f78:	ec49 8b10 	vmov	d0, r8, r9
 8001f7c:	f009 ff2c 	bl	800bdd8 <atan2>
 8001f80:	ec53 2b10 	vmov	r2, r3, d0
 8001f84:	4614      	mov	r4, r2
 8001f86:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	4b07      	ldr	r3, [pc, #28]	; (8001fac <imu9dof+0x704>)
 8001f90:	4620      	mov	r0, r4
 8001f92:	4629      	mov	r1, r5
 8001f94:	f7fe fb30 	bl	80005f8 <__aeabi_dmul>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	e019      	b.n	8001fd0 <imu9dof+0x728>
 8001f9c:	f3af 8000 	nop.w
 8001fa0:	20000000 	.word	0x20000000
 8001fa4:	400921ff 	.word	0x400921ff
 8001fa8:	20000138 	.word	0x20000138
 8001fac:	40668000 	.word	0x40668000
 8001fb0:	20000230 	.word	0x20000230
 8001fb4:	2000014c 	.word	0x2000014c
 8001fb8:	20000148 	.word	0x20000148
 8001fbc:	20000150 	.word	0x20000150
 8001fc0:	20000160 	.word	0x20000160
 8001fc4:	20000164 	.word	0x20000164
 8001fc8:	20000a9c 	.word	0x20000a9c
 8001fcc:	20000610 	.word	0x20000610
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	a36b      	add	r3, pc, #428	; (adr r3, 8002184 <imu9dof+0x8dc>)
 8001fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fdc:	f7fe fc36 	bl	800084c <__aeabi_ddiv>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f7fe fdfe 	bl	8000be8 <__aeabi_d2f>
 8001fec:	4603      	mov	r3, r0
 8001fee:	4a5e      	ldr	r2, [pc, #376]	; (8002168 <imu9dof+0x8c0>)
 8001ff0:	6013      	str	r3, [r2, #0]
	if (yaw_qs < 0)
 8001ff2:	4b5d      	ldr	r3, [pc, #372]	; (8002168 <imu9dof+0x8c0>)
 8001ff4:	edd3 7a00 	vldr	s15, [r3]
 8001ff8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002000:	d50a      	bpl.n	8002018 <imu9dof+0x770>
	{
		yaw_qs += 360;
 8002002:	4b59      	ldr	r3, [pc, #356]	; (8002168 <imu9dof+0x8c0>)
 8002004:	edd3 7a00 	vldr	s15, [r3]
 8002008:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800216c <imu9dof+0x8c4>
 800200c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002010:	4b55      	ldr	r3, [pc, #340]	; (8002168 <imu9dof+0x8c0>)
 8002012:	edc3 7a00 	vstr	s15, [r3]
 8002016:	e013      	b.n	8002040 <imu9dof+0x798>
	} else if (yaw_qs > 360)
 8002018:	4b53      	ldr	r3, [pc, #332]	; (8002168 <imu9dof+0x8c0>)
 800201a:	edd3 7a00 	vldr	s15, [r3]
 800201e:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800216c <imu9dof+0x8c4>
 8002022:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800202a:	dd09      	ble.n	8002040 <imu9dof+0x798>
	{
		yaw_qs -= 360;
 800202c:	4b4e      	ldr	r3, [pc, #312]	; (8002168 <imu9dof+0x8c0>)
 800202e:	edd3 7a00 	vldr	s15, [r3]
 8002032:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 800216c <imu9dof+0x8c4>
 8002036:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800203a:	4b4b      	ldr	r3, [pc, #300]	; (8002168 <imu9dof+0x8c0>)
 800203c:	edc3 7a00 	vstr	s15, [r3]
	}
	float y = yaw_qs - yaw;
 8002040:	4b49      	ldr	r3, [pc, #292]	; (8002168 <imu9dof+0x8c0>)
 8002042:	ed93 7a00 	vldr	s14, [r3]
 8002046:	4b4a      	ldr	r3, [pc, #296]	; (8002170 <imu9dof+0x8c8>)
 8002048:	edd3 7a00 	vldr	s15, [r3]
 800204c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002050:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	float S_yaw = P_yaw[0][0] + R_measure_yaw;
 8002054:	4b47      	ldr	r3, [pc, #284]	; (8002174 <imu9dof+0x8cc>)
 8002056:	edd3 7a00 	vldr	s15, [r3]
 800205a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800205e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002062:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	float K_yaw[2];
	K_yaw[0] = P_yaw[0][0] / S_yaw;
 8002066:	4b43      	ldr	r3, [pc, #268]	; (8002174 <imu9dof+0x8cc>)
 8002068:	edd3 6a00 	vldr	s13, [r3]
 800206c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002070:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002074:	edc7 7a06 	vstr	s15, [r7, #24]
  K_yaw[1] = P_yaw[1][0] / S_yaw;
 8002078:	4b3e      	ldr	r3, [pc, #248]	; (8002174 <imu9dof+0x8cc>)
 800207a:	edd3 6a02 	vldr	s13, [r3, #8]
 800207e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002082:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002086:	edc7 7a07 	vstr	s15, [r7, #28]

	yaw += K_yaw[0] * y;
 800208a:	ed97 7a06 	vldr	s14, [r7, #24]
 800208e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002092:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002096:	4b36      	ldr	r3, [pc, #216]	; (8002170 <imu9dof+0x8c8>)
 8002098:	edd3 7a00 	vldr	s15, [r3]
 800209c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020a0:	4b33      	ldr	r3, [pc, #204]	; (8002170 <imu9dof+0x8c8>)
 80020a2:	edc3 7a00 	vstr	s15, [r3]
  bias_yaw += K_yaw[1] * y;
 80020a6:	ed97 7a07 	vldr	s14, [r7, #28]
 80020aa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80020ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020b2:	4b31      	ldr	r3, [pc, #196]	; (8002178 <imu9dof+0x8d0>)
 80020b4:	edd3 7a00 	vldr	s15, [r3]
 80020b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020bc:	4b2e      	ldr	r3, [pc, #184]	; (8002178 <imu9dof+0x8d0>)
 80020be:	edc3 7a00 	vstr	s15, [r3]

	float P00_temp_yaw = P_yaw[0][0];
 80020c2:	4b2c      	ldr	r3, [pc, #176]	; (8002174 <imu9dof+0x8cc>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	637b      	str	r3, [r7, #52]	; 0x34
  float P01_temp_yaw = P_yaw[0][1];
 80020c8:	4b2a      	ldr	r3, [pc, #168]	; (8002174 <imu9dof+0x8cc>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	633b      	str	r3, [r7, #48]	; 0x30

  P_yaw[0][0] -= K_yaw[0] * P00_temp_yaw;
 80020ce:	4b29      	ldr	r3, [pc, #164]	; (8002174 <imu9dof+0x8cc>)
 80020d0:	ed93 7a00 	vldr	s14, [r3]
 80020d4:	edd7 6a06 	vldr	s13, [r7, #24]
 80020d8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80020dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020e4:	4b23      	ldr	r3, [pc, #140]	; (8002174 <imu9dof+0x8cc>)
 80020e6:	edc3 7a00 	vstr	s15, [r3]
  P_yaw[0][1] -= K_yaw[0] * P01_temp_yaw;
 80020ea:	4b22      	ldr	r3, [pc, #136]	; (8002174 <imu9dof+0x8cc>)
 80020ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80020f0:	edd7 6a06 	vldr	s13, [r7, #24]
 80020f4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80020f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002100:	4b1c      	ldr	r3, [pc, #112]	; (8002174 <imu9dof+0x8cc>)
 8002102:	edc3 7a01 	vstr	s15, [r3, #4]
  P_yaw[1][0] -= K_yaw[1] * P00_temp_yaw;
 8002106:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <imu9dof+0x8cc>)
 8002108:	ed93 7a02 	vldr	s14, [r3, #8]
 800210c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002110:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002114:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002118:	ee77 7a67 	vsub.f32	s15, s14, s15
 800211c:	4b15      	ldr	r3, [pc, #84]	; (8002174 <imu9dof+0x8cc>)
 800211e:	edc3 7a02 	vstr	s15, [r3, #8]
  P_yaw[1][1] -= K_yaw[1] * P01_temp_yaw;
 8002122:	4b14      	ldr	r3, [pc, #80]	; (8002174 <imu9dof+0x8cc>)
 8002124:	ed93 7a03 	vldr	s14, [r3, #12]
 8002128:	edd7 6a07 	vldr	s13, [r7, #28]
 800212c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002130:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002134:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002138:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <imu9dof+0x8cc>)
 800213a:	edc3 7a03 	vstr	s15, [r3, #12]

	out[0] = pitch;
 800213e:	4b0f      	ldr	r3, [pc, #60]	; (800217c <imu9dof+0x8d4>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	601a      	str	r2, [r3, #0]
	out[1] = roll;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3304      	adds	r3, #4
 800214a:	4a0d      	ldr	r2, [pc, #52]	; (8002180 <imu9dof+0x8d8>)
 800214c:	6812      	ldr	r2, [r2, #0]
 800214e:	601a      	str	r2, [r3, #0]
	out[2] = yaw;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3308      	adds	r3, #8
 8002154:	4a06      	ldr	r2, [pc, #24]	; (8002170 <imu9dof+0x8c8>)
 8002156:	6812      	ldr	r2, [r2, #0]
 8002158:	601a      	str	r2, [r3, #0]
}
 800215a:	bf00      	nop
 800215c:	3778      	adds	r7, #120	; 0x78
 800215e:	46bd      	mov	sp, r7
 8002160:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002164:	f3af 8000 	nop.w
 8002168:	20000228 	.word	0x20000228
 800216c:	43b40000 	.word	0x43b40000
 8002170:	20000164 	.word	0x20000164
 8002174:	20000150 	.word	0x20000150
 8002178:	20000160 	.word	0x20000160
 800217c:	20000134 	.word	0x20000134
 8002180:	2000014c 	.word	0x2000014c
 8002184:	20000000 	.word	0x20000000
 8002188:	400921ff 	.word	0x400921ff

0800218c <l3gd20_sendbyte>:
extern SPI_HandleTypeDef hspi1;


//Gui nhan byte qua spi1
uint8_t l3gd20_sendbyte(uint8_t Byte)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af02      	add	r7, sp, #8
 8002192:	4603      	mov	r3, r0
 8002194:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	73fb      	strb	r3, [r7, #15]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SPI_Timeout); 
 800219a:	f107 020f 	add.w	r2, r7, #15
 800219e:	1df9      	adds	r1, r7, #7
 80021a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	2301      	movs	r3, #1
 80021a8:	4803      	ldr	r0, [pc, #12]	; (80021b8 <l3gd20_sendbyte+0x2c>)
 80021aa:	f007 f82c 	bl	8009206 <HAL_SPI_TransmitReceive>
  return receivedbyte;
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	20000660 	.word	0x20000660

080021bc <l3gd20_write>:

//Gui byte cho l3gd20
void l3gd20_write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	70fb      	strb	r3, [r7, #3]
 80021c8:	4613      	mov	r3, r2
 80021ca:	803b      	strh	r3, [r7, #0]
  if(NumByteToWrite > 0x01)
 80021cc:	883b      	ldrh	r3, [r7, #0]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d903      	bls.n	80021da <l3gd20_write+0x1e>
  {
    WriteAddr |= (uint8_t)0x40;
 80021d2:	78fb      	ldrb	r3, [r7, #3]
 80021d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021d8:	70fb      	strb	r3, [r7, #3]
  }
  spi_enable;
 80021da:	2200      	movs	r2, #0
 80021dc:	2108      	movs	r1, #8
 80021de:	480f      	ldr	r0, [pc, #60]	; (800221c <l3gd20_write+0x60>)
 80021e0:	f004 fa3c 	bl	800665c <HAL_GPIO_WritePin>
  l3gd20_sendbyte(WriteAddr);
 80021e4:	78fb      	ldrb	r3, [r7, #3]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff ffd0 	bl	800218c <l3gd20_sendbyte>
  
  while(NumByteToWrite >= 0x01)
 80021ec:	e00a      	b.n	8002204 <l3gd20_write+0x48>
  {
    l3gd20_sendbyte(*pBuffer);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff ffca 	bl	800218c <l3gd20_sendbyte>
    NumByteToWrite--;
 80021f8:	883b      	ldrh	r3, [r7, #0]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3301      	adds	r3, #1
 8002202:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8002204:	883b      	ldrh	r3, [r7, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f1      	bne.n	80021ee <l3gd20_write+0x32>
  }  
  spi_disable;
 800220a:	2201      	movs	r2, #1
 800220c:	2108      	movs	r1, #8
 800220e:	4803      	ldr	r0, [pc, #12]	; (800221c <l3gd20_write+0x60>)
 8002210:	f004 fa24 	bl	800665c <HAL_GPIO_WritePin>

}
 8002214:	bf00      	nop
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	48001000 	.word	0x48001000

08002220 <l3gd20_read>:

//Doc byte tu l3gd20
void l3gd20_read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	70fb      	strb	r3, [r7, #3]
 800222c:	4613      	mov	r3, r2
 800222e:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8002230:	883b      	ldrh	r3, [r7, #0]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d904      	bls.n	8002240 <l3gd20_read+0x20>
  {
    ReadAddr |= (uint8_t)((uint8_t)0x80| (uint8_t)0x40);
 8002236:	78fb      	ldrb	r3, [r7, #3]
 8002238:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800223c:	70fb      	strb	r3, [r7, #3]
 800223e:	e003      	b.n	8002248 <l3gd20_read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)0x80;
 8002240:	78fb      	ldrb	r3, [r7, #3]
 8002242:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002246:	70fb      	strb	r3, [r7, #3]
  }
	
  spi_enable;
 8002248:	2200      	movs	r2, #0
 800224a:	2108      	movs	r1, #8
 800224c:	4810      	ldr	r0, [pc, #64]	; (8002290 <l3gd20_read+0x70>)
 800224e:	f004 fa05 	bl	800665c <HAL_GPIO_WritePin>
  l3gd20_sendbyte(ReadAddr);
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff ff99 	bl	800218c <l3gd20_sendbyte>
  
  while(NumByteToRead > 0x00)
 800225a:	e00c      	b.n	8002276 <l3gd20_read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = l3gd20_sendbyte((uint8_t)0x00);
 800225c:	2000      	movs	r0, #0
 800225e:	f7ff ff95 	bl	800218c <l3gd20_sendbyte>
 8002262:	4603      	mov	r3, r0
 8002264:	461a      	mov	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 800226a:	883b      	ldrh	r3, [r7, #0]
 800226c:	3b01      	subs	r3, #1
 800226e:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3301      	adds	r3, #1
 8002274:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8002276:	883b      	ldrh	r3, [r7, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1ef      	bne.n	800225c <l3gd20_read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  spi_disable;
 800227c:	2201      	movs	r2, #1
 800227e:	2108      	movs	r1, #8
 8002280:	4803      	ldr	r0, [pc, #12]	; (8002290 <l3gd20_read+0x70>)
 8002282:	f004 f9eb 	bl	800665c <HAL_GPIO_WritePin>
}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	48001000 	.word	0x48001000

08002294 <l3gd20_init>:

//Cau hinh co ban cho l3gd20
void l3gd20_init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
	uint8_t ctrl1, ctrl2, ctrl3, ctrl4, ctrl5;
	
	//Mode select
	ctrl1 = 0X3F; //95Hz, Cut-off 25, normal mode, enable xyz, 0b00111111
 800229a:	233f      	movs	r3, #63	; 0x3f
 800229c:	71fb      	strb	r3, [r7, #7]
	
	//High pass config
	ctrl2 = 0X00; // Normal mode res, Cut-off 0Hz
 800229e:	2300      	movs	r3, #0
 80022a0:	71bb      	strb	r3, [r7, #6]
	
	//Disable interrupt
	ctrl3 = 0X00;
 80022a2:	2300      	movs	r3, #0
 80022a4:	717b      	strb	r3, [r7, #5]
	
	//Data mode
	ctrl4 = 0X10; //Continuos update, LSB, 500dps, 4-wire spi
 80022a6:	2310      	movs	r3, #16
 80022a8:	713b      	strb	r3, [r7, #4]
	
	//Enable
	ctrl5 = 0X10;	
 80022aa:	2310      	movs	r3, #16
 80022ac:	70fb      	strb	r3, [r7, #3]
	l3gd20_write(&ctrl1, 0x20, 1); //Control register 1
 80022ae:	1dfb      	adds	r3, r7, #7
 80022b0:	2201      	movs	r2, #1
 80022b2:	2120      	movs	r1, #32
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ff81 	bl	80021bc <l3gd20_write>
	l3gd20_write(&ctrl2, 0x21, 1); //Control register 2
 80022ba:	1dbb      	adds	r3, r7, #6
 80022bc:	2201      	movs	r2, #1
 80022be:	2121      	movs	r1, #33	; 0x21
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff ff7b 	bl	80021bc <l3gd20_write>
	l3gd20_write(&ctrl3, 0x22, 1); //Control register 3
 80022c6:	1d7b      	adds	r3, r7, #5
 80022c8:	2201      	movs	r2, #1
 80022ca:	2122      	movs	r1, #34	; 0x22
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ff75 	bl	80021bc <l3gd20_write>
	l3gd20_write(&ctrl4, 0x23, 1); //Control register 4	
 80022d2:	1d3b      	adds	r3, r7, #4
 80022d4:	2201      	movs	r2, #1
 80022d6:	2123      	movs	r1, #35	; 0x23
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff ff6f 	bl	80021bc <l3gd20_write>
	l3gd20_write(&ctrl5, 0x24, 1); //Control register 5
 80022de:	1cfb      	adds	r3, r7, #3
 80022e0:	2201      	movs	r2, #1
 80022e2:	2124      	movs	r1, #36	; 0x24
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff ff69 	bl	80021bc <l3gd20_write>
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <l3gd20_reboot>:

//Khoi dong laij l3gd20
void l3gd20_reboot(void)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
  uint8_t tmpreg;  
  l3gd20_read(&tmpreg, 0x24, 1);
 80022f8:	1dfb      	adds	r3, r7, #7
 80022fa:	2201      	movs	r2, #1
 80022fc:	2124      	movs	r1, #36	; 0x24
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff ff8e 	bl	8002220 <l3gd20_read>
  tmpreg |= 0x80;
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800230a:	b2db      	uxtb	r3, r3
 800230c:	71fb      	strb	r3, [r7, #7]
  l3gd20_write(&tmpreg, 0x24, 1);
 800230e:	1dfb      	adds	r3, r7, #7
 8002310:	2201      	movs	r2, #1
 8002312:	2124      	movs	r1, #36	; 0x24
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff ff51 	bl	80021bc <l3gd20_write>
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <l3gd20_readxyz>:
  return tmpreg;
}

//Doc du lieu XYZ
void l3gd20_readxyz(float *pfData)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08a      	sub	sp, #40	; 0x28
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 800232c:	2300      	movs	r3, #0
 800232e:	61bb      	str	r3, [r7, #24]
 8002330:	2300      	movs	r3, #0
 8002332:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8002334:	f107 0310 	add.w	r3, r7, #16
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 800233e:	2300      	movs	r3, #0
 8002340:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8002342:	f04f 0300 	mov.w	r3, #0
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8002348:	2300      	movs	r3, #0
 800234a:	623b      	str	r3, [r7, #32]
  
  l3gd20_read(&tmpreg, 0x23, 1);  
 800234c:	f107 030f 	add.w	r3, r7, #15
 8002350:	2201      	movs	r2, #1
 8002352:	2123      	movs	r1, #35	; 0x23
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff ff63 	bl	8002220 <l3gd20_read>
  l3gd20_read(tmpbuffer, 0x28, 6);
 800235a:	f107 0318 	add.w	r3, r7, #24
 800235e:	2206      	movs	r2, #6
 8002360:	2128      	movs	r1, #40	; 0x28
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff ff5c 	bl	8002220 <l3gd20_read>
  
  if(!(tmpreg & 0x40))
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800236e:	2b00      	cmp	r3, #0
 8002370:	d126      	bne.n	80023c0 <l3gd20_readxyz+0x9c>
  {
    for(i=0; i<3; i++)
 8002372:	2300      	movs	r3, #0
 8002374:	623b      	str	r3, [r7, #32]
 8002376:	e01f      	b.n	80023b8 <l3gd20_readxyz+0x94>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8002378:	6a3b      	ldr	r3, [r7, #32]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	3301      	adds	r3, #1
 800237e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002382:	4413      	add	r3, r2
 8002384:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002388:	b29b      	uxth	r3, r3
 800238a:	021b      	lsls	r3, r3, #8
 800238c:	b29a      	uxth	r2, r3
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002396:	440b      	add	r3, r1
 8002398:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800239c:	b29b      	uxth	r3, r3
 800239e:	4413      	add	r3, r2
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	b21a      	sxth	r2, r3
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80023ac:	440b      	add	r3, r1
 80023ae:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	3301      	adds	r3, #1
 80023b6:	623b      	str	r3, [r7, #32]
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	dddc      	ble.n	8002378 <l3gd20_readxyz+0x54>
 80023be:	e025      	b.n	800240c <l3gd20_readxyz+0xe8>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 80023c0:	2300      	movs	r3, #0
 80023c2:	623b      	str	r3, [r7, #32]
 80023c4:	e01f      	b.n	8002406 <l3gd20_readxyz+0xe2>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023ce:	4413      	add	r3, r2
 80023d0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	021b      	lsls	r3, r3, #8
 80023d8:	b29a      	uxth	r2, r3
 80023da:	6a3b      	ldr	r3, [r7, #32]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	3301      	adds	r3, #1
 80023e0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80023e4:	440b      	add	r3, r1
 80023e6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	4413      	add	r3, r2
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	b21a      	sxth	r2, r3
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80023fa:	440b      	add	r3, r1
 80023fc:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8002400:	6a3b      	ldr	r3, [r7, #32]
 8002402:	3301      	adds	r3, #1
 8002404:	623b      	str	r3, [r7, #32]
 8002406:	6a3b      	ldr	r3, [r7, #32]
 8002408:	2b02      	cmp	r3, #2
 800240a:	dddc      	ble.n	80023c6 <l3gd20_readxyz+0xa2>
    }
  }
  
  switch(tmpreg & 0x30)
 800240c:	7bfb      	ldrb	r3, [r7, #15]
 800240e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002412:	2b20      	cmp	r3, #32
 8002414:	d00c      	beq.n	8002430 <l3gd20_readxyz+0x10c>
 8002416:	2b20      	cmp	r3, #32
 8002418:	dc0d      	bgt.n	8002436 <l3gd20_readxyz+0x112>
 800241a:	2b00      	cmp	r3, #0
 800241c:	d002      	beq.n	8002424 <l3gd20_readxyz+0x100>
 800241e:	2b10      	cmp	r3, #16
 8002420:	d003      	beq.n	800242a <l3gd20_readxyz+0x106>
 8002422:	e008      	b.n	8002436 <l3gd20_readxyz+0x112>
  {
  case 0x00:
    sensitivity =(float)114.285f ; //250dps
 8002424:	4b15      	ldr	r3, [pc, #84]	; (800247c <l3gd20_readxyz+0x158>)
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8002428:	e005      	b.n	8002436 <l3gd20_readxyz+0x112>
    
  case 0x10:
    sensitivity = (float)57.1429f ; //500dps
 800242a:	4b15      	ldr	r3, [pc, #84]	; (8002480 <l3gd20_readxyz+0x15c>)
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800242e:	e002      	b.n	8002436 <l3gd20_readxyz+0x112>
    
  case 0x20:
    sensitivity = (float)14.285f; //2000dps
 8002430:	4b14      	ldr	r3, [pc, #80]	; (8002484 <l3gd20_readxyz+0x160>)
 8002432:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8002434:	bf00      	nop
  }
	
  for(i=0; i<3; i++)
 8002436:	2300      	movs	r3, #0
 8002438:	623b      	str	r3, [r7, #32]
 800243a:	e017      	b.n	800246c <l3gd20_readxyz+0x148>
  {
    pfData[i]=(float)(RawData[i] / sensitivity);
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002444:	4413      	add	r3, r2
 8002446:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800244a:	ee07 3a90 	vmov	s15, r3
 800244e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002452:	6a3b      	ldr	r3, [r7, #32]
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800245e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002462:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8002466:	6a3b      	ldr	r3, [r7, #32]
 8002468:	3301      	adds	r3, #1
 800246a:	623b      	str	r3, [r7, #32]
 800246c:	6a3b      	ldr	r3, [r7, #32]
 800246e:	2b02      	cmp	r3, #2
 8002470:	dde4      	ble.n	800243c <l3gd20_readxyz+0x118>
  }
}
 8002472:	bf00      	nop
 8002474:	bf00      	nop
 8002476:	3728      	adds	r7, #40	; 0x28
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	42e491ec 	.word	0x42e491ec
 8002480:	42649254 	.word	0x42649254
 8002484:	41648f5c 	.word	0x41648f5c

08002488 <lsm_read>:
extern I2C_HandleTypeDef hi2c1;
extern void Error_Handler(void);

//Doc 1 byte tu thanh ghi lsm303dlhc
uint8_t lsm_read(uint16_t Addr, uint8_t Reg)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af04      	add	r7, sp, #16
 800248e:	4603      	mov	r3, r0
 8002490:	460a      	mov	r2, r1
 8002492:	80fb      	strh	r3, [r7, #6]
 8002494:	4613      	mov	r3, r2
 8002496:	717b      	strb	r3, [r7, #5]
	uint8_t value = 0;	
 8002498:	2300      	movs	r3, #0
 800249a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, 0x00000001U, &value, 1, 1);
 800249c:	797b      	ldrb	r3, [r7, #5]
 800249e:	b29a      	uxth	r2, r3
 80024a0:	88f9      	ldrh	r1, [r7, #6]
 80024a2:	2301      	movs	r3, #1
 80024a4:	9302      	str	r3, [sp, #8]
 80024a6:	2301      	movs	r3, #1
 80024a8:	9301      	str	r3, [sp, #4]
 80024aa:	f107 030f 	add.w	r3, r7, #15
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	2301      	movs	r3, #1
 80024b2:	4804      	ldr	r0, [pc, #16]	; (80024c4 <lsm_read+0x3c>)
 80024b4:	f004 fc78 	bl	8006da8 <HAL_I2C_Mem_Read>
	return value;
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000310 	.word	0x20000310

080024c8 <lsm_write>:

//Ghi 1 byte tu thanh ghi lsm303dlhc
void lsm_write(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af04      	add	r7, sp, #16
 80024ce:	4603      	mov	r3, r0
 80024d0:	80fb      	strh	r3, [r7, #6]
 80024d2:	460b      	mov	r3, r1
 80024d4:	717b      	strb	r3, [r7, #5]
 80024d6:	4613      	mov	r3, r2
 80024d8:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c1, Addr, (uint16_t)Reg, 0x00000001U, &Value, 1, 1);
 80024da:	797b      	ldrb	r3, [r7, #5]
 80024dc:	b29a      	uxth	r2, r3
 80024de:	88f9      	ldrh	r1, [r7, #6]
 80024e0:	2301      	movs	r3, #1
 80024e2:	9302      	str	r3, [sp, #8]
 80024e4:	2301      	movs	r3, #1
 80024e6:	9301      	str	r3, [sp, #4]
 80024e8:	1d3b      	adds	r3, r7, #4
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	2301      	movs	r3, #1
 80024ee:	4803      	ldr	r0, [pc, #12]	; (80024fc <lsm_write+0x34>)
 80024f0:	f004 fb46 	bl	8006b80 <HAL_I2C_Mem_Write>
}
 80024f4:	bf00      	nop
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	20000310 	.word	0x20000310

08002500 <lsm_init>:

//Cau hinh co ban cho lsm303dlhc
void lsm_init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
	uint8_t ctrl1a, ctrl2a, ctrl4a;
	uint8_t cra_m, crb_m, mr_m;
	
	ctrl1a = 0x47; //01000111
 8002506:	2347      	movs	r3, #71	; 0x47
 8002508:	71fb      	strb	r3, [r7, #7]
	ctrl2a = 0x90; //10010000
 800250a:	2390      	movs	r3, #144	; 0x90
 800250c:	71bb      	strb	r3, [r7, #6]
	ctrl4a = 0x08; //00001000
 800250e:	2308      	movs	r3, #8
 8002510:	717b      	strb	r3, [r7, #5]
	
	cra_m = 0x1C; //00011100
 8002512:	231c      	movs	r3, #28
 8002514:	713b      	strb	r3, [r7, #4]
	crb_m = 0xE0; //11100000
 8002516:	23e0      	movs	r3, #224	; 0xe0
 8002518:	70fb      	strb	r3, [r7, #3]
	mr_m = 0x00;
 800251a:	2300      	movs	r3, #0
 800251c:	70bb      	strb	r3, [r7, #2]
	
	lsm_write(ACC_ADDR, LSM303DLHC_CTRL_REG1_A, ctrl1a);
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	461a      	mov	r2, r3
 8002522:	2120      	movs	r1, #32
 8002524:	2032      	movs	r0, #50	; 0x32
 8002526:	f7ff ffcf 	bl	80024c8 <lsm_write>
	lsm_write(ACC_ADDR, LSM303DLHC_CTRL_REG2_A, ctrl2a);
 800252a:	79bb      	ldrb	r3, [r7, #6]
 800252c:	461a      	mov	r2, r3
 800252e:	2121      	movs	r1, #33	; 0x21
 8002530:	2032      	movs	r0, #50	; 0x32
 8002532:	f7ff ffc9 	bl	80024c8 <lsm_write>
	lsm_write(ACC_ADDR, LSM303DLHC_CTRL_REG4_A, ctrl4a);
 8002536:	797b      	ldrb	r3, [r7, #5]
 8002538:	461a      	mov	r2, r3
 800253a:	2123      	movs	r1, #35	; 0x23
 800253c:	2032      	movs	r0, #50	; 0x32
 800253e:	f7ff ffc3 	bl	80024c8 <lsm_write>
	lsm_write(MAG_ADDR, LSM303DLHC_CRA_REG_M, cra_m);
 8002542:	793b      	ldrb	r3, [r7, #4]
 8002544:	461a      	mov	r2, r3
 8002546:	2100      	movs	r1, #0
 8002548:	203c      	movs	r0, #60	; 0x3c
 800254a:	f7ff ffbd 	bl	80024c8 <lsm_write>
	lsm_write(MAG_ADDR, LSM303DLHC_CRB_REG_M, crb_m);
 800254e:	78fb      	ldrb	r3, [r7, #3]
 8002550:	461a      	mov	r2, r3
 8002552:	2101      	movs	r1, #1
 8002554:	203c      	movs	r0, #60	; 0x3c
 8002556:	f7ff ffb7 	bl	80024c8 <lsm_write>
	lsm_write(MAG_ADDR, LSM303DLHC_MR_REG_M, mr_m);
 800255a:	78bb      	ldrb	r3, [r7, #2]
 800255c:	461a      	mov	r2, r3
 800255e:	2102      	movs	r1, #2
 8002560:	203c      	movs	r0, #60	; 0x3c
 8002562:	f7ff ffb1 	bl	80024c8 <lsm_write>
	
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <lsm_reboot>:

//Khoi dong laj bo nho
void lsm_reboot(void)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
	uint8_t tmpreg;  
  tmpreg = lsm_read(ACC_ADDR, LSM303DLHC_CTRL_REG5_A);
 8002574:	2124      	movs	r1, #36	; 0x24
 8002576:	2032      	movs	r0, #50	; 0x32
 8002578:	f7ff ff86 	bl	8002488 <lsm_read>
 800257c:	4603      	mov	r3, r0
 800257e:	71fb      	strb	r3, [r7, #7]
  tmpreg |= 0x80;
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002586:	71fb      	strb	r3, [r7, #7]
  lsm_write(ACC_ADDR, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	461a      	mov	r2, r3
 800258c:	2124      	movs	r1, #36	; 0x24
 800258e:	2032      	movs	r0, #50	; 0x32
 8002590:	f7ff ff9a 	bl	80024c8 <lsm_write>
}
 8002594:	bf00      	nop
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <lsm_accxyz>:
  return tmpreg;
}

//Doc XYZ Acc
void lsm_accxyz(float *pfData)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 80025a4:	2300      	movs	r3, #0
 80025a6:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 80025a8:	2300      	movs	r3, #0
 80025aa:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = 1.0f;
 80025ac:	2301      	movs	r3, #1
 80025ae:	77bb      	strb	r3, [r7, #30]
  
  ctrlx[0] = lsm_read(ACC_ADDR, LSM303DLHC_CTRL_REG4_A);
 80025b0:	2123      	movs	r1, #35	; 0x23
 80025b2:	2032      	movs	r0, #50	; 0x32
 80025b4:	f7ff ff68 	bl	8002488 <lsm_read>
 80025b8:	4603      	mov	r3, r0
 80025ba:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = lsm_read(ACC_ADDR, LSM303DLHC_CTRL_REG5_A);
 80025bc:	2124      	movs	r1, #36	; 0x24
 80025be:	2032      	movs	r0, #50	; 0x32
 80025c0:	f7ff ff62 	bl	8002488 <lsm_read>
 80025c4:	4603      	mov	r3, r0
 80025c6:	757b      	strb	r3, [r7, #21]
  
  buffer[0] = lsm_read(ACC_ADDR, LSM303DLHC_OUT_X_L_A); 
 80025c8:	2128      	movs	r1, #40	; 0x28
 80025ca:	2032      	movs	r0, #50	; 0x32
 80025cc:	f7ff ff5c 	bl	8002488 <lsm_read>
 80025d0:	4603      	mov	r3, r0
 80025d2:	b25b      	sxtb	r3, r3
 80025d4:	733b      	strb	r3, [r7, #12]
  buffer[1] = lsm_read(ACC_ADDR, LSM303DLHC_OUT_X_H_A);
 80025d6:	2129      	movs	r1, #41	; 0x29
 80025d8:	2032      	movs	r0, #50	; 0x32
 80025da:	f7ff ff55 	bl	8002488 <lsm_read>
 80025de:	4603      	mov	r3, r0
 80025e0:	b25b      	sxtb	r3, r3
 80025e2:	737b      	strb	r3, [r7, #13]
  buffer[2] = lsm_read(ACC_ADDR, LSM303DLHC_OUT_Y_L_A);
 80025e4:	212a      	movs	r1, #42	; 0x2a
 80025e6:	2032      	movs	r0, #50	; 0x32
 80025e8:	f7ff ff4e 	bl	8002488 <lsm_read>
 80025ec:	4603      	mov	r3, r0
 80025ee:	b25b      	sxtb	r3, r3
 80025f0:	73bb      	strb	r3, [r7, #14]
  buffer[3] = lsm_read(ACC_ADDR, LSM303DLHC_OUT_Y_H_A);
 80025f2:	212b      	movs	r1, #43	; 0x2b
 80025f4:	2032      	movs	r0, #50	; 0x32
 80025f6:	f7ff ff47 	bl	8002488 <lsm_read>
 80025fa:	4603      	mov	r3, r0
 80025fc:	b25b      	sxtb	r3, r3
 80025fe:	73fb      	strb	r3, [r7, #15]
  buffer[4] = lsm_read(ACC_ADDR, LSM303DLHC_OUT_Z_L_A);
 8002600:	212c      	movs	r1, #44	; 0x2c
 8002602:	2032      	movs	r0, #50	; 0x32
 8002604:	f7ff ff40 	bl	8002488 <lsm_read>
 8002608:	4603      	mov	r3, r0
 800260a:	b25b      	sxtb	r3, r3
 800260c:	743b      	strb	r3, [r7, #16]
  buffer[5] = lsm_read(ACC_ADDR, LSM303DLHC_OUT_Z_H_A);
 800260e:	212d      	movs	r1, #45	; 0x2d
 8002610:	2032      	movs	r0, #50	; 0x32
 8002612:	f7ff ff39 	bl	8002488 <lsm_read>
 8002616:	4603      	mov	r3, r0
 8002618:	b25b      	sxtb	r3, r3
 800261a:	747b      	strb	r3, [r7, #17]
	
  if(!(ctrlx[0] & 0x40)) 
 800261c:	7d3b      	ldrb	r3, [r7, #20]
 800261e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002622:	2b00      	cmp	r3, #0
 8002624:	d126      	bne.n	8002674 <lsm_accxyz+0xd8>
  {
    for(i=0; i<3; i++)
 8002626:	2300      	movs	r3, #0
 8002628:	77fb      	strb	r3, [r7, #31]
 800262a:	e01f      	b.n	800266c <lsm_accxyz+0xd0>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800262c:	7ffb      	ldrb	r3, [r7, #31]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	3301      	adds	r3, #1
 8002632:	f107 0220 	add.w	r2, r7, #32
 8002636:	4413      	add	r3, r2
 8002638:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800263c:	b29b      	uxth	r3, r3
 800263e:	021b      	lsls	r3, r3, #8
 8002640:	b29a      	uxth	r2, r3
 8002642:	7ffb      	ldrb	r3, [r7, #31]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	f107 0120 	add.w	r1, r7, #32
 800264a:	440b      	add	r3, r1
 800264c:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8002650:	b29b      	uxth	r3, r3
 8002652:	4413      	add	r3, r2
 8002654:	b29a      	uxth	r2, r3
 8002656:	7ffb      	ldrb	r3, [r7, #31]
 8002658:	b212      	sxth	r2, r2
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	f107 0120 	add.w	r1, r7, #32
 8002660:	440b      	add	r3, r1
 8002662:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8002666:	7ffb      	ldrb	r3, [r7, #31]
 8002668:	3301      	adds	r3, #1
 800266a:	77fb      	strb	r3, [r7, #31]
 800266c:	7ffb      	ldrb	r3, [r7, #31]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d9dc      	bls.n	800262c <lsm_accxyz+0x90>
 8002672:	e025      	b.n	80026c0 <lsm_accxyz+0x124>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8002674:	2300      	movs	r3, #0
 8002676:	77fb      	strb	r3, [r7, #31]
 8002678:	e01f      	b.n	80026ba <lsm_accxyz+0x11e>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 800267a:	7ffb      	ldrb	r3, [r7, #31]
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	f107 0220 	add.w	r2, r7, #32
 8002682:	4413      	add	r3, r2
 8002684:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8002688:	b29b      	uxth	r3, r3
 800268a:	021b      	lsls	r3, r3, #8
 800268c:	b29a      	uxth	r2, r3
 800268e:	7ffb      	ldrb	r3, [r7, #31]
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	3301      	adds	r3, #1
 8002694:	f107 0120 	add.w	r1, r7, #32
 8002698:	440b      	add	r3, r1
 800269a:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	4413      	add	r3, r2
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	7ffb      	ldrb	r3, [r7, #31]
 80026a6:	b212      	sxth	r2, r2
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	f107 0120 	add.w	r1, r7, #32
 80026ae:	440b      	add	r3, r1
 80026b0:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 80026b4:	7ffb      	ldrb	r3, [r7, #31]
 80026b6:	3301      	adds	r3, #1
 80026b8:	77fb      	strb	r3, [r7, #31]
 80026ba:	7ffb      	ldrb	r3, [r7, #31]
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d9dc      	bls.n	800267a <lsm_accxyz+0xde>
    }
  }
	
  switch(ctrlx[0] & 0x30)
 80026c0:	7d3b      	ldrb	r3, [r7, #20]
 80026c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80026c6:	2b30      	cmp	r3, #48	; 0x30
 80026c8:	d013      	beq.n	80026f2 <lsm_accxyz+0x156>
 80026ca:	2b30      	cmp	r3, #48	; 0x30
 80026cc:	dc14      	bgt.n	80026f8 <lsm_accxyz+0x15c>
 80026ce:	2b20      	cmp	r3, #32
 80026d0:	d00c      	beq.n	80026ec <lsm_accxyz+0x150>
 80026d2:	2b20      	cmp	r3, #32
 80026d4:	dc10      	bgt.n	80026f8 <lsm_accxyz+0x15c>
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <lsm_accxyz+0x144>
 80026da:	2b10      	cmp	r3, #16
 80026dc:	d003      	beq.n	80026e6 <lsm_accxyz+0x14a>
 80026de:	e00b      	b.n	80026f8 <lsm_accxyz+0x15c>
  {
  case 0x00:
    sensitivity = (float) 1.0f;
 80026e0:	2301      	movs	r3, #1
 80026e2:	77bb      	strb	r3, [r7, #30]
    break;
 80026e4:	e008      	b.n	80026f8 <lsm_accxyz+0x15c>
  case 0x10:
    sensitivity = (float) 2.0f;
 80026e6:	2302      	movs	r3, #2
 80026e8:	77bb      	strb	r3, [r7, #30]
    break;
 80026ea:	e005      	b.n	80026f8 <lsm_accxyz+0x15c>
  case 0x20:
    sensitivity = (float) 4.0f;
 80026ec:	2304      	movs	r3, #4
 80026ee:	77bb      	strb	r3, [r7, #30]
    break;
 80026f0:	e002      	b.n	80026f8 <lsm_accxyz+0x15c>
  case 0x30:
    sensitivity = (float) 12.0f;
 80026f2:	230c      	movs	r3, #12
 80026f4:	77bb      	strb	r3, [r7, #30]
    break;
 80026f6:	bf00      	nop
  }
  
  for(i=0; i<3; i++)
 80026f8:	2300      	movs	r3, #0
 80026fa:	77fb      	strb	r3, [r7, #31]
 80026fc:	e01e      	b.n	800273c <lsm_accxyz+0x1a0>
  {
    pfData[i]=(float) pnRawData[i]*sensitivity/1740;
 80026fe:	7ffb      	ldrb	r3, [r7, #31]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	f107 0220 	add.w	r2, r7, #32
 8002706:	4413      	add	r3, r2
 8002708:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 800270c:	ee07 3a90 	vmov	s15, r3
 8002710:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002714:	7fbb      	ldrb	r3, [r7, #30]
 8002716:	ee07 3a90 	vmov	s15, r3
 800271a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800271e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002722:	7ffb      	ldrb	r3, [r7, #31]
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	4413      	add	r3, r2
 800272a:	eddf 6a08 	vldr	s13, [pc, #32]	; 800274c <lsm_accxyz+0x1b0>
 800272e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002732:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8002736:	7ffb      	ldrb	r3, [r7, #31]
 8002738:	3301      	adds	r3, #1
 800273a:	77fb      	strb	r3, [r7, #31]
 800273c:	7ffb      	ldrb	r3, [r7, #31]
 800273e:	2b02      	cmp	r3, #2
 8002740:	d9dd      	bls.n	80026fe <lsm_accxyz+0x162>
  }
}
 8002742:	bf00      	nop
 8002744:	bf00      	nop
 8002746:	3720      	adds	r7, #32
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	44d98000 	.word	0x44d98000

08002750 <lsm_magxyz>:
//Doc xyz Mag
void lsm_magxyz(float* pfData)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  static uint8_t buffer[6] = {0};
  uint8_t CTRLB = 0;
 8002758:	2300      	movs	r3, #0
 800275a:	72bb      	strb	r3, [r7, #10]
  uint16_t Magn_Sensitivity_XY = 0, Magn_Sensitivity_Z = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	81fb      	strh	r3, [r7, #14]
 8002760:	2300      	movs	r3, #0
 8002762:	81bb      	strh	r3, [r7, #12]
  uint8_t i =0;
 8002764:	2300      	movs	r3, #0
 8002766:	72fb      	strb	r3, [r7, #11]
  CTRLB = lsm_read(MAG_ADDR, LSM303DLHC_CRB_REG_M);
 8002768:	2101      	movs	r1, #1
 800276a:	203c      	movs	r0, #60	; 0x3c
 800276c:	f7ff fe8c 	bl	8002488 <lsm_read>
 8002770:	4603      	mov	r3, r0
 8002772:	72bb      	strb	r3, [r7, #10]
  
  buffer[0] = lsm_read(MAG_ADDR, LSM303DLHC_OUT_X_H_M);
 8002774:	2103      	movs	r1, #3
 8002776:	203c      	movs	r0, #60	; 0x3c
 8002778:	f7ff fe86 	bl	8002488 <lsm_read>
 800277c:	4603      	mov	r3, r0
 800277e:	461a      	mov	r2, r3
 8002780:	4b63      	ldr	r3, [pc, #396]	; (8002910 <lsm_magxyz+0x1c0>)
 8002782:	701a      	strb	r2, [r3, #0]
  buffer[1] = lsm_read(MAG_ADDR, LSM303DLHC_OUT_X_L_M);
 8002784:	2104      	movs	r1, #4
 8002786:	203c      	movs	r0, #60	; 0x3c
 8002788:	f7ff fe7e 	bl	8002488 <lsm_read>
 800278c:	4603      	mov	r3, r0
 800278e:	461a      	mov	r2, r3
 8002790:	4b5f      	ldr	r3, [pc, #380]	; (8002910 <lsm_magxyz+0x1c0>)
 8002792:	705a      	strb	r2, [r3, #1]
  buffer[2] = lsm_read(MAG_ADDR, LSM303DLHC_OUT_Y_H_M);
 8002794:	2107      	movs	r1, #7
 8002796:	203c      	movs	r0, #60	; 0x3c
 8002798:	f7ff fe76 	bl	8002488 <lsm_read>
 800279c:	4603      	mov	r3, r0
 800279e:	461a      	mov	r2, r3
 80027a0:	4b5b      	ldr	r3, [pc, #364]	; (8002910 <lsm_magxyz+0x1c0>)
 80027a2:	709a      	strb	r2, [r3, #2]
  buffer[3] = lsm_read(MAG_ADDR, LSM303DLHC_OUT_Y_L_M);
 80027a4:	2108      	movs	r1, #8
 80027a6:	203c      	movs	r0, #60	; 0x3c
 80027a8:	f7ff fe6e 	bl	8002488 <lsm_read>
 80027ac:	4603      	mov	r3, r0
 80027ae:	461a      	mov	r2, r3
 80027b0:	4b57      	ldr	r3, [pc, #348]	; (8002910 <lsm_magxyz+0x1c0>)
 80027b2:	70da      	strb	r2, [r3, #3]
  buffer[4] = lsm_read(MAG_ADDR, LSM303DLHC_OUT_Z_H_M);
 80027b4:	2105      	movs	r1, #5
 80027b6:	203c      	movs	r0, #60	; 0x3c
 80027b8:	f7ff fe66 	bl	8002488 <lsm_read>
 80027bc:	4603      	mov	r3, r0
 80027be:	461a      	mov	r2, r3
 80027c0:	4b53      	ldr	r3, [pc, #332]	; (8002910 <lsm_magxyz+0x1c0>)
 80027c2:	711a      	strb	r2, [r3, #4]
  buffer[5] = lsm_read(MAG_ADDR, LSM303DLHC_OUT_Z_L_M);
 80027c4:	2106      	movs	r1, #6
 80027c6:	203c      	movs	r0, #60	; 0x3c
 80027c8:	f7ff fe5e 	bl	8002488 <lsm_read>
 80027cc:	4603      	mov	r3, r0
 80027ce:	461a      	mov	r2, r3
 80027d0:	4b4f      	ldr	r3, [pc, #316]	; (8002910 <lsm_magxyz+0x1c0>)
 80027d2:	715a      	strb	r2, [r3, #5]
	

  switch(CTRLB & 0xE0)
 80027d4:	7abb      	ldrb	r3, [r7, #10]
 80027d6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80027da:	2be0      	cmp	r3, #224	; 0xe0
 80027dc:	d040      	beq.n	8002860 <lsm_magxyz+0x110>
 80027de:	2be0      	cmp	r3, #224	; 0xe0
 80027e0:	dc43      	bgt.n	800286a <lsm_magxyz+0x11a>
 80027e2:	2bc0      	cmp	r3, #192	; 0xc0
 80027e4:	d035      	beq.n	8002852 <lsm_magxyz+0x102>
 80027e6:	2bc0      	cmp	r3, #192	; 0xc0
 80027e8:	dc3f      	bgt.n	800286a <lsm_magxyz+0x11a>
 80027ea:	2ba0      	cmp	r3, #160	; 0xa0
 80027ec:	d02a      	beq.n	8002844 <lsm_magxyz+0xf4>
 80027ee:	2ba0      	cmp	r3, #160	; 0xa0
 80027f0:	dc3b      	bgt.n	800286a <lsm_magxyz+0x11a>
 80027f2:	2b80      	cmp	r3, #128	; 0x80
 80027f4:	d01f      	beq.n	8002836 <lsm_magxyz+0xe6>
 80027f6:	2b80      	cmp	r3, #128	; 0x80
 80027f8:	dc37      	bgt.n	800286a <lsm_magxyz+0x11a>
 80027fa:	2b60      	cmp	r3, #96	; 0x60
 80027fc:	d014      	beq.n	8002828 <lsm_magxyz+0xd8>
 80027fe:	2b60      	cmp	r3, #96	; 0x60
 8002800:	dc33      	bgt.n	800286a <lsm_magxyz+0x11a>
 8002802:	2b20      	cmp	r3, #32
 8002804:	d002      	beq.n	800280c <lsm_magxyz+0xbc>
 8002806:	2b40      	cmp	r3, #64	; 0x40
 8002808:	d007      	beq.n	800281a <lsm_magxyz+0xca>
 800280a:	e02e      	b.n	800286a <lsm_magxyz+0x11a>
  {
  case 0x20:
    Magn_Sensitivity_XY = 1100;
 800280c:	f240 434c 	movw	r3, #1100	; 0x44c
 8002810:	81fb      	strh	r3, [r7, #14]
    Magn_Sensitivity_Z = 980;
 8002812:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 8002816:	81bb      	strh	r3, [r7, #12]
    break;
 8002818:	e027      	b.n	800286a <lsm_magxyz+0x11a>
  case 0x40:
    Magn_Sensitivity_XY = 855;
 800281a:	f240 3357 	movw	r3, #855	; 0x357
 800281e:	81fb      	strh	r3, [r7, #14]
    Magn_Sensitivity_Z = 760;
 8002820:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8002824:	81bb      	strh	r3, [r7, #12]
    break;
 8002826:	e020      	b.n	800286a <lsm_magxyz+0x11a>
  case 0x60:
    Magn_Sensitivity_XY = 670;
 8002828:	f240 239e 	movw	r3, #670	; 0x29e
 800282c:	81fb      	strh	r3, [r7, #14]
    Magn_Sensitivity_Z = 600;
 800282e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002832:	81bb      	strh	r3, [r7, #12]
    break;
 8002834:	e019      	b.n	800286a <lsm_magxyz+0x11a>
  case 0x80:
    Magn_Sensitivity_XY = 450;
 8002836:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 800283a:	81fb      	strh	r3, [r7, #14]
    Magn_Sensitivity_Z = 400;
 800283c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002840:	81bb      	strh	r3, [r7, #12]
    break;
 8002842:	e012      	b.n	800286a <lsm_magxyz+0x11a>
  case 0xA0:
    Magn_Sensitivity_XY = 400;
 8002844:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002848:	81fb      	strh	r3, [r7, #14]
    Magn_Sensitivity_Z = 355;
 800284a:	f240 1363 	movw	r3, #355	; 0x163
 800284e:	81bb      	strh	r3, [r7, #12]
    break;
 8002850:	e00b      	b.n	800286a <lsm_magxyz+0x11a>
  case 0xC0:
    Magn_Sensitivity_XY = 330;
 8002852:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8002856:	81fb      	strh	r3, [r7, #14]
    Magn_Sensitivity_Z = 295;
 8002858:	f240 1327 	movw	r3, #295	; 0x127
 800285c:	81bb      	strh	r3, [r7, #12]
    break;
 800285e:	e004      	b.n	800286a <lsm_magxyz+0x11a>
  case 0xE0:
    Magn_Sensitivity_XY = 230;
 8002860:	23e6      	movs	r3, #230	; 0xe6
 8002862:	81fb      	strh	r3, [r7, #14]
    Magn_Sensitivity_Z = 205;
 8002864:	23cd      	movs	r3, #205	; 0xcd
 8002866:	81bb      	strh	r3, [r7, #12]
    break;
 8002868:	bf00      	nop
  }
  
  for(i=0; i<2; i++)
 800286a:	2300      	movs	r3, #0
 800286c:	72fb      	strb	r3, [r7, #11]
 800286e:	e028      	b.n	80028c2 <lsm_magxyz+0x172>
  {
    pfData[i]=(float)((int16_t)(((uint16_t)buffer[2*i] << 8) + buffer[2*i+1])*1000)/Magn_Sensitivity_XY;
 8002870:	7afb      	ldrb	r3, [r7, #11]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	4a26      	ldr	r2, [pc, #152]	; (8002910 <lsm_magxyz+0x1c0>)
 8002876:	5cd3      	ldrb	r3, [r2, r3]
 8002878:	b29b      	uxth	r3, r3
 800287a:	021b      	lsls	r3, r3, #8
 800287c:	b29a      	uxth	r2, r3
 800287e:	7afb      	ldrb	r3, [r7, #11]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	3301      	adds	r3, #1
 8002884:	4922      	ldr	r1, [pc, #136]	; (8002910 <lsm_magxyz+0x1c0>)
 8002886:	5ccb      	ldrb	r3, [r1, r3]
 8002888:	b29b      	uxth	r3, r3
 800288a:	4413      	add	r3, r2
 800288c:	b29b      	uxth	r3, r3
 800288e:	b21b      	sxth	r3, r3
 8002890:	461a      	mov	r2, r3
 8002892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002896:	fb03 f302 	mul.w	r3, r3, r2
 800289a:	ee07 3a90 	vmov	s15, r3
 800289e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80028a2:	89fb      	ldrh	r3, [r7, #14]
 80028a4:	ee07 3a90 	vmov	s15, r3
 80028a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028ac:	7afb      	ldrb	r3, [r7, #11]
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	4413      	add	r3, r2
 80028b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028b8:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<2; i++)
 80028bc:	7afb      	ldrb	r3, [r7, #11]
 80028be:	3301      	adds	r3, #1
 80028c0:	72fb      	strb	r3, [r7, #11]
 80028c2:	7afb      	ldrb	r3, [r7, #11]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d9d3      	bls.n	8002870 <lsm_magxyz+0x120>
  }
  pfData[2]=(float)((int16_t)(((uint16_t)buffer[4] << 8) + buffer[5])*1000)/Magn_Sensitivity_Z;
 80028c8:	4b11      	ldr	r3, [pc, #68]	; (8002910 <lsm_magxyz+0x1c0>)
 80028ca:	791b      	ldrb	r3, [r3, #4]
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	021b      	lsls	r3, r3, #8
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <lsm_magxyz+0x1c0>)
 80028d4:	795b      	ldrb	r3, [r3, #5]
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	4413      	add	r3, r2
 80028da:	b29b      	uxth	r3, r3
 80028dc:	b21b      	sxth	r3, r3
 80028de:	461a      	mov	r2, r3
 80028e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028e4:	fb03 f302 	mul.w	r3, r3, r2
 80028e8:	ee07 3a90 	vmov	s15, r3
 80028ec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80028f0:	89bb      	ldrh	r3, [r7, #12]
 80028f2:	ee07 3a90 	vmov	s15, r3
 80028f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3308      	adds	r3, #8
 80028fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002902:	edc3 7a00 	vstr	s15, [r3]
}
 8002906:	bf00      	nop
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20000168 	.word	0x20000168
 8002914:	00000000 	.word	0x00000000

08002918 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002918:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800291c:	b088      	sub	sp, #32
 800291e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002920:	f002 fb52 	bl	8004fc8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002924:	f000 fd8a 	bl	800343c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002928:	f001 f9f6 	bl	8003d18 <MX_GPIO_Init>
	MX_I2C1_Init();
 800292c:	f000 fe66 	bl	80035fc <MX_I2C1_Init>
	MX_SPI1_Init();
 8002930:	f000 fee4 	bl	80036fc <MX_SPI1_Init>
	MX_I2C2_Init();
 8002934:	f000 fea2 	bl	800367c <MX_I2C2_Init>
	MX_USART1_UART_Init();
 8002938:	f001 f926 	bl	8003b88 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800293c:	f001 f954 	bl	8003be8 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8002940:	f000 ff58 	bl	80037f4 <MX_TIM2_Init>
	MX_TIM3_Init();
 8002944:	f000 ffd4 	bl	80038f0 <MX_TIM3_Init>
	MX_TIM8_Init();
 8002948:	f001 f850 	bl	80039ec <MX_TIM8_Init>
	MX_USART3_UART_Init();
 800294c:	f001 f97c 	bl	8003c48 <MX_USART3_UART_Init>
	MX_SPI3_Init();
 8002950:	f000 ff12 	bl	8003778 <MX_SPI3_Init>
	MX_USB_PCD_Init();
 8002954:	f001 f9be 	bl	8003cd4 <MX_USB_PCD_Init>
	MX_UART5_Init();
 8002958:	f001 f8e6 	bl	8003b28 <MX_UART5_Init>
	MX_ADC3_Init();
 800295c:	f000 fdde 	bl	800351c <MX_ADC3_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(LD9_GPIO_Port, LD9_Pin, GPIO_PIN_SET); //индикация о начале работы программы
 8002960:	2201      	movs	r2, #1
 8002962:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002966:	4836      	ldr	r0, [pc, #216]	; (8002a40 <main+0x128>)
 8002968:	f003 fe78 	bl	800665c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_SET); //включаем силовое питание
 800296c:	2201      	movs	r2, #1
 800296e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002972:	4834      	ldr	r0, [pc, #208]	; (8002a44 <main+0x12c>)
 8002974:	f003 fe72 	bl	800665c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_SPI3_GPIO_Port, CS_SPI3_Pin, GPIO_PIN_SET); //выключаем spi на max7456
 8002978:	2201      	movs	r2, #1
 800297a:	2101      	movs	r1, #1
 800297c:	4832      	ldr	r0, [pc, #200]	; (8002a48 <main+0x130>)
 800297e:	f003 fe6d 	bl	800665c <HAL_GPIO_WritePin>

	HAL_ADCEx_Calibration_Start(&hadc3,ADC_SINGLE_ENDED); //калибруем ацп на измерение напрежения с аккумов
 8002982:	2100      	movs	r1, #0
 8002984:	4831      	ldr	r0, [pc, #196]	; (8002a4c <main+0x134>)
 8002986:	f002 fed6 	bl	8005736 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_IT(&hadc3); //начинаем измерять напряжение
 800298a:	4830      	ldr	r0, [pc, #192]	; (8002a4c <main+0x134>)
 800298c:	f002 fd86 	bl	800549c <HAL_ADC_Start_IT>

	HAL_GPIO_WritePin(ROT_ENABLE_GPIO_Port, ROT_ENABLE_Pin, GPIO_PIN_SET);
 8002990:	2201      	movs	r2, #1
 8002992:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002996:	482c      	ldr	r0, [pc, #176]	; (8002a48 <main+0x130>)
 8002998:	f003 fe60 	bl	800665c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRAB_ENABLE_GPIO_Port, GRAB_ENABLE_Pin, GPIO_PIN_SET);
 800299c:	2201      	movs	r2, #1
 800299e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029a2:	4829      	ldr	r0, [pc, #164]	; (8002a48 <main+0x130>)
 80029a4:	f003 fe5a 	bl	800665c <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1); //стартуем ШИМ на серву на тилте
 80029a8:	2100      	movs	r1, #0
 80029aa:	4829      	ldr	r0, [pc, #164]	; (8002a50 <main+0x138>)
 80029ac:	f006 fffa 	bl	80099a4 <HAL_TIM_PWM_Start_IT>

	Thruster_Init();//�?ницилизируем ВМА
 80029b0:	f7fe fe84 	bl	80016bc <Thruster_Init>

	resetMax7456();//ресетим МАКС
 80029b4:	f001 fc3c 	bl	8004230 <resetMax7456>
	initMax7456();//иницилизируем макс
 80029b8:	f001 fbf0 	bl	800419c <initMax7456>
	//downloadMax7456Font();

	init_depth_status = pressure_init();//иницилизируем датчик датчик глубины
 80029bc:	f7fe fb5e 	bl	800107c <pressure_init>
 80029c0:	4603      	mov	r3, r0
 80029c2:	461a      	mov	r2, r3
 80029c4:	4b23      	ldr	r3, [pc, #140]	; (8002a54 <main+0x13c>)
 80029c6:	601a      	str	r2, [r3, #0]

	l3gd20_init();//иницилизируем гироскоп
 80029c8:	f7ff fc64 	bl	8002294 <l3gd20_init>
	l3gd20_reboot();
 80029cc:	f7ff fc91 	bl	80022f2 <l3gd20_reboot>


	lsm_init(); //иницилизируем магнитометр и аксилирометр
 80029d0:	f7ff fd96 	bl	8002500 <lsm_init>
	lsm_reboot();
 80029d4:	f7ff fdcb 	bl	800256e <lsm_reboot>

	magX_bias = 0;//хз что-ето
 80029d8:	4b1f      	ldr	r3, [pc, #124]	; (8002a58 <main+0x140>)
 80029da:	f04f 0200 	mov.w	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
	magY_bias = 0;//хз что-ето
 80029e0:	4b1e      	ldr	r3, [pc, #120]	; (8002a5c <main+0x144>)
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	//читаем �?МУ
	l3gd20_readxyz(GyroBuffer);
 80029e8:	481d      	ldr	r0, [pc, #116]	; (8002a60 <main+0x148>)
 80029ea:	f7ff fc9b 	bl	8002324 <l3gd20_readxyz>
	lsm_accxyz(AccBuffer);
 80029ee:	481d      	ldr	r0, [pc, #116]	; (8002a64 <main+0x14c>)
 80029f0:	f7ff fdd4 	bl	800259c <lsm_accxyz>
	lsm_magxyz(MagBuffer);
 80029f4:	481c      	ldr	r0, [pc, #112]	; (8002a68 <main+0x150>)
 80029f6:	f7ff feab 	bl	8002750 <lsm_magxyz>
	//фильтруем �?МУ

	//выводи время с начала работы программы
	displayMotorArmedTime(HAL_GetTick()/1000);
 80029fa:	f002 fb3f 	bl	800507c <HAL_GetTick>
 80029fe:	4603      	mov	r3, r0
 8002a00:	4a1a      	ldr	r2, [pc, #104]	; (8002a6c <main+0x154>)
 8002a02:	fba2 2303 	umull	r2, r3, r2, r3
 8002a06:	099b      	lsrs	r3, r3, #6
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f001 fd7f 	bl	800450c <displayMotorArmedTime>
	//измеряем глубину и выводим ее
	if (init_depth_status){
 8002a0e:	4b11      	ldr	r3, [pc, #68]	; (8002a54 <main+0x13c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d030      	beq.n	8002a78 <main+0x160>
		init_pressure = reset_pressure();
 8002a16:	f7fe fc0d 	bl	8001234 <reset_pressure>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	4a14      	ldr	r2, [pc, #80]	; (8002a70 <main+0x158>)
 8002a1e:	6013      	str	r3, [r2, #0]
		real_depth = check_pressure()-init_pressure;
 8002a20:	f7fe fb90 	bl	8001144 <check_pressure>
 8002a24:	4603      	mov	r3, r0
 8002a26:	461a      	mov	r2, r3
 8002a28:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <main+0x158>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	461a      	mov	r2, r3
 8002a30:	4b10      	ldr	r3, [pc, #64]	; (8002a74 <main+0x15c>)
 8002a32:	601a      	str	r2, [r3, #0]
		displayDepth(real_depth);
 8002a34:	4b0f      	ldr	r3, [pc, #60]	; (8002a74 <main+0x15c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f001 fce3 	bl	8004404 <displayDepth>
 8002a3e:	e01d      	b.n	8002a7c <main+0x164>
 8002a40:	48001000 	.word	0x48001000
 8002a44:	48000800 	.word	0x48000800
 8002a48:	48000c00 	.word	0x48000c00
 8002a4c:	20000518 	.word	0x20000518
 8002a50:	20000240 	.word	0x20000240
 8002a54:	200003ac 	.word	0x200003ac
 8002a58:	20000a9c 	.word	0x20000a9c
 8002a5c:	20000610 	.word	0x20000610
 8002a60:	200003b0 	.word	0x200003b0
 8002a64:	2000047c 	.word	0x2000047c
 8002a68:	20000488 	.word	0x20000488
 8002a6c:	10624dd3 	.word	0x10624dd3
 8002a70:	200001d8 	.word	0x200001d8
 8002a74:	200001d4 	.word	0x200001d4
	}
	else
		displayNoConnection();
 8002a78:	f001 fe0e 	bl	8004698 <displayNoConnection>
	//измеряем напряжение на аккумах
	adc = HAL_ADC_GetValue(&hadc3);
 8002a7c:	48a4      	ldr	r0, [pc, #656]	; (8002d10 <main+0x3f8>)
 8002a7e:	f002 fe4d 	bl	800571c <HAL_ADC_GetValue>
 8002a82:	4603      	mov	r3, r0
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	4ba3      	ldr	r3, [pc, #652]	; (8002d14 <main+0x3fc>)
 8002a88:	801a      	strh	r2, [r3, #0]
	//выводим курс на монитор
	displayHeading((uint8_t)Buffer[2], 1);
 8002a8a:	4ba3      	ldr	r3, [pc, #652]	; (8002d18 <main+0x400>)
 8002a8c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a94:	edc7 7a01 	vstr	s15, [r7, #4]
 8002a98:	793b      	ldrb	r3, [r7, #4]
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f001 fc10 	bl	80042c4 <displayHeading>



	while (1)
	{
		HAL_GPIO_WritePin(LD8_GPIO_Port, LD8_Pin, GPIO_PIN_RESET);
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002aaa:	489c      	ldr	r0, [pc, #624]	; (8002d1c <main+0x404>)
 8002aac:	f003 fdd6 	bl	800665c <HAL_GPIO_WritePin>
		HAL_UART_Receive(&huart3, (uint8_t*)buf_, 22, 10); //принимаем сообщение
 8002ab0:	230a      	movs	r3, #10
 8002ab2:	2216      	movs	r2, #22
 8002ab4:	499a      	ldr	r1, [pc, #616]	; (8002d20 <main+0x408>)
 8002ab6:	489b      	ldr	r0, [pc, #620]	; (8002d24 <main+0x40c>)
 8002ab8:	f007 feac 	bl	800a814 <HAL_UART_Receive>
//		while(buf_[0]!=0xf || buf_[19]!=0x0){ //проверяем соответсвует ли посылка
//			HAL_UART_Receive(&huart3, (uint8_t*)buf_, 22, 10);//принимаем сообщение еще раз
//			HAL_GPIO_WritePin(LD8_GPIO_Port, LD8_Pin, GPIO_PIN_RESET);//индикация о не прием
//		}

		if(buf_[0]==0xf && buf_[19]==0x0)
 8002abc:	4b98      	ldr	r3, [pc, #608]	; (8002d20 <main+0x408>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b0f      	cmp	r3, #15
 8002ac2:	f040 83d0 	bne.w	8003266 <main+0x94e>
 8002ac6:	4b96      	ldr	r3, [pc, #600]	; (8002d20 <main+0x408>)
 8002ac8:	7cdb      	ldrb	r3, [r3, #19]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f040 83cb 	bne.w	8003266 <main+0x94e>
		{
			HAL_GPIO_WritePin(LD8_GPIO_Port, LD8_Pin, GPIO_PIN_SET); //индикация о прием
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ad6:	4891      	ldr	r0, [pc, #580]	; (8002d1c <main+0x404>)
 8002ad8:	f003 fdc0 	bl	800665c <HAL_GPIO_WritePin>

			//парсим посылку в каналы
			ch_[0]  = ((int16_t)buf_[ 1] >> 0 | ((int16_t)buf_[ 2] << 8 )) & 0x07FF;
 8002adc:	4b90      	ldr	r3, [pc, #576]	; (8002d20 <main+0x408>)
 8002ade:	785b      	ldrb	r3, [r3, #1]
 8002ae0:	b21a      	sxth	r2, r3
 8002ae2:	4b8f      	ldr	r3, [pc, #572]	; (8002d20 <main+0x408>)
 8002ae4:	789b      	ldrb	r3, [r3, #2]
 8002ae6:	021b      	lsls	r3, r3, #8
 8002ae8:	b21b      	sxth	r3, r3
 8002aea:	4313      	orrs	r3, r2
 8002aec:	b21b      	sxth	r3, r3
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	4b8c      	ldr	r3, [pc, #560]	; (8002d28 <main+0x410>)
 8002af8:	801a      	strh	r2, [r3, #0]
			ch_[1]  = ((int16_t)buf_[ 2] >> 3 | ((int16_t)buf_[ 3] << 5 )) & 0x07FF;
 8002afa:	4b89      	ldr	r3, [pc, #548]	; (8002d20 <main+0x408>)
 8002afc:	789b      	ldrb	r3, [r3, #2]
 8002afe:	08db      	lsrs	r3, r3, #3
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	b21a      	sxth	r2, r3
 8002b04:	4b86      	ldr	r3, [pc, #536]	; (8002d20 <main+0x408>)
 8002b06:	78db      	ldrb	r3, [r3, #3]
 8002b08:	015b      	lsls	r3, r3, #5
 8002b0a:	b21b      	sxth	r3, r3
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	b21b      	sxth	r3, r3
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	4b83      	ldr	r3, [pc, #524]	; (8002d28 <main+0x410>)
 8002b1a:	805a      	strh	r2, [r3, #2]
			ch_[2]  =((int16_t)buf_[ 3] >> 6 | ((int16_t)buf_[ 4] << 2 ) | (int16_t)buf_[ 5] << 10 ) & 0x07FF;
 8002b1c:	4b80      	ldr	r3, [pc, #512]	; (8002d20 <main+0x408>)
 8002b1e:	78db      	ldrb	r3, [r3, #3]
 8002b20:	099b      	lsrs	r3, r3, #6
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	b21a      	sxth	r2, r3
 8002b26:	4b7e      	ldr	r3, [pc, #504]	; (8002d20 <main+0x408>)
 8002b28:	791b      	ldrb	r3, [r3, #4]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	b21b      	sxth	r3, r3
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	b21a      	sxth	r2, r3
 8002b32:	4b7b      	ldr	r3, [pc, #492]	; (8002d20 <main+0x408>)
 8002b34:	795b      	ldrb	r3, [r3, #5]
 8002b36:	029b      	lsls	r3, r3, #10
 8002b38:	b21b      	sxth	r3, r3
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	b21b      	sxth	r3, r3
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	4b78      	ldr	r3, [pc, #480]	; (8002d28 <main+0x410>)
 8002b48:	809a      	strh	r2, [r3, #4]
			ch_[3]  = ((int16_t)buf_[ 5] >> 1 | ((int16_t)buf_[ 6] << 7 )) & 0x07FF;
 8002b4a:	4b75      	ldr	r3, [pc, #468]	; (8002d20 <main+0x408>)
 8002b4c:	795b      	ldrb	r3, [r3, #5]
 8002b4e:	085b      	lsrs	r3, r3, #1
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	b21a      	sxth	r2, r3
 8002b54:	4b72      	ldr	r3, [pc, #456]	; (8002d20 <main+0x408>)
 8002b56:	799b      	ldrb	r3, [r3, #6]
 8002b58:	01db      	lsls	r3, r3, #7
 8002b5a:	b21b      	sxth	r3, r3
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	b21b      	sxth	r3, r3
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	4b6f      	ldr	r3, [pc, #444]	; (8002d28 <main+0x410>)
 8002b6a:	80da      	strh	r2, [r3, #6]
			ch_[4]  = ((int16_t)buf_[ 6] >> 4 | ((int16_t)buf_[ 7] << 4 )) & 0x07FF;
 8002b6c:	4b6c      	ldr	r3, [pc, #432]	; (8002d20 <main+0x408>)
 8002b6e:	799b      	ldrb	r3, [r3, #6]
 8002b70:	091b      	lsrs	r3, r3, #4
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	b21a      	sxth	r2, r3
 8002b76:	4b6a      	ldr	r3, [pc, #424]	; (8002d20 <main+0x408>)
 8002b78:	79db      	ldrb	r3, [r3, #7]
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	b21b      	sxth	r3, r3
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	b21b      	sxth	r3, r3
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	4b67      	ldr	r3, [pc, #412]	; (8002d28 <main+0x410>)
 8002b8c:	811a      	strh	r2, [r3, #8]
			ch_[5]  =  ((int16_t)buf_[ 7] >> 7 | ((int16_t)buf_[ 8] << 1 ) | (int16_t)buf_[9] << 9 ) & 0x07FF;
 8002b8e:	4b64      	ldr	r3, [pc, #400]	; (8002d20 <main+0x408>)
 8002b90:	79db      	ldrb	r3, [r3, #7]
 8002b92:	09db      	lsrs	r3, r3, #7
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	b21a      	sxth	r2, r3
 8002b98:	4b61      	ldr	r3, [pc, #388]	; (8002d20 <main+0x408>)
 8002b9a:	7a1b      	ldrb	r3, [r3, #8]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	b21b      	sxth	r3, r3
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	b21a      	sxth	r2, r3
 8002ba4:	4b5e      	ldr	r3, [pc, #376]	; (8002d20 <main+0x408>)
 8002ba6:	7a5b      	ldrb	r3, [r3, #9]
 8002ba8:	025b      	lsls	r3, r3, #9
 8002baa:	b21b      	sxth	r3, r3
 8002bac:	4313      	orrs	r3, r2
 8002bae:	b21b      	sxth	r3, r3
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	4b5b      	ldr	r3, [pc, #364]	; (8002d28 <main+0x410>)
 8002bba:	815a      	strh	r2, [r3, #10]

			ch_[6]  = ((int16_t)buf_[ 9] >> 2 | ((int16_t)buf_[10] << 6 )) & 0x07FF;
 8002bbc:	4b58      	ldr	r3, [pc, #352]	; (8002d20 <main+0x408>)
 8002bbe:	7a5b      	ldrb	r3, [r3, #9]
 8002bc0:	089b      	lsrs	r3, r3, #2
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	b21a      	sxth	r2, r3
 8002bc6:	4b56      	ldr	r3, [pc, #344]	; (8002d20 <main+0x408>)
 8002bc8:	7a9b      	ldrb	r3, [r3, #10]
 8002bca:	019b      	lsls	r3, r3, #6
 8002bcc:	b21b      	sxth	r3, r3
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	b21b      	sxth	r3, r3
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	4b53      	ldr	r3, [pc, #332]	; (8002d28 <main+0x410>)
 8002bdc:	819a      	strh	r2, [r3, #12]

			ch_[7]  = ((int16_t)buf_[10] >> 5 | ((int16_t)buf_[11] << 3 )) & 0x07FF;
 8002bde:	4b50      	ldr	r3, [pc, #320]	; (8002d20 <main+0x408>)
 8002be0:	7a9b      	ldrb	r3, [r3, #10]
 8002be2:	095b      	lsrs	r3, r3, #5
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	b21a      	sxth	r2, r3
 8002be8:	4b4d      	ldr	r3, [pc, #308]	; (8002d20 <main+0x408>)
 8002bea:	7adb      	ldrb	r3, [r3, #11]
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	b21b      	sxth	r3, r3
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	b21b      	sxth	r3, r3
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	4b4a      	ldr	r3, [pc, #296]	; (8002d28 <main+0x410>)
 8002bfe:	81da      	strh	r2, [r3, #14]

			ch_[8]  = ((int16_t)buf_[12] << 0 | ((int16_t)buf_[13] << 8 )) & 0x07FF;
 8002c00:	4b47      	ldr	r3, [pc, #284]	; (8002d20 <main+0x408>)
 8002c02:	7b1b      	ldrb	r3, [r3, #12]
 8002c04:	b21a      	sxth	r2, r3
 8002c06:	4b46      	ldr	r3, [pc, #280]	; (8002d20 <main+0x408>)
 8002c08:	7b5b      	ldrb	r3, [r3, #13]
 8002c0a:	021b      	lsls	r3, r3, #8
 8002c0c:	b21b      	sxth	r3, r3
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	b21b      	sxth	r3, r3
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	4b43      	ldr	r3, [pc, #268]	; (8002d28 <main+0x410>)
 8002c1c:	821a      	strh	r2, [r3, #16]
			ch_[9]  =  ((int16_t)buf_[13] >> 3 | ((int16_t)buf_[14] << 5 )) & 0x07FF;
 8002c1e:	4b40      	ldr	r3, [pc, #256]	; (8002d20 <main+0x408>)
 8002c20:	7b5b      	ldrb	r3, [r3, #13]
 8002c22:	08db      	lsrs	r3, r3, #3
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	b21a      	sxth	r2, r3
 8002c28:	4b3d      	ldr	r3, [pc, #244]	; (8002d20 <main+0x408>)
 8002c2a:	7b9b      	ldrb	r3, [r3, #14]
 8002c2c:	015b      	lsls	r3, r3, #5
 8002c2e:	b21b      	sxth	r3, r3
 8002c30:	4313      	orrs	r3, r2
 8002c32:	b21b      	sxth	r3, r3
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	4b3a      	ldr	r3, [pc, #232]	; (8002d28 <main+0x410>)
 8002c3e:	825a      	strh	r2, [r3, #18]
			ch_[10] = ((int16_t)buf_[14] >> 6 | ((int16_t)buf_[15] << 2 ) | (int16_t)buf_[16] << 10 ) & 0x07FF;
 8002c40:	4b37      	ldr	r3, [pc, #220]	; (8002d20 <main+0x408>)
 8002c42:	7b9b      	ldrb	r3, [r3, #14]
 8002c44:	099b      	lsrs	r3, r3, #6
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	b21a      	sxth	r2, r3
 8002c4a:	4b35      	ldr	r3, [pc, #212]	; (8002d20 <main+0x408>)
 8002c4c:	7bdb      	ldrb	r3, [r3, #15]
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	b21b      	sxth	r3, r3
 8002c52:	4313      	orrs	r3, r2
 8002c54:	b21a      	sxth	r2, r3
 8002c56:	4b32      	ldr	r3, [pc, #200]	; (8002d20 <main+0x408>)
 8002c58:	7c1b      	ldrb	r3, [r3, #16]
 8002c5a:	029b      	lsls	r3, r3, #10
 8002c5c:	b21b      	sxth	r3, r3
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	b21b      	sxth	r3, r3
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	4b2f      	ldr	r3, [pc, #188]	; (8002d28 <main+0x410>)
 8002c6c:	829a      	strh	r2, [r3, #20]
			// 8 канал максимальная скорость
			// 9 канал включение и выключения силового питания
			// 10 канал схвата

			// ниже вычисляем коэфиценты для каждого движения
			marsh_k = (ch_[1]-1000)/700.0;
 8002c6e:	4b2e      	ldr	r3, [pc, #184]	; (8002d28 <main+0x410>)
 8002c70:	885b      	ldrh	r3, [r3, #2]
 8002c72:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fd fc54 	bl	8000524 <__aeabi_i2d>
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	4b2a      	ldr	r3, [pc, #168]	; (8002d2c <main+0x414>)
 8002c82:	f7fd fde3 	bl	800084c <__aeabi_ddiv>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	f7fd ffab 	bl	8000be8 <__aeabi_d2f>
 8002c92:	4603      	mov	r3, r0
 8002c94:	4a26      	ldr	r2, [pc, #152]	; (8002d30 <main+0x418>)
 8002c96:	6013      	str	r3, [r2, #0]
			lag_k = (ch_[0]-1000)/700.0;
 8002c98:	4b23      	ldr	r3, [pc, #140]	; (8002d28 <main+0x410>)
 8002c9a:	881b      	ldrh	r3, [r3, #0]
 8002c9c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7fd fc3f 	bl	8000524 <__aeabi_i2d>
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	4b20      	ldr	r3, [pc, #128]	; (8002d2c <main+0x414>)
 8002cac:	f7fd fdce 	bl	800084c <__aeabi_ddiv>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	f7fd ff96 	bl	8000be8 <__aeabi_d2f>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	4a1d      	ldr	r2, [pc, #116]	; (8002d34 <main+0x41c>)
 8002cc0:	6013      	str	r3, [r2, #0]
			up_k = (ch_[2]-1000)/700.0;
 8002cc2:	4b19      	ldr	r3, [pc, #100]	; (8002d28 <main+0x410>)
 8002cc4:	889b      	ldrh	r3, [r3, #4]
 8002cc6:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fd fc2a 	bl	8000524 <__aeabi_i2d>
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	4b15      	ldr	r3, [pc, #84]	; (8002d2c <main+0x414>)
 8002cd6:	f7fd fdb9 	bl	800084c <__aeabi_ddiv>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4610      	mov	r0, r2
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	f7fd ff81 	bl	8000be8 <__aeabi_d2f>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	4a13      	ldr	r2, [pc, #76]	; (8002d38 <main+0x420>)
 8002cea:	6013      	str	r3, [r2, #0]
			kurs_k =(ch_[3]-1000)/700.0;
 8002cec:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <main+0x410>)
 8002cee:	88db      	ldrh	r3, [r3, #6]
 8002cf0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7fd fc15 	bl	8000524 <__aeabi_i2d>
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <main+0x414>)
 8002d00:	f7fd fda4 	bl	800084c <__aeabi_ddiv>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4610      	mov	r0, r2
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	e016      	b.n	8002d3c <main+0x424>
 8002d0e:	bf00      	nop
 8002d10:	20000518 	.word	0x20000518
 8002d14:	200001d0 	.word	0x200001d0
 8002d18:	20000650 	.word	0x20000650
 8002d1c:	48001000 	.word	0x48001000
 8002d20:	20000710 	.word	0x20000710
 8002d24:	2000028c 	.word	0x2000028c
 8002d28:	200005f0 	.word	0x200005f0
 8002d2c:	4085e000 	.word	0x4085e000
 8002d30:	2000023c 	.word	0x2000023c
 8002d34:	20000474 	.word	0x20000474
 8002d38:	20000478 	.word	0x20000478
 8002d3c:	f7fd ff54 	bl	8000be8 <__aeabi_d2f>
 8002d40:	4603      	mov	r3, r0
 8002d42:	4a97      	ldr	r2, [pc, #604]	; (8002fa0 <main+0x688>)
 8002d44:	6013      	str	r3, [r2, #0]
			kren_k = (ch_[5]-1000)/700.0;
 8002d46:	4b97      	ldr	r3, [pc, #604]	; (8002fa4 <main+0x68c>)
 8002d48:	895b      	ldrh	r3, [r3, #10]
 8002d4a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fd fbe8 	bl	8000524 <__aeabi_i2d>
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	4b93      	ldr	r3, [pc, #588]	; (8002fa8 <main+0x690>)
 8002d5a:	f7fd fd77 	bl	800084c <__aeabi_ddiv>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4610      	mov	r0, r2
 8002d64:	4619      	mov	r1, r3
 8002d66:	f7fd ff3f 	bl	8000be8 <__aeabi_d2f>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	4a8f      	ldr	r2, [pc, #572]	; (8002fac <main+0x694>)
 8002d6e:	6013      	str	r3, [r2, #0]
			diferent_k = (ch_[4]-1000)/700.0;
 8002d70:	4b8c      	ldr	r3, [pc, #560]	; (8002fa4 <main+0x68c>)
 8002d72:	891b      	ldrh	r3, [r3, #8]
 8002d74:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fd fbd3 	bl	8000524 <__aeabi_i2d>
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	4b89      	ldr	r3, [pc, #548]	; (8002fa8 <main+0x690>)
 8002d84:	f7fd fd62 	bl	800084c <__aeabi_ddiv>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	4619      	mov	r1, r3
 8002d90:	f7fd ff2a 	bl	8000be8 <__aeabi_d2f>
 8002d94:	4603      	mov	r3, r0
 8002d96:	4a86      	ldr	r2, [pc, #536]	; (8002fb0 <main+0x698>)
 8002d98:	6013      	str	r3, [r2, #0]

			tilt_k = (ch_[6]-1000)/700.0;
 8002d9a:	4b82      	ldr	r3, [pc, #520]	; (8002fa4 <main+0x68c>)
 8002d9c:	899b      	ldrh	r3, [r3, #12]
 8002d9e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fd fbbe 	bl	8000524 <__aeabi_i2d>
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	4b7e      	ldr	r3, [pc, #504]	; (8002fa8 <main+0x690>)
 8002dae:	f7fd fd4d 	bl	800084c <__aeabi_ddiv>
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	4610      	mov	r0, r2
 8002db8:	4619      	mov	r1, r3
 8002dba:	f7fd ff15 	bl	8000be8 <__aeabi_d2f>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	4a7c      	ldr	r2, [pc, #496]	; (8002fb4 <main+0x69c>)
 8002dc2:	6013      	str	r3, [r2, #0]
			grab_k = (ch_[9]-1000)/700.0;
 8002dc4:	4b77      	ldr	r3, [pc, #476]	; (8002fa4 <main+0x68c>)
 8002dc6:	8a5b      	ldrh	r3, [r3, #18]
 8002dc8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fd fba9 	bl	8000524 <__aeabi_i2d>
 8002dd2:	f04f 0200 	mov.w	r2, #0
 8002dd6:	4b74      	ldr	r3, [pc, #464]	; (8002fa8 <main+0x690>)
 8002dd8:	f7fd fd38 	bl	800084c <__aeabi_ddiv>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4610      	mov	r0, r2
 8002de2:	4619      	mov	r1, r3
 8002de4:	f7fd ff00 	bl	8000be8 <__aeabi_d2f>
 8002de8:	4603      	mov	r3, r0
 8002dea:	4a73      	ldr	r2, [pc, #460]	; (8002fb8 <main+0x6a0>)
 8002dec:	6013      	str	r3, [r2, #0]
			rot_k = (ch_[4]-1000)/700.0;
 8002dee:	4b6d      	ldr	r3, [pc, #436]	; (8002fa4 <main+0x68c>)
 8002df0:	891b      	ldrh	r3, [r3, #8]
 8002df2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fd fb94 	bl	8000524 <__aeabi_i2d>
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	4b69      	ldr	r3, [pc, #420]	; (8002fa8 <main+0x690>)
 8002e02:	f7fd fd23 	bl	800084c <__aeabi_ddiv>
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	f7fd feeb 	bl	8000be8 <__aeabi_d2f>
 8002e12:	4603      	mov	r3, r0
 8002e14:	4a69      	ldr	r2, [pc, #420]	; (8002fbc <main+0x6a4>)
 8002e16:	6013      	str	r3, [r2, #0]

			max_speed = (ch_[7]-75)/2000.0*70;
 8002e18:	4b62      	ldr	r3, [pc, #392]	; (8002fa4 <main+0x68c>)
 8002e1a:	89db      	ldrh	r3, [r3, #14]
 8002e1c:	3b4b      	subs	r3, #75	; 0x4b
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fd fb80 	bl	8000524 <__aeabi_i2d>
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	4b65      	ldr	r3, [pc, #404]	; (8002fc0 <main+0x6a8>)
 8002e2a:	f7fd fd0f 	bl	800084c <__aeabi_ddiv>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	4610      	mov	r0, r2
 8002e34:	4619      	mov	r1, r3
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	4b62      	ldr	r3, [pc, #392]	; (8002fc4 <main+0x6ac>)
 8002e3c:	f7fd fbdc 	bl	80005f8 <__aeabi_dmul>
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	4610      	mov	r0, r2
 8002e46:	4619      	mov	r1, r3
 8002e48:	f7fd fe86 	bl	8000b58 <__aeabi_d2iz>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	4a5e      	ldr	r2, [pc, #376]	; (8002fc8 <main+0x6b0>)
 8002e50:	6013      	str	r3, [r2, #0]
			//суммируем все вектора
			for(int j=0;j<8;j++)
 8002e52:	2300      	movs	r3, #0
 8002e54:	61fb      	str	r3, [r7, #28]
 8002e56:	e062      	b.n	8002f1e <main+0x606>
			{
				vma[j]=  (marsh[j]*marsh_k+lag[j]*lag_k+up[j]*up_k+kurs[j]*kurs_k+kren[j]*kren_k+diferent[j]*diferent_k);
 8002e58:	4a5c      	ldr	r2, [pc, #368]	; (8002fcc <main+0x6b4>)
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e60:	ee07 3a90 	vmov	s15, r3
 8002e64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e68:	4b59      	ldr	r3, [pc, #356]	; (8002fd0 <main+0x6b8>)
 8002e6a:	edd3 7a00 	vldr	s15, [r3]
 8002e6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e72:	4a58      	ldr	r2, [pc, #352]	; (8002fd4 <main+0x6bc>)
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e7a:	ee07 3a90 	vmov	s15, r3
 8002e7e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e82:	4b55      	ldr	r3, [pc, #340]	; (8002fd8 <main+0x6c0>)
 8002e84:	edd3 7a00 	vldr	s15, [r3]
 8002e88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e90:	4a52      	ldr	r2, [pc, #328]	; (8002fdc <main+0x6c4>)
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e98:	ee07 3a90 	vmov	s15, r3
 8002e9c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002ea0:	4b4f      	ldr	r3, [pc, #316]	; (8002fe0 <main+0x6c8>)
 8002ea2:	edd3 7a00 	vldr	s15, [r3]
 8002ea6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002eaa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eae:	4a4d      	ldr	r2, [pc, #308]	; (8002fe4 <main+0x6cc>)
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb6:	ee07 3a90 	vmov	s15, r3
 8002eba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002ebe:	4b38      	ldr	r3, [pc, #224]	; (8002fa0 <main+0x688>)
 8002ec0:	edd3 7a00 	vldr	s15, [r3]
 8002ec4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ec8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ecc:	4a46      	ldr	r2, [pc, #280]	; (8002fe8 <main+0x6d0>)
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed4:	ee07 3a90 	vmov	s15, r3
 8002ed8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002edc:	4b33      	ldr	r3, [pc, #204]	; (8002fac <main+0x694>)
 8002ede:	edd3 7a00 	vldr	s15, [r3]
 8002ee2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ee6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eea:	4a40      	ldr	r2, [pc, #256]	; (8002fec <main+0x6d4>)
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef2:	ee07 3a90 	vmov	s15, r3
 8002ef6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002efa:	4b2d      	ldr	r3, [pc, #180]	; (8002fb0 <main+0x698>)
 8002efc:	edd3 7a00 	vldr	s15, [r3]
 8002f00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f0c:	ee17 1a90 	vmov	r1, s15
 8002f10:	4a37      	ldr	r2, [pc, #220]	; (8002ff0 <main+0x6d8>)
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j=0;j<8;j++)
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	61fb      	str	r3, [r7, #28]
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	2b07      	cmp	r3, #7
 8002f22:	dd99      	ble.n	8002e58 <main+0x540>
			}

			//проверяем в пределах ли макс значения
			int max = 0;
 8002f24:	2300      	movs	r3, #0
 8002f26:	61bb      	str	r3, [r7, #24]
			for(int i = 0; i < 8; ++i)
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	e02c      	b.n	8002f88 <main+0x670>
			{
				if(fabs(vma[i]) > max)
 8002f2e:	4a30      	ldr	r2, [pc, #192]	; (8002ff0 <main+0x6d8>)
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fd faf4 	bl	8000524 <__aeabi_i2d>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4614      	mov	r4, r2
 8002f42:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002f46:	69b8      	ldr	r0, [r7, #24]
 8002f48:	f7fd faec 	bl	8000524 <__aeabi_i2d>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4620      	mov	r0, r4
 8002f52:	4629      	mov	r1, r5
 8002f54:	f7fd fde0 	bl	8000b18 <__aeabi_dcmpgt>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d011      	beq.n	8002f82 <main+0x66a>
				{
					max = fabs(vma[i]);
 8002f5e:	4a24      	ldr	r2, [pc, #144]	; (8002ff0 <main+0x6d8>)
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fd fadc 	bl	8000524 <__aeabi_i2d>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4690      	mov	r8, r2
 8002f72:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002f76:	4640      	mov	r0, r8
 8002f78:	4649      	mov	r1, r9
 8002f7a:	f7fd fded 	bl	8000b58 <__aeabi_d2iz>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	61bb      	str	r3, [r7, #24]
			for(int i = 0; i < 8; ++i)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	3301      	adds	r3, #1
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	2b07      	cmp	r3, #7
 8002f8c:	ddcf      	ble.n	8002f2e <main+0x616>
				}
			}
			//если есть привышения делим все на коэфицент
			if(max>max_speed)
 8002f8e:	4b0e      	ldr	r3, [pc, #56]	; (8002fc8 <main+0x6b0>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	f340 80a2 	ble.w	80030de <main+0x7c6>
			{
				for(int j=0;j<8;j++)
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	613b      	str	r3, [r7, #16]
 8002f9e:	e09b      	b.n	80030d8 <main+0x7c0>
 8002fa0:	20000568 	.word	0x20000568
 8002fa4:	200005f0 	.word	0x200005f0
 8002fa8:	4085e000 	.word	0x4085e000
 8002fac:	20000234 	.word	0x20000234
 8002fb0:	200007ac 	.word	0x200007ac
 8002fb4:	200003bc 	.word	0x200003bc
 8002fb8:	200003a8 	.word	0x200003a8
 8002fbc:	20000238 	.word	0x20000238
 8002fc0:	409f4000 	.word	0x409f4000
 8002fc4:	40518000 	.word	0x40518000
 8002fc8:	20000084 	.word	0x20000084
 8002fcc:	20000004 	.word	0x20000004
 8002fd0:	2000023c 	.word	0x2000023c
 8002fd4:	20000024 	.word	0x20000024
 8002fd8:	20000474 	.word	0x20000474
 8002fdc:	20000044 	.word	0x20000044
 8002fe0:	20000478 	.word	0x20000478
 8002fe4:	20000064 	.word	0x20000064
 8002fe8:	20000170 	.word	0x20000170
 8002fec:	20000190 	.word	0x20000190
 8002ff0:	200001b0 	.word	0x200001b0
				{
					vma[j]=  (marsh[j]*marsh_k+lag[j]*lag_k+up[j]*up_k+kurs[j]*kurs_k+kren[j]*kren_k+diferent[j]*diferent_k)*max_speed/max;
 8002ff4:	4aa2      	ldr	r2, [pc, #648]	; (8003280 <main+0x968>)
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ffc:	ee07 3a90 	vmov	s15, r3
 8003000:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003004:	4b9f      	ldr	r3, [pc, #636]	; (8003284 <main+0x96c>)
 8003006:	edd3 7a00 	vldr	s15, [r3]
 800300a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800300e:	4a9e      	ldr	r2, [pc, #632]	; (8003288 <main+0x970>)
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003016:	ee07 3a90 	vmov	s15, r3
 800301a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800301e:	4b9b      	ldr	r3, [pc, #620]	; (800328c <main+0x974>)
 8003020:	edd3 7a00 	vldr	s15, [r3]
 8003024:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003028:	ee37 7a27 	vadd.f32	s14, s14, s15
 800302c:	4a98      	ldr	r2, [pc, #608]	; (8003290 <main+0x978>)
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003034:	ee07 3a90 	vmov	s15, r3
 8003038:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800303c:	4b95      	ldr	r3, [pc, #596]	; (8003294 <main+0x97c>)
 800303e:	edd3 7a00 	vldr	s15, [r3]
 8003042:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003046:	ee37 7a27 	vadd.f32	s14, s14, s15
 800304a:	4a93      	ldr	r2, [pc, #588]	; (8003298 <main+0x980>)
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003052:	ee07 3a90 	vmov	s15, r3
 8003056:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800305a:	4b90      	ldr	r3, [pc, #576]	; (800329c <main+0x984>)
 800305c:	edd3 7a00 	vldr	s15, [r3]
 8003060:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003064:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003068:	4a8d      	ldr	r2, [pc, #564]	; (80032a0 <main+0x988>)
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003070:	ee07 3a90 	vmov	s15, r3
 8003074:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003078:	4b8a      	ldr	r3, [pc, #552]	; (80032a4 <main+0x98c>)
 800307a:	edd3 7a00 	vldr	s15, [r3]
 800307e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003082:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003086:	4a88      	ldr	r2, [pc, #544]	; (80032a8 <main+0x990>)
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800308e:	ee07 3a90 	vmov	s15, r3
 8003092:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003096:	4b85      	ldr	r3, [pc, #532]	; (80032ac <main+0x994>)
 8003098:	edd3 7a00 	vldr	s15, [r3]
 800309c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030a4:	4b82      	ldr	r3, [pc, #520]	; (80032b0 <main+0x998>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	ee07 3a90 	vmov	s15, r3
 80030ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030b0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	ee07 3a90 	vmov	s15, r3
 80030ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030c6:	ee17 1a90 	vmov	r1, s15
 80030ca:	4a7a      	ldr	r2, [pc, #488]	; (80032b4 <main+0x99c>)
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for(int j=0;j<8;j++)
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	3301      	adds	r3, #1
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	2b07      	cmp	r3, #7
 80030dc:	dd8a      	ble.n	8002ff4 <main+0x6dc>
				}
			}

			//задаем скорость вращения каждого ВМА
			Thruster_Set_Perc(vma);
 80030de:	4875      	ldr	r0, [pc, #468]	; (80032b4 <main+0x99c>)
 80030e0:	f7fe fb86 	bl	80017f0 <Thruster_Set_Perc>

			if(ch_[8]>1100){
 80030e4:	4b74      	ldr	r3, [pc, #464]	; (80032b8 <main+0x9a0>)
 80030e6:	8a1b      	ldrh	r3, [r3, #16]
 80030e8:	f240 424c 	movw	r2, #1100	; 0x44c
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d906      	bls.n	80030fe <main+0x7e6>
				HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_RESET);//выключаем всю силовуху
 80030f0:	2200      	movs	r2, #0
 80030f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030f6:	4871      	ldr	r0, [pc, #452]	; (80032bc <main+0x9a4>)
 80030f8:	f003 fab0 	bl	800665c <HAL_GPIO_WritePin>
 80030fc:	e02d      	b.n	800315a <main+0x842>
				//	videoHideMax7456(0);//выключаем видео с камеры
			}
			else if(HAL_GPIO_ReadPin(POWER_ON_GPIO_Port, POWER_ON_Pin)==GPIO_PIN_RESET)
 80030fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003102:	486e      	ldr	r0, [pc, #440]	; (80032bc <main+0x9a4>)
 8003104:	f003 fa92 	bl	800662c <HAL_GPIO_ReadPin>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d125      	bne.n	800315a <main+0x842>

			{
				//включаем всю силовуху
				HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_SET);
 800310e:	2201      	movs	r2, #1
 8003110:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003114:	4869      	ldr	r0, [pc, #420]	; (80032bc <main+0x9a4>)
 8003116:	f003 faa1 	bl	800665c <HAL_GPIO_WritePin>
				//раскоментить на соревах
				//				videoHideMax7456(1);//включаем видео с камеры
				//				resetMax7456();//ресетим МАКС
				resetMax7456();//ресетим МАКС
 800311a:	f001 f889 	bl	8004230 <resetMax7456>
				initMax7456();//иницилизируем макс
 800311e:	f001 f83d 	bl	800419c <initMax7456>

				HAL_GPIO_WritePin(GRAB_ENABLE_GPIO_Port, GRAB_ENABLE_Pin, GPIO_PIN_SET); //ресетим ман
 8003122:	2201      	movs	r2, #1
 8003124:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003128:	4865      	ldr	r0, [pc, #404]	; (80032c0 <main+0x9a8>)
 800312a:	f003 fa97 	bl	800665c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROT_ENABLE_GPIO_Port, ROT_ENABLE_Pin, GPIO_PIN_SET);
 800312e:	2201      	movs	r2, #1
 8003130:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003134:	4862      	ldr	r0, [pc, #392]	; (80032c0 <main+0x9a8>)
 8003136:	f003 fa91 	bl	800665c <HAL_GPIO_WritePin>

				init_depth_status = pressure_init();//иницилизируем датчик датчик глубины
 800313a:	f7fd ff9f 	bl	800107c <pressure_init>
 800313e:	4603      	mov	r3, r0
 8003140:	461a      	mov	r2, r3
 8003142:	4b60      	ldr	r3, [pc, #384]	; (80032c4 <main+0x9ac>)
 8003144:	601a      	str	r2, [r3, #0]
				l3gd20_init();//иницилизируем гироскоп
 8003146:	f7ff f8a5 	bl	8002294 <l3gd20_init>
				l3gd20_reboot();
 800314a:	f7ff f8d2 	bl	80022f2 <l3gd20_reboot>
				lsm_init(); //иницилизируем магнитометр и аксилирометр
 800314e:	f7ff f9d7 	bl	8002500 <lsm_init>
				lsm_reboot();
 8003152:	f7ff fa0c 	bl	800256e <lsm_reboot>
				Thruster_Stop();
 8003156:	f7fe fadb 	bl	8001710 <Thruster_Stop>
			}

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 150-tilt_k*50);//задаем угол тилта
 800315a:	4b5b      	ldr	r3, [pc, #364]	; (80032c8 <main+0x9b0>)
 800315c:	edd3 7a00 	vldr	s15, [r3]
 8003160:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80032cc <main+0x9b4>
 8003164:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003168:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80032d0 <main+0x9b8>
 800316c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003170:	4b58      	ldr	r3, [pc, #352]	; (80032d4 <main+0x9bc>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003178:	ee17 2a90 	vmov	r2, s15
 800317c:	635a      	str	r2, [r3, #52]	; 0x34

			if(grab_k > 0.7)
 800317e:	4b56      	ldr	r3, [pc, #344]	; (80032d8 <main+0x9c0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	f7fd f9e0 	bl	8000548 <__aeabi_f2d>
 8003188:	a339      	add	r3, pc, #228	; (adr r3, 8003270 <main+0x958>)
 800318a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318e:	f7fd fcc3 	bl	8000b18 <__aeabi_dcmpgt>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00c      	beq.n	80031b2 <main+0x89a>
			{
				HAL_GPIO_WritePin(GRAB_DIR_GPIO_Port, GRAB_DIR_Pin, GPIO_PIN_SET);
 8003198:	2201      	movs	r2, #1
 800319a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800319e:	484f      	ldr	r0, [pc, #316]	; (80032dc <main+0x9c4>)
 80031a0:	f003 fa5c 	bl	800665c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GRAB_ENABLE_GPIO_Port, GRAB_ENABLE_Pin, GPIO_PIN_RESET);
 80031a4:	2200      	movs	r2, #0
 80031a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031aa:	4845      	ldr	r0, [pc, #276]	; (80032c0 <main+0x9a8>)
 80031ac:	f003 fa56 	bl	800665c <HAL_GPIO_WritePin>
 80031b0:	e01f      	b.n	80031f2 <main+0x8da>
			}else if(grab_k < -0.7)
 80031b2:	4b49      	ldr	r3, [pc, #292]	; (80032d8 <main+0x9c0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fd f9c6 	bl	8000548 <__aeabi_f2d>
 80031bc:	a32e      	add	r3, pc, #184	; (adr r3, 8003278 <main+0x960>)
 80031be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c2:	f7fd fc8b 	bl	8000adc <__aeabi_dcmplt>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00c      	beq.n	80031e6 <main+0x8ce>
			{
				HAL_GPIO_WritePin(GRAB_DIR_GPIO_Port, GRAB_DIR_Pin, GPIO_PIN_RESET);
 80031cc:	2200      	movs	r2, #0
 80031ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031d2:	4842      	ldr	r0, [pc, #264]	; (80032dc <main+0x9c4>)
 80031d4:	f003 fa42 	bl	800665c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GRAB_ENABLE_GPIO_Port, GRAB_ENABLE_Pin, GPIO_PIN_RESET);
 80031d8:	2200      	movs	r2, #0
 80031da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031de:	4838      	ldr	r0, [pc, #224]	; (80032c0 <main+0x9a8>)
 80031e0:	f003 fa3c 	bl	800665c <HAL_GPIO_WritePin>
 80031e4:	e005      	b.n	80031f2 <main+0x8da>
			}
			else
				HAL_GPIO_WritePin(GRAB_ENABLE_GPIO_Port, GRAB_ENABLE_Pin, GPIO_PIN_SET);
 80031e6:	2201      	movs	r2, #1
 80031e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031ec:	4834      	ldr	r0, [pc, #208]	; (80032c0 <main+0x9a8>)
 80031ee:	f003 fa35 	bl	800665c <HAL_GPIO_WritePin>


			if(rot_k > 0.7)
 80031f2:	4b3b      	ldr	r3, [pc, #236]	; (80032e0 <main+0x9c8>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fd f9a6 	bl	8000548 <__aeabi_f2d>
 80031fc:	a31c      	add	r3, pc, #112	; (adr r3, 8003270 <main+0x958>)
 80031fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003202:	f7fd fc89 	bl	8000b18 <__aeabi_dcmpgt>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00c      	beq.n	8003226 <main+0x90e>
			{
				HAL_GPIO_WritePin(ROT_DIR_GPIO_Port, ROT_DIR_Pin, GPIO_PIN_SET);
 800320c:	2201      	movs	r2, #1
 800320e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003212:	4832      	ldr	r0, [pc, #200]	; (80032dc <main+0x9c4>)
 8003214:	f003 fa22 	bl	800665c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROT_ENABLE_GPIO_Port, ROT_ENABLE_Pin, GPIO_PIN_RESET);
 8003218:	2200      	movs	r2, #0
 800321a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800321e:	4828      	ldr	r0, [pc, #160]	; (80032c0 <main+0x9a8>)
 8003220:	f003 fa1c 	bl	800665c <HAL_GPIO_WritePin>
 8003224:	e01f      	b.n	8003266 <main+0x94e>
			}else if(rot_k < -0.7)
 8003226:	4b2e      	ldr	r3, [pc, #184]	; (80032e0 <main+0x9c8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f7fd f98c 	bl	8000548 <__aeabi_f2d>
 8003230:	a311      	add	r3, pc, #68	; (adr r3, 8003278 <main+0x960>)
 8003232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003236:	f7fd fc51 	bl	8000adc <__aeabi_dcmplt>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00c      	beq.n	800325a <main+0x942>
			{
				HAL_GPIO_WritePin(ROT_DIR_GPIO_Port, ROT_DIR_Pin, GPIO_PIN_RESET);
 8003240:	2200      	movs	r2, #0
 8003242:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003246:	4825      	ldr	r0, [pc, #148]	; (80032dc <main+0x9c4>)
 8003248:	f003 fa08 	bl	800665c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROT_ENABLE_GPIO_Port, ROT_ENABLE_Pin, GPIO_PIN_RESET);
 800324c:	2200      	movs	r2, #0
 800324e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003252:	481b      	ldr	r0, [pc, #108]	; (80032c0 <main+0x9a8>)
 8003254:	f003 fa02 	bl	800665c <HAL_GPIO_WritePin>
 8003258:	e005      	b.n	8003266 <main+0x94e>
			}
			else
				HAL_GPIO_WritePin(ROT_ENABLE_GPIO_Port, ROT_ENABLE_Pin, GPIO_PIN_SET);
 800325a:	2201      	movs	r2, #1
 800325c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003260:	4817      	ldr	r0, [pc, #92]	; (80032c0 <main+0x9a8>)
 8003262:	f003 f9fb 	bl	800665c <HAL_GPIO_WritePin>

		}

		for(int j=0;j<22;j++)
 8003266:	2300      	movs	r3, #0
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	e043      	b.n	80032f4 <main+0x9dc>
 800326c:	f3af 8000 	nop.w
 8003270:	66666666 	.word	0x66666666
 8003274:	3fe66666 	.word	0x3fe66666
 8003278:	66666666 	.word	0x66666666
 800327c:	bfe66666 	.word	0xbfe66666
 8003280:	20000004 	.word	0x20000004
 8003284:	2000023c 	.word	0x2000023c
 8003288:	20000024 	.word	0x20000024
 800328c:	20000474 	.word	0x20000474
 8003290:	20000044 	.word	0x20000044
 8003294:	20000478 	.word	0x20000478
 8003298:	20000064 	.word	0x20000064
 800329c:	20000568 	.word	0x20000568
 80032a0:	20000170 	.word	0x20000170
 80032a4:	20000234 	.word	0x20000234
 80032a8:	20000190 	.word	0x20000190
 80032ac:	200007ac 	.word	0x200007ac
 80032b0:	20000084 	.word	0x20000084
 80032b4:	200001b0 	.word	0x200001b0
 80032b8:	200005f0 	.word	0x200005f0
 80032bc:	48000800 	.word	0x48000800
 80032c0:	48000c00 	.word	0x48000c00
 80032c4:	200003ac 	.word	0x200003ac
 80032c8:	200003bc 	.word	0x200003bc
 80032cc:	42480000 	.word	0x42480000
 80032d0:	43160000 	.word	0x43160000
 80032d4:	20000240 	.word	0x20000240
 80032d8:	200003a8 	.word	0x200003a8
 80032dc:	48000400 	.word	0x48000400
 80032e0:	20000238 	.word	0x20000238
		{
			buf_[j]=0;//обнуляем массив с числами
 80032e4:	4a46      	ldr	r2, [pc, #280]	; (8003400 <main+0xae8>)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4413      	add	r3, r2
 80032ea:	2200      	movs	r2, #0
 80032ec:	701a      	strb	r2, [r3, #0]
		for(int j=0;j<22;j++)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	3301      	adds	r3, #1
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b15      	cmp	r3, #21
 80032f8:	ddf4      	ble.n	80032e4 <main+0x9cc>
		}

		//читаем �?МУ

		l3gd20_readxyz(GyroBuffer);
 80032fa:	4842      	ldr	r0, [pc, #264]	; (8003404 <main+0xaec>)
 80032fc:	f7ff f812 	bl	8002324 <l3gd20_readxyz>
		lsm_accxyz(AccBuffer);
 8003300:	4841      	ldr	r0, [pc, #260]	; (8003408 <main+0xaf0>)
 8003302:	f7ff f94b 	bl	800259c <lsm_accxyz>
		lsm_magxyz(MagBuffer);
 8003306:	4841      	ldr	r0, [pc, #260]	; (800340c <main+0xaf4>)
 8003308:	f7ff fa22 	bl	8002750 <lsm_magxyz>

		//фильтруем �?МУ
		imu9dof(AccBuffer, GyroBuffer, MagBuffer, 0.1, Buffer);
 800330c:	4b40      	ldr	r3, [pc, #256]	; (8003410 <main+0xaf8>)
 800330e:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8003414 <main+0xafc>
 8003312:	4a3e      	ldr	r2, [pc, #248]	; (800340c <main+0xaf4>)
 8003314:	493b      	ldr	r1, [pc, #236]	; (8003404 <main+0xaec>)
 8003316:	483c      	ldr	r0, [pc, #240]	; (8003408 <main+0xaf0>)
 8003318:	f7fe fac6 	bl	80018a8 <imu9dof>

		//выводим курс на монитор
		displayHeading((uint8_t)Buffer[2], 1);
 800331c:	4b3c      	ldr	r3, [pc, #240]	; (8003410 <main+0xaf8>)
 800331e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003326:	edc7 7a01 	vstr	s15, [r7, #4]
 800332a:	793b      	ldrb	r3, [r7, #4]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2101      	movs	r1, #1
 8003330:	4618      	mov	r0, r3
 8003332:	f000 ffc7 	bl	80042c4 <displayHeading>
		//выводи время с начала работы программы
		displayMotorArmedTime();
 8003336:	f001 f8e9 	bl	800450c <displayMotorArmedTime>
		//измеряем глубину и выводим ее
		if(HAL_GetTick()%50==0)
 800333a:	f001 fe9f 	bl	800507c <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	4b35      	ldr	r3, [pc, #212]	; (8003418 <main+0xb00>)
 8003342:	fba3 1302 	umull	r1, r3, r3, r2
 8003346:	091b      	lsrs	r3, r3, #4
 8003348:	2132      	movs	r1, #50	; 0x32
 800334a:	fb01 f303 	mul.w	r3, r1, r3
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10e      	bne.n	8003372 <main+0xa5a>
		{
			real_depth = check_pressure()-init_pressure;
 8003354:	f7fd fef6 	bl	8001144 <check_pressure>
 8003358:	4603      	mov	r3, r0
 800335a:	461a      	mov	r2, r3
 800335c:	4b2f      	ldr	r3, [pc, #188]	; (800341c <main+0xb04>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	461a      	mov	r2, r3
 8003364:	4b2e      	ldr	r3, [pc, #184]	; (8003420 <main+0xb08>)
 8003366:	601a      	str	r2, [r3, #0]
			displayDepth(real_depth);
 8003368:	4b2d      	ldr	r3, [pc, #180]	; (8003420 <main+0xb08>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4618      	mov	r0, r3
 800336e:	f001 f849 	bl	8004404 <displayDepth>
		}
		//измеряем напряжение на аккумах и вывовди его
		adc = HAL_ADC_GetValue(&hadc3);
 8003372:	482c      	ldr	r0, [pc, #176]	; (8003424 <main+0xb0c>)
 8003374:	f002 f9d2 	bl	800571c <HAL_ADC_GetValue>
 8003378:	4603      	mov	r3, r0
 800337a:	b29a      	uxth	r2, r3
 800337c:	4b2a      	ldr	r3, [pc, #168]	; (8003428 <main+0xb10>)
 800337e:	801a      	strh	r2, [r3, #0]
		displayBattery(adc*0.1064);
 8003380:	4b29      	ldr	r3, [pc, #164]	; (8003428 <main+0xb10>)
 8003382:	881b      	ldrh	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f7fd f8cd 	bl	8000524 <__aeabi_i2d>
 800338a:	a31b      	add	r3, pc, #108	; (adr r3, 80033f8 <main+0xae0>)
 800338c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003390:	f7fd f932 	bl	80005f8 <__aeabi_dmul>
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	4610      	mov	r0, r2
 800339a:	4619      	mov	r1, r3
 800339c:	f7fd fc04 	bl	8000ba8 <__aeabi_d2uiz>
 80033a0:	4603      	mov	r3, r0
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	4618      	mov	r0, r3
 80033a6:	f001 f847 	bl	8004438 <displayBattery>
		displaycompas(Buffer[0],Buffer[1], tilt_k*90+118,max_speed);
 80033aa:	4b19      	ldr	r3, [pc, #100]	; (8003410 <main+0xaf8>)
 80033ac:	edd3 7a00 	vldr	s15, [r3]
 80033b0:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80033b4:	4b16      	ldr	r3, [pc, #88]	; (8003410 <main+0xaf8>)
 80033b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80033ba:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 80033be:	4b1b      	ldr	r3, [pc, #108]	; (800342c <main+0xb14>)
 80033c0:	edd3 7a00 	vldr	s15, [r3]
 80033c4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003430 <main+0xb18>
 80033c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033cc:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003434 <main+0xb1c>
 80033d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80033d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033d8:	4b17      	ldr	r3, [pc, #92]	; (8003438 <main+0xb20>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	ee17 2a90 	vmov	r2, s15
 80033e2:	ee16 1a10 	vmov	r1, s12
 80033e6:	ee16 0a90 	vmov	r0, s13
 80033ea:	f001 f8cf 	bl	800458c <displaycompas>
		HAL_GPIO_WritePin(LD8_GPIO_Port, LD8_Pin, GPIO_PIN_RESET);
 80033ee:	f7ff bb59 	b.w	8002aa4 <main+0x18c>
 80033f2:	bf00      	nop
 80033f4:	f3af 8000 	nop.w
 80033f8:	c84b5dcc 	.word	0xc84b5dcc
 80033fc:	3fbb3d07 	.word	0x3fbb3d07
 8003400:	20000710 	.word	0x20000710
 8003404:	200003b0 	.word	0x200003b0
 8003408:	2000047c 	.word	0x2000047c
 800340c:	20000488 	.word	0x20000488
 8003410:	20000650 	.word	0x20000650
 8003414:	3dcccccd 	.word	0x3dcccccd
 8003418:	51eb851f 	.word	0x51eb851f
 800341c:	200001d8 	.word	0x200001d8
 8003420:	200001d4 	.word	0x200001d4
 8003424:	20000518 	.word	0x20000518
 8003428:	200001d0 	.word	0x200001d0
 800342c:	200003bc 	.word	0x200003bc
 8003430:	42b40000 	.word	0x42b40000
 8003434:	42ec0000 	.word	0x42ec0000
 8003438:	20000084 	.word	0x20000084

0800343c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b09e      	sub	sp, #120	; 0x78
 8003440:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003442:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003446:	2228      	movs	r2, #40	; 0x28
 8003448:	2100      	movs	r1, #0
 800344a:	4618      	mov	r0, r3
 800344c:	f007 fef0 	bl	800b230 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003450:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	60da      	str	r2, [r3, #12]
 800345e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003460:	463b      	mov	r3, r7
 8003462:	223c      	movs	r2, #60	; 0x3c
 8003464:	2100      	movs	r1, #0
 8003466:	4618      	mov	r0, r3
 8003468:	f007 fee2 	bl	800b230 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800346c:	2303      	movs	r3, #3
 800346e:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003470:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003474:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003476:	2300      	movs	r3, #0
 8003478:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800347a:	2301      	movs	r3, #1
 800347c:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800347e:	2310      	movs	r3, #16
 8003480:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003482:	2302      	movs	r3, #2
 8003484:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003486:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800348a:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800348c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003490:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003492:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003496:	4618      	mov	r0, r3
 8003498:	f004 f9ae 	bl	80077f8 <HAL_RCC_OscConfig>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <SystemClock_Config+0x6a>
	{
		Error_Handler();
 80034a2:	f000 fd33 	bl	8003f0c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034a6:	230f      	movs	r3, #15
 80034a8:	63fb      	str	r3, [r7, #60]	; 0x3c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034aa:	2302      	movs	r3, #2
 80034ac:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034ae:	2300      	movs	r3, #0
 80034b0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80034b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034b6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034b8:	2300      	movs	r3, #0
 80034ba:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80034bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80034c0:	2101      	movs	r1, #1
 80034c2:	4618      	mov	r0, r3
 80034c4:	f005 f8a0 	bl	8008608 <HAL_RCC_ClockConfig>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <SystemClock_Config+0x96>
	{
		Error_Handler();
 80034ce:	f000 fd1d 	bl	8003f0c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 80034d2:	4b11      	ldr	r3, [pc, #68]	; (8003518 <SystemClock_Config+0xdc>)
 80034d4:	603b      	str	r3, [r7, #0]
			|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
			|RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_I2C1
			|RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_TIM8
			|RCC_PERIPHCLK_ADC34;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80034d6:	2300      	movs	r3, #0
 80034d8:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80034da:	2300      	movs	r3, #0
 80034dc:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80034de:	2300      	movs	r3, #0
 80034e0:	613b      	str	r3, [r7, #16]
	PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80034e2:	2300      	movs	r3, #0
 80034e4:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80034e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034ea:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80034ec:	2300      	movs	r3, #0
 80034ee:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 80034f0:	2300      	movs	r3, #0
 80034f2:	623b      	str	r3, [r7, #32]
	PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80034f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034f8:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 80034fa:	2300      	movs	r3, #0
 80034fc:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034fe:	463b      	mov	r3, r7
 8003500:	4618      	mov	r0, r3
 8003502:	f005 fab7 	bl	8008a74 <HAL_RCCEx_PeriphCLKConfig>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <SystemClock_Config+0xd4>
	{
		Error_Handler();
 800350c:	f000 fcfe 	bl	8003f0c <Error_Handler>
	}
}
 8003510:	bf00      	nop
 8003512:	3778      	adds	r7, #120	; 0x78
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	00022177 	.word	0x00022177

0800351c <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b08a      	sub	sp, #40	; 0x28
 8003520:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_MultiModeTypeDef multimode = {0};
 8003522:	f107 031c 	add.w	r3, r7, #28
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	605a      	str	r2, [r3, #4]
 800352c:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 800352e:	1d3b      	adds	r3, r7, #4
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	605a      	str	r2, [r3, #4]
 8003536:	609a      	str	r2, [r3, #8]
 8003538:	60da      	str	r2, [r3, #12]
 800353a:	611a      	str	r2, [r3, #16]
 800353c:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Common config
	 */
	hadc3.Instance = ADC3;
 800353e:	4b2d      	ldr	r3, [pc, #180]	; (80035f4 <MX_ADC3_Init+0xd8>)
 8003540:	4a2d      	ldr	r2, [pc, #180]	; (80035f8 <MX_ADC3_Init+0xdc>)
 8003542:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003544:	4b2b      	ldr	r3, [pc, #172]	; (80035f4 <MX_ADC3_Init+0xd8>)
 8003546:	2200      	movs	r2, #0
 8003548:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800354a:	4b2a      	ldr	r3, [pc, #168]	; (80035f4 <MX_ADC3_Init+0xd8>)
 800354c:	2200      	movs	r2, #0
 800354e:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003550:	4b28      	ldr	r3, [pc, #160]	; (80035f4 <MX_ADC3_Init+0xd8>)
 8003552:	2200      	movs	r2, #0
 8003554:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = ENABLE;
 8003556:	4b27      	ldr	r3, [pc, #156]	; (80035f4 <MX_ADC3_Init+0xd8>)
 8003558:	2201      	movs	r2, #1
 800355a:	765a      	strb	r2, [r3, #25]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 800355c:	4b25      	ldr	r3, [pc, #148]	; (80035f4 <MX_ADC3_Init+0xd8>)
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003564:	4b23      	ldr	r3, [pc, #140]	; (80035f4 <MX_ADC3_Init+0xd8>)
 8003566:	2200      	movs	r2, #0
 8003568:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800356a:	4b22      	ldr	r3, [pc, #136]	; (80035f4 <MX_ADC3_Init+0xd8>)
 800356c:	2201      	movs	r2, #1
 800356e:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003570:	4b20      	ldr	r3, [pc, #128]	; (80035f4 <MX_ADC3_Init+0xd8>)
 8003572:	2200      	movs	r2, #0
 8003574:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 8003576:	4b1f      	ldr	r3, [pc, #124]	; (80035f4 <MX_ADC3_Init+0xd8>)
 8003578:	2201      	movs	r2, #1
 800357a:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 800357c:	4b1d      	ldr	r3, [pc, #116]	; (80035f4 <MX_ADC3_Init+0xd8>)
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003584:	4b1b      	ldr	r3, [pc, #108]	; (80035f4 <MX_ADC3_Init+0xd8>)
 8003586:	2204      	movs	r2, #4
 8003588:	615a      	str	r2, [r3, #20]
	hadc3.Init.LowPowerAutoWait = DISABLE;
 800358a:	4b1a      	ldr	r3, [pc, #104]	; (80035f4 <MX_ADC3_Init+0xd8>)
 800358c:	2200      	movs	r2, #0
 800358e:	761a      	strb	r2, [r3, #24]
	hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003590:	4b18      	ldr	r3, [pc, #96]	; (80035f4 <MX_ADC3_Init+0xd8>)
 8003592:	2200      	movs	r2, #0
 8003594:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003596:	4817      	ldr	r0, [pc, #92]	; (80035f4 <MX_ADC3_Init+0xd8>)
 8003598:	f001 fda0 	bl	80050dc <HAL_ADC_Init>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <MX_ADC3_Init+0x8a>
	{
		Error_Handler();
 80035a2:	f000 fcb3 	bl	8003f0c <Error_Handler>
	}
	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80035aa:	f107 031c 	add.w	r3, r7, #28
 80035ae:	4619      	mov	r1, r3
 80035b0:	4810      	ldr	r0, [pc, #64]	; (80035f4 <MX_ADC3_Init+0xd8>)
 80035b2:	f002 fc1f 	bl	8005df4 <HAL_ADCEx_MultiModeConfigChannel>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <MX_ADC3_Init+0xa4>
	{
		Error_Handler();
 80035bc:	f000 fca6 	bl	8003f0c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 80035c0:	2308      	movs	r3, #8
 80035c2:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80035c4:	2301      	movs	r3, #1
 80035c6:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80035c8:	2300      	movs	r3, #0
 80035ca:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 80035cc:	2304      	movs	r3, #4
 80035ce:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80035d0:	2300      	movs	r3, #0
 80035d2:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 80035d4:	2300      	movs	r3, #0
 80035d6:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80035d8:	1d3b      	adds	r3, r7, #4
 80035da:	4619      	mov	r1, r3
 80035dc:	4805      	ldr	r0, [pc, #20]	; (80035f4 <MX_ADC3_Init+0xd8>)
 80035de:	f002 f91d 	bl	800581c <HAL_ADC_ConfigChannel>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <MX_ADC3_Init+0xd0>
	{
		Error_Handler();
 80035e8:	f000 fc90 	bl	8003f0c <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 80035ec:	bf00      	nop
 80035ee:	3728      	adds	r7, #40	; 0x28
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	20000518 	.word	0x20000518
 80035f8:	50000400 	.word	0x50000400

080035fc <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8003600:	4b1b      	ldr	r3, [pc, #108]	; (8003670 <MX_I2C1_Init+0x74>)
 8003602:	4a1c      	ldr	r2, [pc, #112]	; (8003674 <MX_I2C1_Init+0x78>)
 8003604:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 8003606:	4b1a      	ldr	r3, [pc, #104]	; (8003670 <MX_I2C1_Init+0x74>)
 8003608:	4a1b      	ldr	r2, [pc, #108]	; (8003678 <MX_I2C1_Init+0x7c>)
 800360a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 800360c:	4b18      	ldr	r3, [pc, #96]	; (8003670 <MX_I2C1_Init+0x74>)
 800360e:	2200      	movs	r2, #0
 8003610:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003612:	4b17      	ldr	r3, [pc, #92]	; (8003670 <MX_I2C1_Init+0x74>)
 8003614:	2201      	movs	r2, #1
 8003616:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003618:	4b15      	ldr	r3, [pc, #84]	; (8003670 <MX_I2C1_Init+0x74>)
 800361a:	2200      	movs	r2, #0
 800361c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800361e:	4b14      	ldr	r3, [pc, #80]	; (8003670 <MX_I2C1_Init+0x74>)
 8003620:	2200      	movs	r2, #0
 8003622:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003624:	4b12      	ldr	r3, [pc, #72]	; (8003670 <MX_I2C1_Init+0x74>)
 8003626:	2200      	movs	r2, #0
 8003628:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800362a:	4b11      	ldr	r3, [pc, #68]	; (8003670 <MX_I2C1_Init+0x74>)
 800362c:	2200      	movs	r2, #0
 800362e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003630:	4b0f      	ldr	r3, [pc, #60]	; (8003670 <MX_I2C1_Init+0x74>)
 8003632:	2200      	movs	r2, #0
 8003634:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003636:	480e      	ldr	r0, [pc, #56]	; (8003670 <MX_I2C1_Init+0x74>)
 8003638:	f003 f828 	bl	800668c <HAL_I2C_Init>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8003642:	f000 fc63 	bl	8003f0c <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003646:	2100      	movs	r1, #0
 8003648:	4809      	ldr	r0, [pc, #36]	; (8003670 <MX_I2C1_Init+0x74>)
 800364a:	f003 ff5f 	bl	800750c <HAL_I2CEx_ConfigAnalogFilter>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8003654:	f000 fc5a 	bl	8003f0c <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003658:	2100      	movs	r1, #0
 800365a:	4805      	ldr	r0, [pc, #20]	; (8003670 <MX_I2C1_Init+0x74>)
 800365c:	f003 ffa1 	bl	80075a2 <HAL_I2CEx_ConfigDigitalFilter>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8003666:	f000 fc51 	bl	8003f0c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800366a:	bf00      	nop
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	20000310 	.word	0x20000310
 8003674:	40005400 	.word	0x40005400
 8003678:	2000090e 	.word	0x2000090e

0800367c <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8003680:	4b1b      	ldr	r3, [pc, #108]	; (80036f0 <MX_I2C2_Init+0x74>)
 8003682:	4a1c      	ldr	r2, [pc, #112]	; (80036f4 <MX_I2C2_Init+0x78>)
 8003684:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x2000090E;
 8003686:	4b1a      	ldr	r3, [pc, #104]	; (80036f0 <MX_I2C2_Init+0x74>)
 8003688:	4a1b      	ldr	r2, [pc, #108]	; (80036f8 <MX_I2C2_Init+0x7c>)
 800368a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 800368c:	4b18      	ldr	r3, [pc, #96]	; (80036f0 <MX_I2C2_Init+0x74>)
 800368e:	2200      	movs	r2, #0
 8003690:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003692:	4b17      	ldr	r3, [pc, #92]	; (80036f0 <MX_I2C2_Init+0x74>)
 8003694:	2201      	movs	r2, #1
 8003696:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003698:	4b15      	ldr	r3, [pc, #84]	; (80036f0 <MX_I2C2_Init+0x74>)
 800369a:	2200      	movs	r2, #0
 800369c:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 800369e:	4b14      	ldr	r3, [pc, #80]	; (80036f0 <MX_I2C2_Init+0x74>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80036a4:	4b12      	ldr	r3, [pc, #72]	; (80036f0 <MX_I2C2_Init+0x74>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80036aa:	4b11      	ldr	r3, [pc, #68]	; (80036f0 <MX_I2C2_Init+0x74>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80036b0:	4b0f      	ldr	r3, [pc, #60]	; (80036f0 <MX_I2C2_Init+0x74>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80036b6:	480e      	ldr	r0, [pc, #56]	; (80036f0 <MX_I2C2_Init+0x74>)
 80036b8:	f002 ffe8 	bl	800668c <HAL_I2C_Init>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <MX_I2C2_Init+0x4a>
	{
		Error_Handler();
 80036c2:	f000 fc23 	bl	8003f0c <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80036c6:	2100      	movs	r1, #0
 80036c8:	4809      	ldr	r0, [pc, #36]	; (80036f0 <MX_I2C2_Init+0x74>)
 80036ca:	f003 ff1f 	bl	800750c <HAL_I2CEx_ConfigAnalogFilter>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <MX_I2C2_Init+0x5c>
	{
		Error_Handler();
 80036d4:	f000 fc1a 	bl	8003f0c <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80036d8:	2100      	movs	r1, #0
 80036da:	4805      	ldr	r0, [pc, #20]	; (80036f0 <MX_I2C2_Init+0x74>)
 80036dc:	f003 ff61 	bl	80075a2 <HAL_I2CEx_ConfigDigitalFilter>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <MX_I2C2_Init+0x6e>
	{
		Error_Handler();
 80036e6:	f000 fc11 	bl	8003f0c <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80036ea:	bf00      	nop
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	2000035c 	.word	0x2000035c
 80036f4:	40005800 	.word	0x40005800
 80036f8:	2000090e 	.word	0x2000090e

080036fc <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8003700:	4b1b      	ldr	r3, [pc, #108]	; (8003770 <MX_SPI1_Init+0x74>)
 8003702:	4a1c      	ldr	r2, [pc, #112]	; (8003774 <MX_SPI1_Init+0x78>)
 8003704:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8003706:	4b1a      	ldr	r3, [pc, #104]	; (8003770 <MX_SPI1_Init+0x74>)
 8003708:	f44f 7282 	mov.w	r2, #260	; 0x104
 800370c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800370e:	4b18      	ldr	r3, [pc, #96]	; (8003770 <MX_SPI1_Init+0x74>)
 8003710:	2200      	movs	r2, #0
 8003712:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003714:	4b16      	ldr	r3, [pc, #88]	; (8003770 <MX_SPI1_Init+0x74>)
 8003716:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800371a:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800371c:	4b14      	ldr	r3, [pc, #80]	; (8003770 <MX_SPI1_Init+0x74>)
 800371e:	2200      	movs	r2, #0
 8003720:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003722:	4b13      	ldr	r3, [pc, #76]	; (8003770 <MX_SPI1_Init+0x74>)
 8003724:	2200      	movs	r2, #0
 8003726:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003728:	4b11      	ldr	r3, [pc, #68]	; (8003770 <MX_SPI1_Init+0x74>)
 800372a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800372e:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003730:	4b0f      	ldr	r3, [pc, #60]	; (8003770 <MX_SPI1_Init+0x74>)
 8003732:	2210      	movs	r2, #16
 8003734:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003736:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <MX_SPI1_Init+0x74>)
 8003738:	2200      	movs	r2, #0
 800373a:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800373c:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <MX_SPI1_Init+0x74>)
 800373e:	2200      	movs	r2, #0
 8003740:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003742:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <MX_SPI1_Init+0x74>)
 8003744:	2200      	movs	r2, #0
 8003746:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8003748:	4b09      	ldr	r3, [pc, #36]	; (8003770 <MX_SPI1_Init+0x74>)
 800374a:	2207      	movs	r2, #7
 800374c:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800374e:	4b08      	ldr	r3, [pc, #32]	; (8003770 <MX_SPI1_Init+0x74>)
 8003750:	2200      	movs	r2, #0
 8003752:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003754:	4b06      	ldr	r3, [pc, #24]	; (8003770 <MX_SPI1_Init+0x74>)
 8003756:	2208      	movs	r2, #8
 8003758:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800375a:	4805      	ldr	r0, [pc, #20]	; (8003770 <MX_SPI1_Init+0x74>)
 800375c:	f005 fb3a 	bl	8008dd4 <HAL_SPI_Init>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <MX_SPI1_Init+0x6e>
	{
		Error_Handler();
 8003766:	f000 fbd1 	bl	8003f0c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800376a:	bf00      	nop
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	20000660 	.word	0x20000660
 8003774:	40013000 	.word	0x40013000

08003778 <MX_SPI3_Init>:
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 800377c:	4b1b      	ldr	r3, [pc, #108]	; (80037ec <MX_SPI3_Init+0x74>)
 800377e:	4a1c      	ldr	r2, [pc, #112]	; (80037f0 <MX_SPI3_Init+0x78>)
 8003780:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8003782:	4b1a      	ldr	r3, [pc, #104]	; (80037ec <MX_SPI3_Init+0x74>)
 8003784:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003788:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800378a:	4b18      	ldr	r3, [pc, #96]	; (80037ec <MX_SPI3_Init+0x74>)
 800378c:	2200      	movs	r2, #0
 800378e:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003790:	4b16      	ldr	r3, [pc, #88]	; (80037ec <MX_SPI3_Init+0x74>)
 8003792:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003796:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003798:	4b14      	ldr	r3, [pc, #80]	; (80037ec <MX_SPI3_Init+0x74>)
 800379a:	2200      	movs	r2, #0
 800379c:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800379e:	4b13      	ldr	r3, [pc, #76]	; (80037ec <MX_SPI3_Init+0x74>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 80037a4:	4b11      	ldr	r3, [pc, #68]	; (80037ec <MX_SPI3_Init+0x74>)
 80037a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037aa:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80037ac:	4b0f      	ldr	r3, [pc, #60]	; (80037ec <MX_SPI3_Init+0x74>)
 80037ae:	2210      	movs	r2, #16
 80037b0:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80037b2:	4b0e      	ldr	r3, [pc, #56]	; (80037ec <MX_SPI3_Init+0x74>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80037b8:	4b0c      	ldr	r3, [pc, #48]	; (80037ec <MX_SPI3_Init+0x74>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037be:	4b0b      	ldr	r3, [pc, #44]	; (80037ec <MX_SPI3_Init+0x74>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 7;
 80037c4:	4b09      	ldr	r3, [pc, #36]	; (80037ec <MX_SPI3_Init+0x74>)
 80037c6:	2207      	movs	r2, #7
 80037c8:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80037ca:	4b08      	ldr	r3, [pc, #32]	; (80037ec <MX_SPI3_Init+0x74>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	631a      	str	r2, [r3, #48]	; 0x30
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80037d0:	4b06      	ldr	r3, [pc, #24]	; (80037ec <MX_SPI3_Init+0x74>)
 80037d2:	2208      	movs	r2, #8
 80037d4:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80037d6:	4805      	ldr	r0, [pc, #20]	; (80037ec <MX_SPI3_Init+0x74>)
 80037d8:	f005 fafc 	bl	8008dd4 <HAL_SPI_Init>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <MX_SPI3_Init+0x6e>
	{
		Error_Handler();
 80037e2:	f000 fb93 	bl	8003f0c <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 80037e6:	bf00      	nop
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20000410 	.word	0x20000410
 80037f0:	40003c00 	.word	0x40003c00

080037f4 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08a      	sub	sp, #40	; 0x28
 80037f8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037fa:	f107 031c 	add.w	r3, r7, #28
 80037fe:	2200      	movs	r2, #0
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	605a      	str	r2, [r3, #4]
 8003804:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8003806:	463b      	mov	r3, r7
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	605a      	str	r2, [r3, #4]
 800380e:	609a      	str	r2, [r3, #8]
 8003810:	60da      	str	r2, [r3, #12]
 8003812:	611a      	str	r2, [r3, #16]
 8003814:	615a      	str	r2, [r3, #20]
 8003816:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003818:	4b34      	ldr	r3, [pc, #208]	; (80038ec <MX_TIM2_Init+0xf8>)
 800381a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800381e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 479;
 8003820:	4b32      	ldr	r3, [pc, #200]	; (80038ec <MX_TIM2_Init+0xf8>)
 8003822:	f240 12df 	movw	r2, #479	; 0x1df
 8003826:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003828:	4b30      	ldr	r3, [pc, #192]	; (80038ec <MX_TIM2_Init+0xf8>)
 800382a:	2200      	movs	r2, #0
 800382c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1999;
 800382e:	4b2f      	ldr	r3, [pc, #188]	; (80038ec <MX_TIM2_Init+0xf8>)
 8003830:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003834:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8003836:	4b2d      	ldr	r3, [pc, #180]	; (80038ec <MX_TIM2_Init+0xf8>)
 8003838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800383c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800383e:	4b2b      	ldr	r3, [pc, #172]	; (80038ec <MX_TIM2_Init+0xf8>)
 8003840:	2200      	movs	r2, #0
 8003842:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003844:	4829      	ldr	r0, [pc, #164]	; (80038ec <MX_TIM2_Init+0xf8>)
 8003846:	f006 f855 	bl	80098f4 <HAL_TIM_PWM_Init>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <MX_TIM2_Init+0x60>
	{
		Error_Handler();
 8003850:	f000 fb5c 	bl	8003f0c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003854:	2300      	movs	r3, #0
 8003856:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003858:	2300      	movs	r3, #0
 800385a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800385c:	f107 031c 	add.w	r3, r7, #28
 8003860:	4619      	mov	r1, r3
 8003862:	4822      	ldr	r0, [pc, #136]	; (80038ec <MX_TIM2_Init+0xf8>)
 8003864:	f006 fe8a 	bl	800a57c <HAL_TIMEx_MasterConfigSynchronization>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <MX_TIM2_Init+0x7e>
	{
		Error_Handler();
 800386e:	f000 fb4d 	bl	8003f0c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003872:	2360      	movs	r3, #96	; 0x60
 8003874:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8003876:	2300      	movs	r3, #0
 8003878:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800387a:	2300      	movs	r3, #0
 800387c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800387e:	2300      	movs	r3, #0
 8003880:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003882:	463b      	mov	r3, r7
 8003884:	2200      	movs	r2, #0
 8003886:	4619      	mov	r1, r3
 8003888:	4818      	ldr	r0, [pc, #96]	; (80038ec <MX_TIM2_Init+0xf8>)
 800388a:	f006 f9d7 	bl	8009c3c <HAL_TIM_PWM_ConfigChannel>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <MX_TIM2_Init+0xa4>
	{
		Error_Handler();
 8003894:	f000 fb3a 	bl	8003f0c <Error_Handler>
	}
	sConfigOC.Pulse = 150;
 8003898:	2396      	movs	r3, #150	; 0x96
 800389a:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800389c:	463b      	mov	r3, r7
 800389e:	2204      	movs	r2, #4
 80038a0:	4619      	mov	r1, r3
 80038a2:	4812      	ldr	r0, [pc, #72]	; (80038ec <MX_TIM2_Init+0xf8>)
 80038a4:	f006 f9ca 	bl	8009c3c <HAL_TIM_PWM_ConfigChannel>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <MX_TIM2_Init+0xbe>
	{
		Error_Handler();
 80038ae:	f000 fb2d 	bl	8003f0c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80038b2:	463b      	mov	r3, r7
 80038b4:	2208      	movs	r2, #8
 80038b6:	4619      	mov	r1, r3
 80038b8:	480c      	ldr	r0, [pc, #48]	; (80038ec <MX_TIM2_Init+0xf8>)
 80038ba:	f006 f9bf 	bl	8009c3c <HAL_TIM_PWM_ConfigChannel>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <MX_TIM2_Init+0xd4>
	{
		Error_Handler();
 80038c4:	f000 fb22 	bl	8003f0c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80038c8:	463b      	mov	r3, r7
 80038ca:	220c      	movs	r2, #12
 80038cc:	4619      	mov	r1, r3
 80038ce:	4807      	ldr	r0, [pc, #28]	; (80038ec <MX_TIM2_Init+0xf8>)
 80038d0:	f006 f9b4 	bl	8009c3c <HAL_TIM_PWM_ConfigChannel>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <MX_TIM2_Init+0xea>
	{
		Error_Handler();
 80038da:	f000 fb17 	bl	8003f0c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80038de:	4803      	ldr	r0, [pc, #12]	; (80038ec <MX_TIM2_Init+0xf8>)
 80038e0:	f001 f8a6 	bl	8004a30 <HAL_TIM_MspPostInit>

}
 80038e4:	bf00      	nop
 80038e6:	3728      	adds	r7, #40	; 0x28
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	200006c4 	.word	0x200006c4

080038f0 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08a      	sub	sp, #40	; 0x28
 80038f4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038f6:	f107 031c 	add.w	r3, r7, #28
 80038fa:	2200      	movs	r2, #0
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	605a      	str	r2, [r3, #4]
 8003900:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8003902:	463b      	mov	r3, r7
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	605a      	str	r2, [r3, #4]
 800390a:	609a      	str	r2, [r3, #8]
 800390c:	60da      	str	r2, [r3, #12]
 800390e:	611a      	str	r2, [r3, #16]
 8003910:	615a      	str	r2, [r3, #20]
 8003912:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8003914:	4b33      	ldr	r3, [pc, #204]	; (80039e4 <MX_TIM3_Init+0xf4>)
 8003916:	4a34      	ldr	r2, [pc, #208]	; (80039e8 <MX_TIM3_Init+0xf8>)
 8003918:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 479;
 800391a:	4b32      	ldr	r3, [pc, #200]	; (80039e4 <MX_TIM3_Init+0xf4>)
 800391c:	f240 12df 	movw	r2, #479	; 0x1df
 8003920:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003922:	4b30      	ldr	r3, [pc, #192]	; (80039e4 <MX_TIM3_Init+0xf4>)
 8003924:	2200      	movs	r2, #0
 8003926:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1999;
 8003928:	4b2e      	ldr	r3, [pc, #184]	; (80039e4 <MX_TIM3_Init+0xf4>)
 800392a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800392e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8003930:	4b2c      	ldr	r3, [pc, #176]	; (80039e4 <MX_TIM3_Init+0xf4>)
 8003932:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003936:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003938:	4b2a      	ldr	r3, [pc, #168]	; (80039e4 <MX_TIM3_Init+0xf4>)
 800393a:	2200      	movs	r2, #0
 800393c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800393e:	4829      	ldr	r0, [pc, #164]	; (80039e4 <MX_TIM3_Init+0xf4>)
 8003940:	f005 ffd8 	bl	80098f4 <HAL_TIM_PWM_Init>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <MX_TIM3_Init+0x5e>
	{
		Error_Handler();
 800394a:	f000 fadf 	bl	8003f0c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800394e:	2300      	movs	r3, #0
 8003950:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003952:	2300      	movs	r3, #0
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003956:	f107 031c 	add.w	r3, r7, #28
 800395a:	4619      	mov	r1, r3
 800395c:	4821      	ldr	r0, [pc, #132]	; (80039e4 <MX_TIM3_Init+0xf4>)
 800395e:	f006 fe0d 	bl	800a57c <HAL_TIMEx_MasterConfigSynchronization>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <MX_TIM3_Init+0x7c>
	{
		Error_Handler();
 8003968:	f000 fad0 	bl	8003f0c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800396c:	2360      	movs	r3, #96	; 0x60
 800396e:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 150;
 8003970:	2396      	movs	r3, #150	; 0x96
 8003972:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003974:	2300      	movs	r3, #0
 8003976:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003978:	2300      	movs	r3, #0
 800397a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800397c:	463b      	mov	r3, r7
 800397e:	2200      	movs	r2, #0
 8003980:	4619      	mov	r1, r3
 8003982:	4818      	ldr	r0, [pc, #96]	; (80039e4 <MX_TIM3_Init+0xf4>)
 8003984:	f006 f95a 	bl	8009c3c <HAL_TIM_PWM_ConfigChannel>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <MX_TIM3_Init+0xa2>
	{
		Error_Handler();
 800398e:	f000 fabd 	bl	8003f0c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003992:	463b      	mov	r3, r7
 8003994:	2204      	movs	r2, #4
 8003996:	4619      	mov	r1, r3
 8003998:	4812      	ldr	r0, [pc, #72]	; (80039e4 <MX_TIM3_Init+0xf4>)
 800399a:	f006 f94f 	bl	8009c3c <HAL_TIM_PWM_ConfigChannel>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <MX_TIM3_Init+0xb8>
	{
		Error_Handler();
 80039a4:	f000 fab2 	bl	8003f0c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80039a8:	463b      	mov	r3, r7
 80039aa:	2208      	movs	r2, #8
 80039ac:	4619      	mov	r1, r3
 80039ae:	480d      	ldr	r0, [pc, #52]	; (80039e4 <MX_TIM3_Init+0xf4>)
 80039b0:	f006 f944 	bl	8009c3c <HAL_TIM_PWM_ConfigChannel>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <MX_TIM3_Init+0xce>
	{
		Error_Handler();
 80039ba:	f000 faa7 	bl	8003f0c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80039be:	463b      	mov	r3, r7
 80039c0:	220c      	movs	r2, #12
 80039c2:	4619      	mov	r1, r3
 80039c4:	4807      	ldr	r0, [pc, #28]	; (80039e4 <MX_TIM3_Init+0xf4>)
 80039c6:	f006 f939 	bl	8009c3c <HAL_TIM_PWM_ConfigChannel>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <MX_TIM3_Init+0xe4>
	{
		Error_Handler();
 80039d0:	f000 fa9c 	bl	8003f0c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80039d4:	4803      	ldr	r0, [pc, #12]	; (80039e4 <MX_TIM3_Init+0xf4>)
 80039d6:	f001 f82b 	bl	8004a30 <HAL_TIM_MspPostInit>

}
 80039da:	bf00      	nop
 80039dc:	3728      	adds	r7, #40	; 0x28
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	200003c4 	.word	0x200003c4
 80039e8:	40000400 	.word	0x40000400

080039ec <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b096      	sub	sp, #88	; 0x58
 80039f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	605a      	str	r2, [r3, #4]
 80039fc:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80039fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	605a      	str	r2, [r3, #4]
 8003a08:	609a      	str	r2, [r3, #8]
 8003a0a:	60da      	str	r2, [r3, #12]
 8003a0c:	611a      	str	r2, [r3, #16]
 8003a0e:	615a      	str	r2, [r3, #20]
 8003a10:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a12:	1d3b      	adds	r3, r7, #4
 8003a14:	222c      	movs	r2, #44	; 0x2c
 8003a16:	2100      	movs	r1, #0
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f007 fc09 	bl	800b230 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8003a1e:	4b40      	ldr	r3, [pc, #256]	; (8003b20 <MX_TIM8_Init+0x134>)
 8003a20:	4a40      	ldr	r2, [pc, #256]	; (8003b24 <MX_TIM8_Init+0x138>)
 8003a22:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 479;
 8003a24:	4b3e      	ldr	r3, [pc, #248]	; (8003b20 <MX_TIM8_Init+0x134>)
 8003a26:	f240 12df 	movw	r2, #479	; 0x1df
 8003a2a:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a2c:	4b3c      	ldr	r3, [pc, #240]	; (8003b20 <MX_TIM8_Init+0x134>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 1999;
 8003a32:	4b3b      	ldr	r3, [pc, #236]	; (8003b20 <MX_TIM8_Init+0x134>)
 8003a34:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003a38:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8003a3a:	4b39      	ldr	r3, [pc, #228]	; (8003b20 <MX_TIM8_Init+0x134>)
 8003a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a40:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8003a42:	4b37      	ldr	r3, [pc, #220]	; (8003b20 <MX_TIM8_Init+0x134>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a48:	4b35      	ldr	r3, [pc, #212]	; (8003b20 <MX_TIM8_Init+0x134>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003a4e:	4834      	ldr	r0, [pc, #208]	; (8003b20 <MX_TIM8_Init+0x134>)
 8003a50:	f005 ff50 	bl	80098f4 <HAL_TIM_PWM_Init>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <MX_TIM8_Init+0x72>
	{
		Error_Handler();
 8003a5a:	f000 fa57 	bl	8003f0c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003a62:	2300      	movs	r3, #0
 8003a64:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a66:	2300      	movs	r3, #0
 8003a68:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003a6a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a6e:	4619      	mov	r1, r3
 8003a70:	482b      	ldr	r0, [pc, #172]	; (8003b20 <MX_TIM8_Init+0x134>)
 8003a72:	f006 fd83 	bl	800a57c <HAL_TIMEx_MasterConfigSynchronization>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <MX_TIM8_Init+0x94>
	{
		Error_Handler();
 8003a7c:	f000 fa46 	bl	8003f0c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a80:	2360      	movs	r3, #96	; 0x60
 8003a82:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 150;
 8003a84:	2396      	movs	r3, #150	; 0x96
 8003a86:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a90:	2300      	movs	r3, #0
 8003a92:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a94:	2300      	movs	r3, #0
 8003a96:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	481e      	ldr	r0, [pc, #120]	; (8003b20 <MX_TIM8_Init+0x134>)
 8003aa6:	f006 f8c9 	bl	8009c3c <HAL_TIM_PWM_ConfigChannel>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <MX_TIM8_Init+0xc8>
	{
		Error_Handler();
 8003ab0:	f000 fa2c 	bl	8003f0c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ab4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ab8:	2204      	movs	r2, #4
 8003aba:	4619      	mov	r1, r3
 8003abc:	4818      	ldr	r0, [pc, #96]	; (8003b20 <MX_TIM8_Init+0x134>)
 8003abe:	f006 f8bd 	bl	8009c3c <HAL_TIM_PWM_ConfigChannel>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <MX_TIM8_Init+0xe0>
	{
		Error_Handler();
 8003ac8:	f000 fa20 	bl	8003f0c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003acc:	2300      	movs	r3, #0
 8003ace:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003adc:	2300      	movs	r3, #0
 8003ade:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003ae0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ae4:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003aea:	2300      	movs	r3, #0
 8003aec:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003aee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003af8:	2300      	movs	r3, #0
 8003afa:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003afc:	1d3b      	adds	r3, r7, #4
 8003afe:	4619      	mov	r1, r3
 8003b00:	4807      	ldr	r0, [pc, #28]	; (8003b20 <MX_TIM8_Init+0x134>)
 8003b02:	f006 fdbb 	bl	800a67c <HAL_TIMEx_ConfigBreakDeadTime>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <MX_TIM8_Init+0x124>
	{
		Error_Handler();
 8003b0c:	f000 f9fe 	bl	8003f0c <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8003b10:	4803      	ldr	r0, [pc, #12]	; (8003b20 <MX_TIM8_Init+0x134>)
 8003b12:	f000 ff8d 	bl	8004a30 <HAL_TIM_MspPostInit>

}
 8003b16:	bf00      	nop
 8003b18:	3758      	adds	r7, #88	; 0x58
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	20000240 	.word	0x20000240
 8003b24:	40013400 	.word	0x40013400

08003b28 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8003b2c:	4b14      	ldr	r3, [pc, #80]	; (8003b80 <MX_UART5_Init+0x58>)
 8003b2e:	4a15      	ldr	r2, [pc, #84]	; (8003b84 <MX_UART5_Init+0x5c>)
 8003b30:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 8003b32:	4b13      	ldr	r3, [pc, #76]	; (8003b80 <MX_UART5_Init+0x58>)
 8003b34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b38:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003b3a:	4b11      	ldr	r3, [pc, #68]	; (8003b80 <MX_UART5_Init+0x58>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8003b40:	4b0f      	ldr	r3, [pc, #60]	; (8003b80 <MX_UART5_Init+0x58>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 8003b46:	4b0e      	ldr	r3, [pc, #56]	; (8003b80 <MX_UART5_Init+0x58>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8003b4c:	4b0c      	ldr	r3, [pc, #48]	; (8003b80 <MX_UART5_Init+0x58>)
 8003b4e:	220c      	movs	r2, #12
 8003b50:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b52:	4b0b      	ldr	r3, [pc, #44]	; (8003b80 <MX_UART5_Init+0x58>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b58:	4b09      	ldr	r3, [pc, #36]	; (8003b80 <MX_UART5_Init+0x58>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	61da      	str	r2, [r3, #28]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b5e:	4b08      	ldr	r3, [pc, #32]	; (8003b80 <MX_UART5_Init+0x58>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	621a      	str	r2, [r3, #32]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b64:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <MX_UART5_Init+0x58>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart5) != HAL_OK)
 8003b6a:	4805      	ldr	r0, [pc, #20]	; (8003b80 <MX_UART5_Init+0x58>)
 8003b6c:	f006 fe04 	bl	800a778 <HAL_UART_Init>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <MX_UART5_Init+0x52>
	{
		Error_Handler();
 8003b76:	f000 f9c9 	bl	8003f0c <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 8003b7a:	bf00      	nop
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	20000494 	.word	0x20000494
 8003b84:	40005000 	.word	0x40005000

08003b88 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8003b8c:	4b14      	ldr	r3, [pc, #80]	; (8003be0 <MX_USART1_UART_Init+0x58>)
 8003b8e:	4a15      	ldr	r2, [pc, #84]	; (8003be4 <MX_USART1_UART_Init+0x5c>)
 8003b90:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 38400;
 8003b92:	4b13      	ldr	r3, [pc, #76]	; (8003be0 <MX_USART1_UART_Init+0x58>)
 8003b94:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8003b98:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b9a:	4b11      	ldr	r3, [pc, #68]	; (8003be0 <MX_USART1_UART_Init+0x58>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8003ba0:	4b0f      	ldr	r3, [pc, #60]	; (8003be0 <MX_USART1_UART_Init+0x58>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8003ba6:	4b0e      	ldr	r3, [pc, #56]	; (8003be0 <MX_USART1_UART_Init+0x58>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003bac:	4b0c      	ldr	r3, [pc, #48]	; (8003be0 <MX_USART1_UART_Init+0x58>)
 8003bae:	220c      	movs	r2, #12
 8003bb0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bb2:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <MX_USART1_UART_Init+0x58>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bb8:	4b09      	ldr	r3, [pc, #36]	; (8003be0 <MX_USART1_UART_Init+0x58>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003bbe:	4b08      	ldr	r3, [pc, #32]	; (8003be0 <MX_USART1_UART_Init+0x58>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003bc4:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <MX_USART1_UART_Init+0x58>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8003bca:	4805      	ldr	r0, [pc, #20]	; (8003be0 <MX_USART1_UART_Init+0x58>)
 8003bcc:	f006 fdd4 	bl	800a778 <HAL_UART_Init>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 8003bd6:	f000 f999 	bl	8003f0c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8003bda:	bf00      	nop
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	2000056c 	.word	0x2000056c
 8003be4:	40013800 	.word	0x40013800

08003be8 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8003bec:	4b14      	ldr	r3, [pc, #80]	; (8003c40 <MX_USART2_UART_Init+0x58>)
 8003bee:	4a15      	ldr	r2, [pc, #84]	; (8003c44 <MX_USART2_UART_Init+0x5c>)
 8003bf0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 38400;
 8003bf2:	4b13      	ldr	r3, [pc, #76]	; (8003c40 <MX_USART2_UART_Init+0x58>)
 8003bf4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8003bf8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003bfa:	4b11      	ldr	r3, [pc, #68]	; (8003c40 <MX_USART2_UART_Init+0x58>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003c00:	4b0f      	ldr	r3, [pc, #60]	; (8003c40 <MX_USART2_UART_Init+0x58>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8003c06:	4b0e      	ldr	r3, [pc, #56]	; (8003c40 <MX_USART2_UART_Init+0x58>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003c0c:	4b0c      	ldr	r3, [pc, #48]	; (8003c40 <MX_USART2_UART_Init+0x58>)
 8003c0e:	220c      	movs	r2, #12
 8003c10:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c12:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <MX_USART2_UART_Init+0x58>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c18:	4b09      	ldr	r3, [pc, #36]	; (8003c40 <MX_USART2_UART_Init+0x58>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c1e:	4b08      	ldr	r3, [pc, #32]	; (8003c40 <MX_USART2_UART_Init+0x58>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c24:	4b06      	ldr	r3, [pc, #24]	; (8003c40 <MX_USART2_UART_Init+0x58>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8003c2a:	4805      	ldr	r0, [pc, #20]	; (8003c40 <MX_USART2_UART_Init+0x58>)
 8003c2c:	f006 fda4 	bl	800a778 <HAL_UART_Init>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8003c36:	f000 f969 	bl	8003f0c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8003c3a:	bf00      	nop
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	20000728 	.word	0x20000728
 8003c44:	40004400 	.word	0x40004400

08003c48 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8003c4c:	4b1e      	ldr	r3, [pc, #120]	; (8003cc8 <MX_USART3_UART_Init+0x80>)
 8003c4e:	4a1f      	ldr	r2, [pc, #124]	; (8003ccc <MX_USART3_UART_Init+0x84>)
 8003c50:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 100000;
 8003c52:	4b1d      	ldr	r3, [pc, #116]	; (8003cc8 <MX_USART3_UART_Init+0x80>)
 8003c54:	4a1e      	ldr	r2, [pc, #120]	; (8003cd0 <MX_USART3_UART_Init+0x88>)
 8003c56:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_9B;
 8003c58:	4b1b      	ldr	r3, [pc, #108]	; (8003cc8 <MX_USART3_UART_Init+0x80>)
 8003c5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c5e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_2;
 8003c60:	4b19      	ldr	r3, [pc, #100]	; (8003cc8 <MX_USART3_UART_Init+0x80>)
 8003c62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c66:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_EVEN;
 8003c68:	4b17      	ldr	r3, [pc, #92]	; (8003cc8 <MX_USART3_UART_Init+0x80>)
 8003c6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c6e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_RX;
 8003c70:	4b15      	ldr	r3, [pc, #84]	; (8003cc8 <MX_USART3_UART_Init+0x80>)
 8003c72:	2204      	movs	r2, #4
 8003c74:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c76:	4b14      	ldr	r3, [pc, #80]	; (8003cc8 <MX_USART3_UART_Init+0x80>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c7c:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <MX_USART3_UART_Init+0x80>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c82:	4b11      	ldr	r3, [pc, #68]	; (8003cc8 <MX_USART3_UART_Init+0x80>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT|UART_ADVFEATURE_RXINVERT_INIT
 8003c88:	4b0f      	ldr	r3, [pc, #60]	; (8003cc8 <MX_USART3_UART_Init+0x80>)
 8003c8a:	2233      	movs	r2, #51	; 0x33
 8003c8c:	625a      	str	r2, [r3, #36]	; 0x24
			|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
	huart3.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 8003c8e:	4b0e      	ldr	r3, [pc, #56]	; (8003cc8 <MX_USART3_UART_Init+0x80>)
 8003c90:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c94:	629a      	str	r2, [r3, #40]	; 0x28
	huart3.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 8003c96:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <MX_USART3_UART_Init+0x80>)
 8003c98:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003c9c:	62da      	str	r2, [r3, #44]	; 0x2c
	huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003c9e:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <MX_USART3_UART_Init+0x80>)
 8003ca0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ca4:	639a      	str	r2, [r3, #56]	; 0x38
	huart3.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8003ca6:	4b08      	ldr	r3, [pc, #32]	; (8003cc8 <MX_USART3_UART_Init+0x80>)
 8003ca8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cac:	63da      	str	r2, [r3, #60]	; 0x3c
	if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8003cae:	2300      	movs	r3, #0
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	4804      	ldr	r0, [pc, #16]	; (8003cc8 <MX_USART3_UART_Init+0x80>)
 8003cb6:	f007 f9ee 	bl	800b096 <HAL_RS485Ex_Init>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <MX_USART3_UART_Init+0x7c>
	{
		Error_Handler();
 8003cc0:	f000 f924 	bl	8003f0c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8003cc4:	bf00      	nop
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	2000028c 	.word	0x2000028c
 8003ccc:	40004800 	.word	0x40004800
 8003cd0:	000186a0 	.word	0x000186a0

08003cd4 <MX_USB_PCD_Init>:
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
	/* USER CODE END USB_Init 0 */

	/* USER CODE BEGIN USB_Init 1 */

	/* USER CODE END USB_Init 1 */
	hpcd_USB_FS.Instance = USB;
 8003cd8:	4b0d      	ldr	r3, [pc, #52]	; (8003d10 <MX_USB_PCD_Init+0x3c>)
 8003cda:	4a0e      	ldr	r2, [pc, #56]	; (8003d14 <MX_USB_PCD_Init+0x40>)
 8003cdc:	601a      	str	r2, [r3, #0]
	hpcd_USB_FS.Init.dev_endpoints = 8;
 8003cde:	4b0c      	ldr	r3, [pc, #48]	; (8003d10 <MX_USB_PCD_Init+0x3c>)
 8003ce0:	2208      	movs	r2, #8
 8003ce2:	605a      	str	r2, [r3, #4]
	hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003ce4:	4b0a      	ldr	r3, [pc, #40]	; (8003d10 <MX_USB_PCD_Init+0x3c>)
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	609a      	str	r2, [r3, #8]
	hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003cea:	4b09      	ldr	r3, [pc, #36]	; (8003d10 <MX_USB_PCD_Init+0x3c>)
 8003cec:	2202      	movs	r2, #2
 8003cee:	611a      	str	r2, [r3, #16]
	hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003cf0:	4b07      	ldr	r3, [pc, #28]	; (8003d10 <MX_USB_PCD_Init+0x3c>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	619a      	str	r2, [r3, #24]
	hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003cf6:	4b06      	ldr	r3, [pc, #24]	; (8003d10 <MX_USB_PCD_Init+0x3c>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	621a      	str	r2, [r3, #32]
	if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003cfc:	4804      	ldr	r0, [pc, #16]	; (8003d10 <MX_USB_PCD_Init+0x3c>)
 8003cfe:	f003 fc9c 	bl	800763a <HAL_PCD_Init>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <MX_USB_PCD_Init+0x38>
	{
		Error_Handler();
 8003d08:	f000 f900 	bl	8003f0c <Error_Handler>
	}
	/* USER CODE BEGIN USB_Init 2 */

	/* USER CODE END USB_Init 2 */

}
 8003d0c:	bf00      	nop
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	200007b0 	.word	0x200007b0
 8003d14:	40005c00 	.word	0x40005c00

08003d18 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08c      	sub	sp, #48	; 0x30
 8003d1c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d1e:	f107 031c 	add.w	r3, r7, #28
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	605a      	str	r2, [r3, #4]
 8003d28:	609a      	str	r2, [r3, #8]
 8003d2a:	60da      	str	r2, [r3, #12]
 8003d2c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8003d2e:	4b71      	ldr	r3, [pc, #452]	; (8003ef4 <MX_GPIO_Init+0x1dc>)
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	4a70      	ldr	r2, [pc, #448]	; (8003ef4 <MX_GPIO_Init+0x1dc>)
 8003d34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d38:	6153      	str	r3, [r2, #20]
 8003d3a:	4b6e      	ldr	r3, [pc, #440]	; (8003ef4 <MX_GPIO_Init+0x1dc>)
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d42:	61bb      	str	r3, [r7, #24]
 8003d44:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003d46:	4b6b      	ldr	r3, [pc, #428]	; (8003ef4 <MX_GPIO_Init+0x1dc>)
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	4a6a      	ldr	r2, [pc, #424]	; (8003ef4 <MX_GPIO_Init+0x1dc>)
 8003d4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d50:	6153      	str	r3, [r2, #20]
 8003d52:	4b68      	ldr	r3, [pc, #416]	; (8003ef4 <MX_GPIO_Init+0x1dc>)
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d5a:	617b      	str	r3, [r7, #20]
 8003d5c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8003d5e:	4b65      	ldr	r3, [pc, #404]	; (8003ef4 <MX_GPIO_Init+0x1dc>)
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	4a64      	ldr	r2, [pc, #400]	; (8003ef4 <MX_GPIO_Init+0x1dc>)
 8003d64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d68:	6153      	str	r3, [r2, #20]
 8003d6a:	4b62      	ldr	r3, [pc, #392]	; (8003ef4 <MX_GPIO_Init+0x1dc>)
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d72:	613b      	str	r3, [r7, #16]
 8003d74:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003d76:	4b5f      	ldr	r3, [pc, #380]	; (8003ef4 <MX_GPIO_Init+0x1dc>)
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	4a5e      	ldr	r2, [pc, #376]	; (8003ef4 <MX_GPIO_Init+0x1dc>)
 8003d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d80:	6153      	str	r3, [r2, #20]
 8003d82:	4b5c      	ldr	r3, [pc, #368]	; (8003ef4 <MX_GPIO_Init+0x1dc>)
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003d8e:	4b59      	ldr	r3, [pc, #356]	; (8003ef4 <MX_GPIO_Init+0x1dc>)
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	4a58      	ldr	r2, [pc, #352]	; (8003ef4 <MX_GPIO_Init+0x1dc>)
 8003d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d98:	6153      	str	r3, [r2, #20]
 8003d9a:	4b56      	ldr	r3, [pc, #344]	; (8003ef4 <MX_GPIO_Init+0x1dc>)
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003da2:	60bb      	str	r3, [r7, #8]
 8003da4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003da6:	4b53      	ldr	r3, [pc, #332]	; (8003ef4 <MX_GPIO_Init+0x1dc>)
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	4a52      	ldr	r2, [pc, #328]	; (8003ef4 <MX_GPIO_Init+0x1dc>)
 8003dac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003db0:	6153      	str	r3, [r2, #20]
 8003db2:	4b50      	ldr	r3, [pc, #320]	; (8003ef4 <MX_GPIO_Init+0x1dc>)
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dba:	607b      	str	r3, [r7, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|GPIO_PIN_10
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f64f 7108 	movw	r1, #65288	; 0xff08
 8003dc4:	484c      	ldr	r0, [pc, #304]	; (8003ef8 <MX_GPIO_Init+0x1e0>)
 8003dc6:	f002 fc49 	bl	800665c <HAL_GPIO_WritePin>
			|LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
			|LD6_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8003dca:	2200      	movs	r2, #0
 8003dcc:	2110      	movs	r1, #16
 8003dce:	484b      	ldr	r0, [pc, #300]	; (8003efc <MX_GPIO_Init+0x1e4>)
 8003dd0:	f002 fc44 	bl	800665c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GRAB_DIR_Pin|ROT_DIR_Pin, GPIO_PIN_RESET);
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8003dda:	4849      	ldr	r0, [pc, #292]	; (8003f00 <MX_GPIO_Init+0x1e8>)
 8003ddc:	f002 fc3e 	bl	800665c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, ROT_ENABLE_Pin|GRAB_ENABLE_Pin, GPIO_PIN_SET);
 8003de0:	2201      	movs	r2, #1
 8003de2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003de6:	4847      	ldr	r0, [pc, #284]	; (8003f04 <MX_GPIO_Init+0x1ec>)
 8003de8:	f002 fc38 	bl	800665c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, MAN_EN1_Pin|CS_SPI3_Pin, GPIO_PIN_RESET);
 8003dec:	2200      	movs	r2, #0
 8003dee:	f244 0101 	movw	r1, #16385	; 0x4001
 8003df2:	4844      	ldr	r0, [pc, #272]	; (8003f04 <MX_GPIO_Init+0x1ec>)
 8003df4:	f002 fc32 	bl	800665c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_RESET);
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003dfe:	4842      	ldr	r0, [pc, #264]	; (8003f08 <MX_GPIO_Init+0x1f0>)
 8003e00:	f002 fc2c 	bl	800665c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8003e04:	2337      	movs	r3, #55	; 0x37
 8003e06:	61fb      	str	r3, [r7, #28]
			|MEMS_INT2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003e08:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8003e0c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e12:	f107 031c 	add.w	r3, r7, #28
 8003e16:	4619      	mov	r1, r3
 8003e18:	4837      	ldr	r0, [pc, #220]	; (8003ef8 <MX_GPIO_Init+0x1e0>)
 8003e1a:	f002 fa8d 	bl	8006338 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin PE10
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|GPIO_PIN_10
 8003e1e:	f64f 7308 	movw	r3, #65288	; 0xff08
 8003e22:	61fb      	str	r3, [r7, #28]
			|LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
			|LD6_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e24:	2301      	movs	r3, #1
 8003e26:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e30:	f107 031c 	add.w	r3, r7, #28
 8003e34:	4619      	mov	r1, r3
 8003e36:	4830      	ldr	r0, [pc, #192]	; (8003ef8 <MX_GPIO_Init+0x1e0>)
 8003e38:	f002 fa7e 	bl	8006338 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e40:	2300      	movs	r3, #0
 8003e42:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e44:	2300      	movs	r3, #0
 8003e46:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003e48:	f107 031c 	add.w	r3, r7, #28
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e52:	f002 fa71 	bl	8006338 <HAL_GPIO_Init>

	/*Configure GPIO pin : PF4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003e56:	2310      	movs	r3, #16
 8003e58:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e62:	2300      	movs	r3, #0
 8003e64:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e66:	f107 031c 	add.w	r3, r7, #28
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4823      	ldr	r0, [pc, #140]	; (8003efc <MX_GPIO_Init+0x1e4>)
 8003e6e:	f002 fa63 	bl	8006338 <HAL_GPIO_Init>

	/*Configure GPIO pins : GRAB_DIR_Pin ROT_DIR_Pin */
	GPIO_InitStruct.Pin = GRAB_DIR_Pin|ROT_DIR_Pin;
 8003e72:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003e76:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e80:	2300      	movs	r3, #0
 8003e82:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e84:	f107 031c 	add.w	r3, r7, #28
 8003e88:	4619      	mov	r1, r3
 8003e8a:	481d      	ldr	r0, [pc, #116]	; (8003f00 <MX_GPIO_Init+0x1e8>)
 8003e8c:	f002 fa54 	bl	8006338 <HAL_GPIO_Init>

	/*Configure GPIO pins : ROT_ENABLE_Pin GRAB_ENABLE_Pin */
	GPIO_InitStruct.Pin = ROT_ENABLE_Pin|GRAB_ENABLE_Pin;
 8003e90:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003e94:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e96:	2301      	movs	r3, #1
 8003e98:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ea2:	f107 031c 	add.w	r3, r7, #28
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	4816      	ldr	r0, [pc, #88]	; (8003f04 <MX_GPIO_Init+0x1ec>)
 8003eaa:	f002 fa45 	bl	8006338 <HAL_GPIO_Init>

	/*Configure GPIO pins : MAN_EN1_Pin CS_SPI3_Pin */
	GPIO_InitStruct.Pin = MAN_EN1_Pin|CS_SPI3_Pin;
 8003eae:	f244 0301 	movw	r3, #16385	; 0x4001
 8003eb2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ec0:	f107 031c 	add.w	r3, r7, #28
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	480f      	ldr	r0, [pc, #60]	; (8003f04 <MX_GPIO_Init+0x1ec>)
 8003ec8:	f002 fa36 	bl	8006338 <HAL_GPIO_Init>

	/*Configure GPIO pin : POWER_ON_Pin */
	GPIO_InitStruct.Pin = POWER_ON_Pin;
 8003ecc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ed0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eda:	2300      	movs	r3, #0
 8003edc:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 8003ede:	f107 031c 	add.w	r3, r7, #28
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	4808      	ldr	r0, [pc, #32]	; (8003f08 <MX_GPIO_Init+0x1f0>)
 8003ee6:	f002 fa27 	bl	8006338 <HAL_GPIO_Init>

}
 8003eea:	bf00      	nop
 8003eec:	3730      	adds	r7, #48	; 0x30
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	48001000 	.word	0x48001000
 8003efc:	48001400 	.word	0x48001400
 8003f00:	48000400 	.word	0x48000400
 8003f04:	48000c00 	.word	0x48000c00
 8003f08:	48000800 	.word	0x48000800

08003f0c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f10:	b672      	cpsid	i
}
 8003f12:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003f14:	e7fe      	b.n	8003f14 <Error_Handler+0x8>
	...

08003f18 <spiReadMax7456Register>:
////////////////////////////////////////////////////////////////////////////////
// SPI Read MAX7456 Register
///////////////////////////////////////////////////////////////////////////////

uint8_t spiReadMax7456Register(uint8_t r)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af02      	add	r7, sp, #8
 8003f1e:	4603      	mov	r3, r0
 8003f20:	71fb      	strb	r3, [r7, #7]
	uint8_t datarec = 0;
 8003f22:	2300      	movs	r3, #0
 8003f24:	73fb      	strb	r3, [r7, #15]
	uint8_t state;
	uint8_t buffer_trans[2] = {r,0x00};
 8003f26:	79fb      	ldrb	r3, [r7, #7]
 8003f28:	733b      	strb	r3, [r7, #12]
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	737b      	strb	r3, [r7, #13]
	HAL_SPI_TransmitReceive(&hspi3, (uint8_t*)buffer_trans, datarec, 2, 10);
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
 8003f30:	461a      	mov	r2, r3
 8003f32:	f107 010c 	add.w	r1, r7, #12
 8003f36:	230a      	movs	r3, #10
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	4803      	ldr	r0, [pc, #12]	; (8003f4c <spiReadMax7456Register+0x34>)
 8003f3e:	f005 f962 	bl	8009206 <HAL_SPI_TransmitReceive>
    return datarec;
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	20000410 	.word	0x20000410

08003f50 <spiWriteMax7456Register>:
///////////////////////////////////////////////////////////////////////////////
// SPI Write MAX7456 Register
///////////////////////////////////////////////////////////////////////////////

void spiWriteMax7456Register(uint8_t r, uint8_t d)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	4603      	mov	r3, r0
 8003f58:	460a      	mov	r2, r1
 8003f5a:	71fb      	strb	r3, [r7, #7]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer_trans[2] = {r,d};
 8003f60:	79fb      	ldrb	r3, [r7, #7]
 8003f62:	733b      	strb	r3, [r7, #12]
 8003f64:	79bb      	ldrb	r3, [r7, #6]
 8003f66:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&hspi3, buffer_trans, 2, 10);
 8003f68:	f107 010c 	add.w	r1, r7, #12
 8003f6c:	230a      	movs	r3, #10
 8003f6e:	2202      	movs	r2, #2
 8003f70:	4803      	ldr	r0, [pc, #12]	; (8003f80 <spiWriteMax7456Register+0x30>)
 8003f72:	f004 ffda 	bl	8008f2a <HAL_SPI_Transmit>
}
 8003f76:	bf00      	nop
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	20000410 	.word	0x20000410

08003f84 <unhideOSD>:
///////////////////////////////////////////////////////////////////////////////
// Unhide OSD Display
///////////////////////////////////////////////////////////////////////////////

void unhideOSD()
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  if (osdDisabled)
 8003f88:	4b0c      	ldr	r3, [pc, #48]	; (8003fbc <unhideOSD+0x38>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d012      	beq.n	8003fb6 <unhideOSD+0x32>
  {
    ENABLE_MAX7456;
 8003f90:	2200      	movs	r2, #0
 8003f92:	2101      	movs	r1, #1
 8003f94:	480a      	ldr	r0, [pc, #40]	; (8003fc0 <unhideOSD+0x3c>)
 8003f96:	f002 fb61 	bl	800665c <HAL_GPIO_WritePin>

    spiWriteMax7456Register(VM0_REG, enableDisplay);
 8003f9a:	4b0a      	ldr	r3, [pc, #40]	; (8003fc4 <unhideOSD+0x40>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	2000      	movs	r0, #0
 8003fa2:	f7ff ffd5 	bl	8003f50 <spiWriteMax7456Register>

    DISABLE_MAX7456;
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	2101      	movs	r1, #1
 8003faa:	4805      	ldr	r0, [pc, #20]	; (8003fc0 <unhideOSD+0x3c>)
 8003fac:	f002 fb56 	bl	800665c <HAL_GPIO_WritePin>

    osdDisabled = 0;
 8003fb0:	4b02      	ldr	r3, [pc, #8]	; (8003fbc <unhideOSD+0x38>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	701a      	strb	r2, [r3, #0]
  }
}
 8003fb6:	bf00      	nop
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	200001dc 	.word	0x200001dc
 8003fc0:	48000c00 	.word	0x48000c00
 8003fc4:	200001e2 	.word	0x200001e2

08003fc8 <writeMax7456Chars>:
// - will wrap around to next row if 'len' is greater than the remaining cols in row y
// - buf=NULL or len>strlen(buf) can be used to write zeroes (clear)
// - flags: 0x01 blink, 0x02 invert (can be combined)

void writeMax7456Chars( const char* buf, uint8_t len, uint8_t flags, uint8_t y, uint8_t x)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	4608      	mov	r0, r1
 8003fd2:	4611      	mov	r1, r2
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	70fb      	strb	r3, [r7, #3]
 8003fda:	460b      	mov	r3, r1
 8003fdc:	70bb      	strb	r3, [r7, #2]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	707b      	strb	r3, [r7, #1]
    uint8_t  i;
    uint16_t offset = y * 30 + x;
 8003fe2:	787b      	ldrb	r3, [r7, #1]
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	0112      	lsls	r2, r2, #4
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	7e3b      	ldrb	r3, [r7, #24]
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	4413      	add	r3, r2
 8003ff6:	81bb      	strh	r3, [r7, #12]

    if (flags)
 8003ff8:	78bb      	ldrb	r3, [r7, #2]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <writeMax7456Chars+0x3a>
        unhideOSD(); // make sure OSD is visible in case of alarms etc.
 8003ffe:	f7ff ffc1 	bl	8003f84 <unhideOSD>

    ENABLE_MAX7456;
 8004002:	2200      	movs	r2, #0
 8004004:	2101      	movs	r1, #1
 8004006:	482d      	ldr	r0, [pc, #180]	; (80040bc <writeMax7456Chars+0xf4>)
 8004008:	f002 fb28 	bl	800665c <HAL_GPIO_WritePin>

    // 16bit transfer, transparent BG, autoincrement mode (if len!=1)
    spiWriteMax7456Register(DMM_REG, ((flags & 1) ? 0x10 : 0x00) | ((flags & 2) ? 0x08 : 0x00) | ((len != 1) ? 0x01 : 0x00));
 800400c:	78bb      	ldrb	r3, [r7, #2]
 800400e:	011b      	lsls	r3, r3, #4
 8004010:	b25b      	sxtb	r3, r3
 8004012:	f003 0310 	and.w	r3, r3, #16
 8004016:	b25a      	sxtb	r2, r3
 8004018:	78bb      	ldrb	r3, [r7, #2]
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	b25b      	sxtb	r3, r3
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	b25b      	sxtb	r3, r3
 8004024:	4313      	orrs	r3, r2
 8004026:	b25a      	sxtb	r2, r3
 8004028:	78fb      	ldrb	r3, [r7, #3]
 800402a:	2b01      	cmp	r3, #1
 800402c:	bf14      	ite	ne
 800402e:	2301      	movne	r3, #1
 8004030:	2300      	moveq	r3, #0
 8004032:	b2db      	uxtb	r3, r3
 8004034:	b25b      	sxtb	r3, r3
 8004036:	4313      	orrs	r3, r2
 8004038:	b25b      	sxtb	r3, r3
 800403a:	b2db      	uxtb	r3, r3
 800403c:	4619      	mov	r1, r3
 800403e:	2004      	movs	r0, #4
 8004040:	f7ff ff86 	bl	8003f50 <spiWriteMax7456Register>

    // send starting display memory address (position of text)
    spiWriteMax7456Register(DMAH_REG, offset >> 8 );
 8004044:	89bb      	ldrh	r3, [r7, #12]
 8004046:	0a1b      	lsrs	r3, r3, #8
 8004048:	b29b      	uxth	r3, r3
 800404a:	b2db      	uxtb	r3, r3
 800404c:	4619      	mov	r1, r3
 800404e:	2005      	movs	r0, #5
 8004050:	f7ff ff7e 	bl	8003f50 <spiWriteMax7456Register>
    spiWriteMax7456Register(DMAL_REG, offset & 0xFF );
 8004054:	89bb      	ldrh	r3, [r7, #12]
 8004056:	b2db      	uxtb	r3, r3
 8004058:	4619      	mov	r1, r3
 800405a:	2006      	movs	r0, #6
 800405c:	f7ff ff78 	bl	8003f50 <spiWriteMax7456Register>

    // write out data
    for (i = 0; i < len; i++)
 8004060:	2300      	movs	r3, #0
 8004062:	73fb      	strb	r3, [r7, #15]
 8004064:	e016      	b.n	8004094 <writeMax7456Chars+0xcc>
        spiWriteMax7456Register(DMDI_REG, (!buf || strlen(buf) < i) ? 0 : buf[i]);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00b      	beq.n	8004084 <writeMax7456Chars+0xbc>
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f7fc f8af 	bl	80001d0 <strlen>
 8004072:	4602      	mov	r2, r0
 8004074:	7bfb      	ldrb	r3, [r7, #15]
 8004076:	429a      	cmp	r2, r3
 8004078:	d304      	bcc.n	8004084 <writeMax7456Chars+0xbc>
 800407a:	7bfb      	ldrb	r3, [r7, #15]
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	4413      	add	r3, r2
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	e000      	b.n	8004086 <writeMax7456Chars+0xbe>
 8004084:	2300      	movs	r3, #0
 8004086:	4619      	mov	r1, r3
 8004088:	2007      	movs	r0, #7
 800408a:	f7ff ff61 	bl	8003f50 <spiWriteMax7456Register>
    for (i = 0; i < len; i++)
 800408e:	7bfb      	ldrb	r3, [r7, #15]
 8004090:	3301      	adds	r3, #1
 8004092:	73fb      	strb	r3, [r7, #15]
 8004094:	7bfa      	ldrb	r2, [r7, #15]
 8004096:	78fb      	ldrb	r3, [r7, #3]
 8004098:	429a      	cmp	r2, r3
 800409a:	d3e4      	bcc.n	8004066 <writeMax7456Chars+0x9e>


    // Send escape 11111111 to exit autoincrement mode
    if (len != 1)
 800409c:	78fb      	ldrb	r3, [r7, #3]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d003      	beq.n	80040aa <writeMax7456Chars+0xe2>
        spiWriteMax7456Register(DMDI_REG, END_STRING);
 80040a2:	21ff      	movs	r1, #255	; 0xff
 80040a4:	2007      	movs	r0, #7
 80040a6:	f7ff ff53 	bl	8003f50 <spiWriteMax7456Register>

    // finished writing

    DISABLE_MAX7456;
 80040aa:	2201      	movs	r2, #1
 80040ac:	2101      	movs	r1, #1
 80040ae:	4803      	ldr	r0, [pc, #12]	; (80040bc <writeMax7456Chars+0xf4>)
 80040b0:	f002 fad4 	bl	800665c <HAL_GPIO_WritePin>
}
 80040b4:	bf00      	nop
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	48000c00 	.word	0x48000c00

080040c0 <detectVideoStandard>:
///////////////////////////////////////////////////////////////////////////////
// Detect Video Standard
///////////////////////////////////////////////////////////////////////////////

void detectVideoStandard()
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
    // First set the default
    uint8_t pal = 0;
 80040c6:	2300      	movs	r3, #0
 80040c8:	71fb      	strb	r3, [r7, #7]
    uint8_t stat = 0xff;
 80040ca:	23ff      	movs	r3, #255	; 0xff
 80040cc:	71bb      	strb	r3, [r7, #6]

    pal = AUTO;
 80040ce:	2302      	movs	r3, #2
 80040d0:	71fb      	strb	r3, [r7, #7]

    // if autodetect enabled modify the default if signal is present on either standard
    // otherwise default is preserved

	if (pal == AUTO) 
 80040d2:	79fb      	ldrb	r3, [r7, #7]
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d124      	bne.n	8004122 <detectVideoStandard+0x62>
	{
		ENABLE_MAX7456;
 80040d8:	2200      	movs	r2, #0
 80040da:	2101      	movs	r1, #1
 80040dc:	4828      	ldr	r0, [pc, #160]	; (8004180 <detectVideoStandard+0xc0>)
 80040de:	f002 fabd 	bl	800665c <HAL_GPIO_WritePin>

		stat = spiReadMax7456Register(STAT_REG);
 80040e2:	20a0      	movs	r0, #160	; 0xa0
 80040e4:	f7ff ff18 	bl	8003f18 <spiReadMax7456Register>
 80040e8:	4603      	mov	r3, r0
 80040ea:	71bb      	strb	r3, [r7, #6]

		DISABLE_MAX7456;
 80040ec:	2201      	movs	r2, #1
 80040ee:	2101      	movs	r1, #1
 80040f0:	4823      	ldr	r0, [pc, #140]	; (8004180 <detectVideoStandard+0xc0>)
 80040f2:	f002 fab3 	bl	800665c <HAL_GPIO_WritePin>

		if (stat & 0x01)
 80040f6:	79bb      	ldrb	r3, [r7, #6]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <detectVideoStandard+0x44>
			pal = PAL;
 8004100:	2301      	movs	r3, #1
 8004102:	71fb      	strb	r3, [r7, #7]

		if (stat & 0x02)
 8004104:	79bb      	ldrb	r3, [r7, #6]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <detectVideoStandard+0x52>
			pal = NTSC;
 800410e:	2300      	movs	r3, #0
 8004110:	71fb      	strb	r3, [r7, #7]
			
		if ((pal != PAL) && (pal != NTSC))
 8004112:	79fb      	ldrb	r3, [r7, #7]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d004      	beq.n	8004122 <detectVideoStandard+0x62>
 8004118:	79fb      	ldrb	r3, [r7, #7]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <detectVideoStandard+0x62>
			pal = PAL;
 800411e:	2301      	movs	r3, #1
 8004120:	71fb      	strb	r3, [r7, #7]
	}

    if (pal)
 8004122:	79fb      	ldrb	r3, [r7, #7]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d013      	beq.n	8004150 <detectVideoStandard+0x90>
    {
        maxScreenSize     = 480;
 8004128:	4b16      	ldr	r3, [pc, #88]	; (8004184 <detectVideoStandard+0xc4>)
 800412a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800412e:	801a      	strh	r2, [r3, #0]
        maxScreenRows     = 16;
 8004130:	4b15      	ldr	r3, [pc, #84]	; (8004188 <detectVideoStandard+0xc8>)
 8004132:	2210      	movs	r2, #16
 8004134:	801a      	strh	r2, [r3, #0]
        enableDisplay     = 0x48;
 8004136:	4b15      	ldr	r3, [pc, #84]	; (800418c <detectVideoStandard+0xcc>)
 8004138:	2248      	movs	r2, #72	; 0x48
 800413a:	701a      	strb	r2, [r3, #0]
        enableDisplayVert = 0x4C;
 800413c:	4b14      	ldr	r3, [pc, #80]	; (8004190 <detectVideoStandard+0xd0>)
 800413e:	224c      	movs	r2, #76	; 0x4c
 8004140:	701a      	strb	r2, [r3, #0]
        max7456Reset      = 0x42;
 8004142:	4b14      	ldr	r3, [pc, #80]	; (8004194 <detectVideoStandard+0xd4>)
 8004144:	2242      	movs	r2, #66	; 0x42
 8004146:	701a      	strb	r2, [r3, #0]
        disableDisplay    = 0x40;
 8004148:	4b13      	ldr	r3, [pc, #76]	; (8004198 <detectVideoStandard+0xd8>)
 800414a:	2240      	movs	r2, #64	; 0x40
 800414c:	701a      	strb	r2, [r3, #0]
//    // Attitude Display Parameters
//
//    aiTopPixel    = (reticleRow - AI_DISPLAY_RECT_HEIGHT / 2) * 18;
//    aiBottomPixel = (reticleRow + AI_DISPLAY_RECT_HEIGHT / 2) * 18;
//    aiCenter      =  reticleRow * 18 + 10;
}
 800414e:	e012      	b.n	8004176 <detectVideoStandard+0xb6>
        maxScreenSize     = 390;
 8004150:	4b0c      	ldr	r3, [pc, #48]	; (8004184 <detectVideoStandard+0xc4>)
 8004152:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8004156:	801a      	strh	r2, [r3, #0]
        maxScreenRows     = 13;
 8004158:	4b0b      	ldr	r3, [pc, #44]	; (8004188 <detectVideoStandard+0xc8>)
 800415a:	220d      	movs	r2, #13
 800415c:	801a      	strh	r2, [r3, #0]
        enableDisplay     = 0x08;
 800415e:	4b0b      	ldr	r3, [pc, #44]	; (800418c <detectVideoStandard+0xcc>)
 8004160:	2208      	movs	r2, #8
 8004162:	701a      	strb	r2, [r3, #0]
        enableDisplayVert = 0x0C;
 8004164:	4b0a      	ldr	r3, [pc, #40]	; (8004190 <detectVideoStandard+0xd0>)
 8004166:	220c      	movs	r2, #12
 8004168:	701a      	strb	r2, [r3, #0]
        max7456Reset      = 0x02;
 800416a:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <detectVideoStandard+0xd4>)
 800416c:	2202      	movs	r2, #2
 800416e:	701a      	strb	r2, [r3, #0]
        disableDisplay    = 0x00;
 8004170:	4b09      	ldr	r3, [pc, #36]	; (8004198 <detectVideoStandard+0xd8>)
 8004172:	2200      	movs	r2, #0
 8004174:	701a      	strb	r2, [r3, #0]
}
 8004176:	bf00      	nop
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	48000c00 	.word	0x48000c00
 8004184:	200001de 	.word	0x200001de
 8004188:	200001e0 	.word	0x200001e0
 800418c:	200001e2 	.word	0x200001e2
 8004190:	200001e3 	.word	0x200001e3
 8004194:	200001e4 	.word	0x200001e4
 8004198:	200001e5 	.word	0x200001e5

0800419c <initMax7456>:
///////////////////////////////////////////////////////////////////////////////
// Initialize MAX7456
///////////////////////////////////////////////////////////////////////////////

void initMax7456()
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
    uint8_t i;

    //if (eepromConfig.osdEnabled == false) return;

    detectVideoStandard();
 80041a2:	f7ff ff8d 	bl	80040c0 <detectVideoStandard>

    //Soft reset the MAX7456 - clear display memory
    ENABLE_MAX7456;
 80041a6:	2200      	movs	r2, #0
 80041a8:	2101      	movs	r1, #1
 80041aa:	481d      	ldr	r0, [pc, #116]	; (8004220 <initMax7456+0x84>)
 80041ac:	f002 fa56 	bl	800665c <HAL_GPIO_WritePin>

    spiWriteMax7456Register(VM0_REG, max7456Reset);
 80041b0:	4b1c      	ldr	r3, [pc, #112]	; (8004224 <initMax7456+0x88>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	4619      	mov	r1, r3
 80041b6:	2000      	movs	r0, #0
 80041b8:	f7ff feca 	bl	8003f50 <spiWriteMax7456Register>

    DISABLE_MAX7456;
 80041bc:	2201      	movs	r2, #1
 80041be:	2101      	movs	r1, #1
 80041c0:	4817      	ldr	r0, [pc, #92]	; (8004220 <initMax7456+0x84>)
 80041c2:	f002 fa4b 	bl	800665c <HAL_GPIO_WritePin>

    HAL_Delay(1);
 80041c6:	2001      	movs	r0, #1
 80041c8:	f000 ff64 	bl	8005094 <HAL_Delay>

    //Set white level to 90% for all rows
    ENABLE_MAX7456;
 80041cc:	2200      	movs	r2, #0
 80041ce:	2101      	movs	r1, #1
 80041d0:	4813      	ldr	r0, [pc, #76]	; (8004220 <initMax7456+0x84>)
 80041d2:	f002 fa43 	bl	800665c <HAL_GPIO_WritePin>

    for(i = 0; i < maxScreenRows; i++ )
 80041d6:	2300      	movs	r3, #0
 80041d8:	71fb      	strb	r3, [r7, #7]
 80041da:	e009      	b.n	80041f0 <initMax7456+0x54>
        spiWriteMax7456Register(RB0_REG + i, WHITE_LEVEL_90 );
 80041dc:	79fb      	ldrb	r3, [r7, #7]
 80041de:	3310      	adds	r3, #16
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2102      	movs	r1, #2
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff feb3 	bl	8003f50 <spiWriteMax7456Register>
    for(i = 0; i < maxScreenRows; i++ )
 80041ea:	79fb      	ldrb	r3, [r7, #7]
 80041ec:	3301      	adds	r3, #1
 80041ee:	71fb      	strb	r3, [r7, #7]
 80041f0:	79fb      	ldrb	r3, [r7, #7]
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <initMax7456+0x8c>)
 80041f6:	881b      	ldrh	r3, [r3, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d3ef      	bcc.n	80041dc <initMax7456+0x40>

    //ensure device is enabled
    spiWriteMax7456Register(VM0_REG, enableDisplay);
 80041fc:	4b0b      	ldr	r3, [pc, #44]	; (800422c <initMax7456+0x90>)
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	4619      	mov	r1, r3
 8004202:	2000      	movs	r0, #0
 8004204:	f7ff fea4 	bl	8003f50 <spiWriteMax7456Register>

    //finished writing
    DISABLE_MAX7456;
 8004208:	2201      	movs	r2, #1
 800420a:	2101      	movs	r1, #1
 800420c:	4804      	ldr	r0, [pc, #16]	; (8004220 <initMax7456+0x84>)
 800420e:	f002 fa25 	bl	800665c <HAL_GPIO_WritePin>
    unhideOSD();
 8004212:	f7ff feb7 	bl	8003f84 <unhideOSD>
}
 8004216:	bf00      	nop
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	48000c00 	.word	0x48000c00
 8004224:	200001e4 	.word	0x200001e4
 8004228:	200001e0 	.word	0x200001e0
 800422c:	200001e2 	.word	0x200001e2

08004230 <resetMax7456>:
//////////////////////////////////////////////////////////////////////////////
// Reset MAX7456
///////////////////////////////////////////////////////////////////////////////

void resetMax7456()
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
    uint8_t x;

    // force soft reset on Max7456
    ENABLE_MAX7456;
 8004236:	2200      	movs	r2, #0
 8004238:	2101      	movs	r1, #1
 800423a:	481e      	ldr	r0, [pc, #120]	; (80042b4 <resetMax7456+0x84>)
 800423c:	f002 fa0e 	bl	800665c <HAL_GPIO_WritePin>

    spiWriteMax7456Register(VM0_REG, max7456Reset);
 8004240:	4b1d      	ldr	r3, [pc, #116]	; (80042b8 <resetMax7456+0x88>)
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	4619      	mov	r1, r3
 8004246:	2000      	movs	r0, #0
 8004248:	f7ff fe82 	bl	8003f50 <spiWriteMax7456Register>

    DISABLE_MAX7456;
 800424c:	2201      	movs	r2, #1
 800424e:	2101      	movs	r1, #1
 8004250:	4818      	ldr	r0, [pc, #96]	; (80042b4 <resetMax7456+0x84>)
 8004252:	f002 fa03 	bl	800665c <HAL_GPIO_WritePin>

    HAL_Delay(500);
 8004256:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800425a:	f000 ff1b 	bl	8005094 <HAL_Delay>

    // set all rows to same character white level, 90%
    ENABLE_MAX7456;
 800425e:	2200      	movs	r2, #0
 8004260:	2101      	movs	r1, #1
 8004262:	4814      	ldr	r0, [pc, #80]	; (80042b4 <resetMax7456+0x84>)
 8004264:	f002 f9fa 	bl	800665c <HAL_GPIO_WritePin>

    for (x = 0; x < maxScreenRows; x++)
 8004268:	2300      	movs	r3, #0
 800426a:	71fb      	strb	r3, [r7, #7]
 800426c:	e009      	b.n	8004282 <resetMax7456+0x52>
        spiWriteMax7456Register(RB0_REG + x, WHITE_LEVEL_90);
 800426e:	79fb      	ldrb	r3, [r7, #7]
 8004270:	3310      	adds	r3, #16
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2102      	movs	r1, #2
 8004276:	4618      	mov	r0, r3
 8004278:	f7ff fe6a 	bl	8003f50 <spiWriteMax7456Register>
    for (x = 0; x < maxScreenRows; x++)
 800427c:	79fb      	ldrb	r3, [r7, #7]
 800427e:	3301      	adds	r3, #1
 8004280:	71fb      	strb	r3, [r7, #7]
 8004282:	79fb      	ldrb	r3, [r7, #7]
 8004284:	b29a      	uxth	r2, r3
 8004286:	4b0d      	ldr	r3, [pc, #52]	; (80042bc <resetMax7456+0x8c>)
 8004288:	881b      	ldrh	r3, [r3, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d3ef      	bcc.n	800426e <resetMax7456+0x3e>

    // make sure the Max7456 is enabled
    spiWriteMax7456Register(VM0_REG, enableDisplay);
 800428e:	4b0c      	ldr	r3, [pc, #48]	; (80042c0 <resetMax7456+0x90>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	4619      	mov	r1, r3
 8004294:	2000      	movs	r0, #0
 8004296:	f7ff fe5b 	bl	8003f50 <spiWriteMax7456Register>
    
    HAL_Delay(100);
 800429a:	2064      	movs	r0, #100	; 0x64
 800429c:	f000 fefa 	bl	8005094 <HAL_Delay>

    DISABLE_MAX7456;
 80042a0:	2201      	movs	r2, #1
 80042a2:	2101      	movs	r1, #1
 80042a4:	4803      	ldr	r0, [pc, #12]	; (80042b4 <resetMax7456+0x84>)
 80042a6:	f002 f9d9 	bl	800665c <HAL_GPIO_WritePin>
}
 80042aa:	bf00      	nop
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	48000c00 	.word	0x48000c00
 80042b8:	200001e4 	.word	0x200001e4
 80042bc:	200001e0 	.word	0x200001e0
 80042c0:	200001e2 	.word	0x200001e2

080042c4 <displayHeading>:
                           0x45,0x2d,0x2d,0x7c,0x2d,0x2d,0x7c,0x2d,0x2d,
                           0x53,0x2d,0x2d,0x7c,0x2d,0x2d,0x7c,0x2d,0x2d,
                           0x57,0x2d,0x2d,0x7c,0x2d,0x2d,0x7c,0x2d,0x2d};

void displayHeading(uint8_t currentHeading, uint8_t update)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b088      	sub	sp, #32
 80042c8:	af02      	add	r7, sp, #8
 80042ca:	4603      	mov	r3, r0
 80042cc:	460a      	mov	r2, r1
 80042ce:	71fb      	strb	r3, [r7, #7]
 80042d0:	4613      	mov	r3, r2
 80042d2:	71bb      	strb	r3, [r7, #6]
    int16_t currentHeadingDeg;

    currentHeadingDeg = (int16_t)(currentHeading) % 360;
 80042d4:	79fb      	ldrb	r3, [r7, #7]
 80042d6:	4a45      	ldr	r2, [pc, #276]	; (80043ec <displayHeading+0x128>)
 80042d8:	fb82 1203 	smull	r1, r2, r2, r3
 80042dc:	441a      	add	r2, r3
 80042de:	1211      	asrs	r1, r2, #8
 80042e0:	17da      	asrs	r2, r3, #31
 80042e2:	1a8a      	subs	r2, r1, r2
 80042e4:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80042e8:	fb01 f202 	mul.w	r2, r1, r2
 80042ec:	1a9a      	subs	r2, r3, r2
 80042ee:	4613      	mov	r3, r2
 80042f0:	82fb      	strh	r3, [r7, #22]
    if (currentHeadingDeg < 0)
 80042f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	da04      	bge.n	8004304 <displayHeading+0x40>
		currentHeadingDeg += 360;
 80042fa:	8afb      	ldrh	r3, [r7, #22]
 80042fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004300:	b29b      	uxth	r3, r3
 8004302:	82fb      	strh	r3, [r7, #22]

    if ((currentHeadingDeg != lastOSDheading) || update)
 8004304:	4b3a      	ldr	r3, [pc, #232]	; (80043f0 <displayHeading+0x12c>)
 8004306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800430a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800430e:	429a      	cmp	r2, r3
 8004310:	d102      	bne.n	8004318 <displayHeading+0x54>
 8004312:	79bb      	ldrb	r3, [r7, #6]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d064      	beq.n	80043e2 <displayHeading+0x11e>
    {

    	if (1)
    	{
    		char buf[6];
			snprintf(buf ,6, "\026%3d\027", currentHeadingDeg); // \026 is compass \027 is degree symbol
 8004318:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800431c:	f107 000c 	add.w	r0, r7, #12
 8004320:	4a34      	ldr	r2, [pc, #208]	; (80043f4 <displayHeading+0x130>)
 8004322:	2106      	movs	r1, #6
 8004324:	f007 f916 	bl	800b554 <sniprintf>
			writeMax7456Chars(buf, 5, 0, 1,24);
 8004328:	f107 000c 	add.w	r0, r7, #12
 800432c:	2318      	movs	r3, #24
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	2301      	movs	r3, #1
 8004332:	2200      	movs	r2, #0
 8004334:	2105      	movs	r1, #5
 8004336:	f7ff fe47 	bl	8003fc8 <writeMax7456Chars>

        if (1) {
			int8_t lastPos;
			int8_t currentPos;

			currentPos = currentHeadingDeg / 10;
 800433a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800433e:	4a2e      	ldr	r2, [pc, #184]	; (80043f8 <displayHeading+0x134>)
 8004340:	fb82 1203 	smull	r1, r2, r2, r3
 8004344:	1092      	asrs	r2, r2, #2
 8004346:	17db      	asrs	r3, r3, #31
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	b21b      	sxth	r3, r3
 800434c:	757b      	strb	r3, [r7, #21]
			lastPos = lastOSDheading / 10;
 800434e:	4b28      	ldr	r3, [pc, #160]	; (80043f0 <displayHeading+0x12c>)
 8004350:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004354:	4a28      	ldr	r2, [pc, #160]	; (80043f8 <displayHeading+0x134>)
 8004356:	fb82 1203 	smull	r1, r2, r2, r3
 800435a:	1092      	asrs	r2, r2, #2
 800435c:	17db      	asrs	r3, r3, #31
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	b21b      	sxth	r3, r3
 8004362:	74fb      	strb	r3, [r7, #19]

			if ((currentPos != lastPos) || update)
 8004364:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8004368:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800436c:	429a      	cmp	r2, r3
 800436e:	d102      	bne.n	8004376 <displayHeading+0xb2>
 8004370:	79bb      	ldrb	r3, [r7, #6]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d032      	beq.n	80043dc <displayHeading+0x118>
			{
			    uint8_t x = 0;
 8004376:	2300      	movs	r3, #0
 8004378:	753b      	strb	r3, [r7, #20]
				currentPos -= 5;
 800437a:	7d7b      	ldrb	r3, [r7, #21]
 800437c:	3b05      	subs	r3, #5
 800437e:	b2db      	uxtb	r3, r3
 8004380:	757b      	strb	r3, [r7, #21]

				if (currentPos < 0)
 8004382:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004386:	2b00      	cmp	r3, #0
 8004388:	da03      	bge.n	8004392 <displayHeading+0xce>
					currentPos += 36;
 800438a:	7d7b      	ldrb	r3, [r7, #21]
 800438c:	3324      	adds	r3, #36	; 0x24
 800438e:	b2db      	uxtb	r3, r3
 8004390:	757b      	strb	r3, [r7, #21]

				for (x = 0; x <= 10; ++x)
 8004392:	2300      	movs	r3, #0
 8004394:	753b      	strb	r3, [r7, #20]
 8004396:	e013      	b.n	80043c0 <displayHeading+0xfc>
				{
					headingBarShown[x] = headingBar[currentPos];
 8004398:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800439c:	7d3b      	ldrb	r3, [r7, #20]
 800439e:	4917      	ldr	r1, [pc, #92]	; (80043fc <displayHeading+0x138>)
 80043a0:	5c89      	ldrb	r1, [r1, r2]
 80043a2:	4a17      	ldr	r2, [pc, #92]	; (8004400 <displayHeading+0x13c>)
 80043a4:	54d1      	strb	r1, [r2, r3]

					if (++currentPos > 35)
 80043a6:	7d7b      	ldrb	r3, [r7, #21]
 80043a8:	3301      	adds	r3, #1
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	757b      	strb	r3, [r7, #21]
 80043ae:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80043b2:	2b23      	cmp	r3, #35	; 0x23
 80043b4:	dd01      	ble.n	80043ba <displayHeading+0xf6>
						currentPos = 0;
 80043b6:	2300      	movs	r3, #0
 80043b8:	757b      	strb	r3, [r7, #21]
				for (x = 0; x <= 10; ++x)
 80043ba:	7d3b      	ldrb	r3, [r7, #20]
 80043bc:	3301      	adds	r3, #1
 80043be:	753b      	strb	r3, [r7, #20]
 80043c0:	7d3b      	ldrb	r3, [r7, #20]
 80043c2:	2b0a      	cmp	r3, #10
 80043c4:	d9e8      	bls.n	8004398 <displayHeading+0xd4>
				}

				headingBarShown[11] = '\0';
 80043c6:	4b0e      	ldr	r3, [pc, #56]	; (8004400 <displayHeading+0x13c>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	72da      	strb	r2, [r3, #11]
				writeMax7456Chars(headingBarShown, 11, 0, 1, 8);
 80043cc:	2308      	movs	r3, #8
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	2301      	movs	r3, #1
 80043d2:	2200      	movs	r2, #0
 80043d4:	210b      	movs	r1, #11
 80043d6:	480a      	ldr	r0, [pc, #40]	; (8004400 <displayHeading+0x13c>)
 80043d8:	f7ff fdf6 	bl	8003fc8 <writeMax7456Chars>
			}
		}

        lastOSDheading = currentHeadingDeg;
 80043dc:	4a04      	ldr	r2, [pc, #16]	; (80043f0 <displayHeading+0x12c>)
 80043de:	8afb      	ldrh	r3, [r7, #22]
 80043e0:	8013      	strh	r3, [r2, #0]
    }
}
 80043e2:	bf00      	nop
 80043e4:	3718      	adds	r7, #24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	b60b60b7 	.word	0xb60b60b7
 80043f0:	20000088 	.word	0x20000088
 80043f4:	0800c4e8 	.word	0x0800c4e8
 80043f8:	66666667 	.word	0x66666667
 80043fc:	0800c574 	.word	0x0800c574
 8004400:	200001e8 	.word	0x200001e8

08004404 <displayDepth>:

void displayDepth(uint32_t depth)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b088      	sub	sp, #32
 8004408:	af02      	add	r7, sp, #8
 800440a:	6078      	str	r0, [r7, #4]
	char buf[10];
	snprintf(buf ,10, "\12%3dcm", depth); //
 800440c:	f107 000c 	add.w	r0, r7, #12
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a08      	ldr	r2, [pc, #32]	; (8004434 <displayDepth+0x30>)
 8004414:	210a      	movs	r1, #10
 8004416:	f007 f89d 	bl	800b554 <sniprintf>
	writeMax7456Chars(buf, 10, 0, 14,1);
 800441a:	f107 000c 	add.w	r0, r7, #12
 800441e:	2301      	movs	r3, #1
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	230e      	movs	r3, #14
 8004424:	2200      	movs	r2, #0
 8004426:	210a      	movs	r1, #10
 8004428:	f7ff fdce 	bl	8003fc8 <writeMax7456Chars>
}
 800442c:	bf00      	nop
 800442e:	3718      	adds	r7, #24
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	0800c4f0 	.word	0x0800c4f0

08004438 <displayBattery>:
/////////////////////////////////////////////////////// ////////////////////////
// Battery Display
///////////////////////////////////////////////////////////////////////////////

void displayBattery(uint8_t osdVoltage)
{
 8004438:	b5b0      	push	{r4, r5, r7, lr}
 800443a:	b09a      	sub	sp, #104	; 0x68
 800443c:	af02      	add	r7, sp, #8
 800443e:	4603      	mov	r3, r0
 8004440:	71fb      	strb	r3, [r7, #7]
    char buf[20];
    osdVoltage = osdVoltage;
    if (osdVoltage!=osdVoltageLast)
 8004442:	4b2d      	ldr	r3, [pc, #180]	; (80044f8 <displayBattery+0xc0>)
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	79fa      	ldrb	r2, [r7, #7]
 8004448:	429a      	cmp	r2, r3
 800444a:	d025      	beq.n	8004498 <displayBattery+0x60>
    {
	    snprintf(buf, sizeof(buf), "\20%2d.%1dV", (uint8_t)(osdVoltage / 10), (uint8_t)(osdVoltage % 10));
 800444c:	79fb      	ldrb	r3, [r7, #7]
 800444e:	4a2b      	ldr	r2, [pc, #172]	; (80044fc <displayBattery+0xc4>)
 8004450:	fba2 2303 	umull	r2, r3, r2, r3
 8004454:	08db      	lsrs	r3, r3, #3
 8004456:	b2db      	uxtb	r3, r3
 8004458:	461c      	mov	r4, r3
 800445a:	79fa      	ldrb	r2, [r7, #7]
 800445c:	4b27      	ldr	r3, [pc, #156]	; (80044fc <displayBattery+0xc4>)
 800445e:	fba3 1302 	umull	r1, r3, r3, r2
 8004462:	08d9      	lsrs	r1, r3, #3
 8004464:	460b      	mov	r3, r1
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	440b      	add	r3, r1
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	b2db      	uxtb	r3, r3
 8004470:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	4623      	mov	r3, r4
 8004478:	4a21      	ldr	r2, [pc, #132]	; (8004500 <displayBattery+0xc8>)
 800447a:	2114      	movs	r1, #20
 800447c:	f007 f86a 	bl	800b554 <sniprintf>
	    writeMax7456Chars(buf, 7, 0, 14, 23);
 8004480:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8004484:	2317      	movs	r3, #23
 8004486:	9300      	str	r3, [sp, #0]
 8004488:	230e      	movs	r3, #14
 800448a:	2200      	movs	r2, #0
 800448c:	2107      	movs	r1, #7
 800448e:	f7ff fd9b 	bl	8003fc8 <writeMax7456Chars>
	    osdVoltageLast = osdVoltage;
 8004492:	4a19      	ldr	r2, [pc, #100]	; (80044f8 <displayBattery+0xc0>)
 8004494:	79fb      	ldrb	r3, [r7, #7]
 8004496:	7013      	strb	r3, [r2, #0]
    }
    if(osdVoltage<200)
 8004498:	79fb      	ldrb	r3, [r7, #7]
 800449a:	2bc7      	cmp	r3, #199	; 0xc7
 800449c:	d80f      	bhi.n	80044be <displayBattery+0x86>
    {
    	char buf1[10] = "LOW BATTERY";
 800449e:	4a19      	ldr	r2, [pc, #100]	; (8004504 <displayBattery+0xcc>)
 80044a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80044a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80044a6:	c303      	stmia	r3!, {r0, r1}
 80044a8:	801a      	strh	r2, [r3, #0]
    	writeMax7456Chars(buf1, 10, 1, 6,5);
 80044aa:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80044ae:	2305      	movs	r3, #5
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	2306      	movs	r3, #6
 80044b4:	2201      	movs	r2, #1
 80044b6:	210a      	movs	r1, #10
 80044b8:	f7ff fd86 	bl	8003fc8 <writeMax7456Chars>
    else
    {
    	char buf1[53] = "                                                      ";
    	writeMax7456Chars(buf1, 53, 0, 6,5);
    }
}
 80044bc:	e017      	b.n	80044ee <displayBattery+0xb6>
    	char buf1[53] = "                                                      ";
 80044be:	4b12      	ldr	r3, [pc, #72]	; (8004508 <displayBattery+0xd0>)
 80044c0:	f107 0408 	add.w	r4, r7, #8
 80044c4:	461d      	mov	r5, r3
 80044c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80044d6:	6020      	str	r0, [r4, #0]
 80044d8:	3404      	adds	r4, #4
 80044da:	7021      	strb	r1, [r4, #0]
    	writeMax7456Chars(buf1, 53, 0, 6,5);
 80044dc:	f107 0008 	add.w	r0, r7, #8
 80044e0:	2305      	movs	r3, #5
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	2306      	movs	r3, #6
 80044e6:	2200      	movs	r2, #0
 80044e8:	2135      	movs	r1, #53	; 0x35
 80044ea:	f7ff fd6d 	bl	8003fc8 <writeMax7456Chars>
}
 80044ee:	bf00      	nop
 80044f0:	3760      	adds	r7, #96	; 0x60
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bdb0      	pop	{r4, r5, r7, pc}
 80044f6:	bf00      	nop
 80044f8:	200001e6 	.word	0x200001e6
 80044fc:	cccccccd 	.word	0xcccccccd
 8004500:	0800c4f8 	.word	0x0800c4f8
 8004504:	0800c504 	.word	0x0800c504
 8004508:	0800c510 	.word	0x0800c510

0800450c <displayMotorArmedTime>:
uint32_t previousTime = 0;
uint16_t previousArmedTimeSeconds = 500;
uint32_t armedTime = 0;

void displayMotorArmedTime()
{
 800450c:	b590      	push	{r4, r7, lr}
 800450e:	b087      	sub	sp, #28
 8004510:	af02      	add	r7, sp, #8
	uint32_t currentOSDTime = HAL_GetTick()/1000;
 8004512:	f000 fdb3 	bl	800507c <HAL_GetTick>
 8004516:	4603      	mov	r3, r0
 8004518:	4a17      	ldr	r2, [pc, #92]	; (8004578 <displayMotorArmedTime+0x6c>)
 800451a:	fba2 2303 	umull	r2, r3, r2, r3
 800451e:	099b      	lsrs	r3, r3, #6
 8004520:	60fb      	str	r3, [r7, #12]

	if (previousTime != currentOSDTime)
 8004522:	4b16      	ldr	r3, [pc, #88]	; (800457c <displayMotorArmedTime+0x70>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	429a      	cmp	r2, r3
 800452a:	d021      	beq.n	8004570 <displayMotorArmedTime+0x64>
	{
		previousArmedTimeSeconds = currentOSDTime;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	b29a      	uxth	r2, r3
 8004530:	4b13      	ldr	r3, [pc, #76]	; (8004580 <displayMotorArmedTime+0x74>)
 8004532:	801a      	strh	r2, [r3, #0]
		char buf[7];
		snprintf(buf, 7, "\025%02u:%02u", currentOSDTime / 60, currentOSDTime % 60);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4a13      	ldr	r2, [pc, #76]	; (8004584 <displayMotorArmedTime+0x78>)
 8004538:	fba2 2303 	umull	r2, r3, r2, r3
 800453c:	095c      	lsrs	r4, r3, #5
 800453e:	68f9      	ldr	r1, [r7, #12]
 8004540:	4b10      	ldr	r3, [pc, #64]	; (8004584 <displayMotorArmedTime+0x78>)
 8004542:	fba3 2301 	umull	r2, r3, r3, r1
 8004546:	095a      	lsrs	r2, r3, #5
 8004548:	4613      	mov	r3, r2
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	1a9b      	subs	r3, r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	1aca      	subs	r2, r1, r3
 8004552:	1d38      	adds	r0, r7, #4
 8004554:	9200      	str	r2, [sp, #0]
 8004556:	4623      	mov	r3, r4
 8004558:	4a0b      	ldr	r2, [pc, #44]	; (8004588 <displayMotorArmedTime+0x7c>)
 800455a:	2107      	movs	r1, #7
 800455c:	f006 fffa 	bl	800b554 <sniprintf>
		writeMax7456Chars(buf, 6, 0, 13, 23);
 8004560:	1d38      	adds	r0, r7, #4
 8004562:	2317      	movs	r3, #23
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	230d      	movs	r3, #13
 8004568:	2200      	movs	r2, #0
 800456a:	2106      	movs	r1, #6
 800456c:	f7ff fd2c 	bl	8003fc8 <writeMax7456Chars>
	}

}
 8004570:	bf00      	nop
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	bd90      	pop	{r4, r7, pc}
 8004578:	10624dd3 	.word	0x10624dd3
 800457c:	200001f4 	.word	0x200001f4
 8004580:	2000008a 	.word	0x2000008a
 8004584:	88888889 	.word	0x88888889
 8004588:	0800c548 	.word	0x0800c548

0800458c <displaycompas>:

///////////////////////////////////////////////////////////////////////////////
void displaycompas(int currentHeadingY, int currentHeadingR, int currentHeadingP,uint8_t speedVMA)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b092      	sub	sp, #72	; 0x48
 8004590:	af02      	add	r7, sp, #8
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
 8004598:	70fb      	strb	r3, [r7, #3]
	int currentHeadingDegY;

	currentHeadingDegY = (int)(currentHeadingY) % 360;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	4a3a      	ldr	r2, [pc, #232]	; (8004688 <displaycompas+0xfc>)
 800459e:	fb82 1203 	smull	r1, r2, r2, r3
 80045a2:	441a      	add	r2, r3
 80045a4:	1211      	asrs	r1, r2, #8
 80045a6:	17da      	asrs	r2, r3, #31
 80045a8:	1a8a      	subs	r2, r1, r2
 80045aa:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80045ae:	fb01 f202 	mul.w	r2, r1, r2
 80045b2:	1a9b      	subs	r3, r3, r2
 80045b4:	63bb      	str	r3, [r7, #56]	; 0x38
//	if (currentHeadingDegY < 0)
//		currentHeadingDegY += 360;

	char bufY[6];
	snprintf(bufY ,6, "\026%3d\027", currentHeadingDegY); // \026 is compass \027 is degree symbol
 80045b6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80045ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045bc:	4a33      	ldr	r2, [pc, #204]	; (800468c <displaycompas+0x100>)
 80045be:	2106      	movs	r1, #6
 80045c0:	f006 ffc8 	bl	800b554 <sniprintf>
	writeMax7456Chars(bufY, 5, 0, 3,24);
 80045c4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80045c8:	2318      	movs	r3, #24
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	2303      	movs	r3, #3
 80045ce:	2200      	movs	r2, #0
 80045d0:	2105      	movs	r1, #5
 80045d2:	f7ff fcf9 	bl	8003fc8 <writeMax7456Chars>

	int currentHeadingDegR;

	currentHeadingDegR = (int)(currentHeadingR) % 360;
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	4a2b      	ldr	r2, [pc, #172]	; (8004688 <displaycompas+0xfc>)
 80045da:	fb82 1203 	smull	r1, r2, r2, r3
 80045de:	441a      	add	r2, r3
 80045e0:	1211      	asrs	r1, r2, #8
 80045e2:	17da      	asrs	r2, r3, #31
 80045e4:	1a8a      	subs	r2, r1, r2
 80045e6:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80045ea:	fb01 f202 	mul.w	r2, r1, r2
 80045ee:	1a9b      	subs	r3, r3, r2
 80045f0:	637b      	str	r3, [r7, #52]	; 0x34
//	if (currentHeadingDegR < 0)
//		currentHeadingDegR += 360;

	char bufR[6];
	snprintf(bufR ,6, "\026%3d\027", currentHeadingDegR); // \026 is compass \027 is degree symbol
 80045f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80045f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045f8:	4a24      	ldr	r2, [pc, #144]	; (800468c <displaycompas+0x100>)
 80045fa:	2106      	movs	r1, #6
 80045fc:	f006 ffaa 	bl	800b554 <sniprintf>
	writeMax7456Chars(bufR, 5, 0, 5,24);
 8004600:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004604:	2318      	movs	r3, #24
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	2305      	movs	r3, #5
 800460a:	2200      	movs	r2, #0
 800460c:	2105      	movs	r1, #5
 800460e:	f7ff fcdb 	bl	8003fc8 <writeMax7456Chars>

	int currentHeadingDegP;

	currentHeadingDegP = (int)(currentHeadingP) % 360;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a1c      	ldr	r2, [pc, #112]	; (8004688 <displaycompas+0xfc>)
 8004616:	fb82 1203 	smull	r1, r2, r2, r3
 800461a:	441a      	add	r2, r3
 800461c:	1211      	asrs	r1, r2, #8
 800461e:	17da      	asrs	r2, r3, #31
 8004620:	1a8a      	subs	r2, r1, r2
 8004622:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8004626:	fb01 f202 	mul.w	r2, r1, r2
 800462a:	1a9b      	subs	r3, r3, r2
 800462c:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (currentHeadingDegP < 0)
 800462e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004630:	2b00      	cmp	r3, #0
 8004632:	da03      	bge.n	800463c <displaycompas+0xb0>
		currentHeadingDegP += 360;
 8004634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004636:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800463a:	63fb      	str	r3, [r7, #60]	; 0x3c

	char bufP[6];
	snprintf(bufP ,6, "T%3d\027", -currentHeadingDegP+118); // \026 is compass \027 is degree symbol
 800463c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800463e:	f1c3 0376 	rsb	r3, r3, #118	; 0x76
 8004642:	f107 001c 	add.w	r0, r7, #28
 8004646:	4a12      	ldr	r2, [pc, #72]	; (8004690 <displaycompas+0x104>)
 8004648:	2106      	movs	r1, #6
 800464a:	f006 ff83 	bl	800b554 <sniprintf>
	writeMax7456Chars(bufP, 5, 0, 7,24);
 800464e:	f107 001c 	add.w	r0, r7, #28
 8004652:	2318      	movs	r3, #24
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	2307      	movs	r3, #7
 8004658:	2200      	movs	r2, #0
 800465a:	2105      	movs	r1, #5
 800465c:	f7ff fcb4 	bl	8003fc8 <writeMax7456Chars>

	char bufVMA[7];
	snprintf(bufVMA ,7, "S%2d", speedVMA); // \026 is compass \027 is degree symbol
 8004660:	78fb      	ldrb	r3, [r7, #3]
 8004662:	f107 0014 	add.w	r0, r7, #20
 8004666:	4a0b      	ldr	r2, [pc, #44]	; (8004694 <displaycompas+0x108>)
 8004668:	2107      	movs	r1, #7
 800466a:	f006 ff73 	bl	800b554 <sniprintf>
	writeMax7456Chars(bufVMA, 5, 0, 1,1);
 800466e:	f107 0014 	add.w	r0, r7, #20
 8004672:	2301      	movs	r3, #1
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	2301      	movs	r3, #1
 8004678:	2200      	movs	r2, #0
 800467a:	2105      	movs	r1, #5
 800467c:	f7ff fca4 	bl	8003fc8 <writeMax7456Chars>

//	char buf1[6] = "HY";
//	writeMax7456Chars(buf1, 6, 0, 1,1);

}
 8004680:	bf00      	nop
 8004682:	3740      	adds	r7, #64	; 0x40
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	b60b60b7 	.word	0xb60b60b7
 800468c:	0800c4e8 	.word	0x0800c4e8
 8004690:	0800c554 	.word	0x0800c554
 8004694:	0800c55c 	.word	0x0800c55c

08004698 <displayNoConnection>:

void displayNoConnection(){
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af02      	add	r7, sp, #8
	char buf[15];
	snprintf(buf ,10, "Not connected");
 800469e:	463b      	mov	r3, r7
 80046a0:	4a08      	ldr	r2, [pc, #32]	; (80046c4 <displayNoConnection+0x2c>)
 80046a2:	210a      	movs	r1, #10
 80046a4:	4618      	mov	r0, r3
 80046a6:	f006 ff55 	bl	800b554 <sniprintf>
	writeMax7456Chars(buf, 10, 0, 14,1);
 80046aa:	4638      	mov	r0, r7
 80046ac:	2301      	movs	r3, #1
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	230e      	movs	r3, #14
 80046b2:	2200      	movs	r2, #0
 80046b4:	210a      	movs	r1, #10
 80046b6:	f7ff fc87 	bl	8003fc8 <writeMax7456Chars>
}
 80046ba:	bf00      	nop
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	0800c564 	.word	0x0800c564

080046c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046ce:	4b0f      	ldr	r3, [pc, #60]	; (800470c <HAL_MspInit+0x44>)
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	4a0e      	ldr	r2, [pc, #56]	; (800470c <HAL_MspInit+0x44>)
 80046d4:	f043 0301 	orr.w	r3, r3, #1
 80046d8:	6193      	str	r3, [r2, #24]
 80046da:	4b0c      	ldr	r3, [pc, #48]	; (800470c <HAL_MspInit+0x44>)
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	607b      	str	r3, [r7, #4]
 80046e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046e6:	4b09      	ldr	r3, [pc, #36]	; (800470c <HAL_MspInit+0x44>)
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	4a08      	ldr	r2, [pc, #32]	; (800470c <HAL_MspInit+0x44>)
 80046ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f0:	61d3      	str	r3, [r2, #28]
 80046f2:	4b06      	ldr	r3, [pc, #24]	; (800470c <HAL_MspInit+0x44>)
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046fa:	603b      	str	r3, [r7, #0]
 80046fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80046fe:	2007      	movs	r0, #7
 8004700:	f001 fde6 	bl	80062d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004704:	bf00      	nop
 8004706:	3708      	adds	r7, #8
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	40021000 	.word	0x40021000

08004710 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b08a      	sub	sp, #40	; 0x28
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004718:	f107 0314 	add.w	r3, r7, #20
 800471c:	2200      	movs	r2, #0
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	605a      	str	r2, [r3, #4]
 8004722:	609a      	str	r2, [r3, #8]
 8004724:	60da      	str	r2, [r3, #12]
 8004726:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a15      	ldr	r2, [pc, #84]	; (8004784 <HAL_ADC_MspInit+0x74>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d124      	bne.n	800477c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC34_CLK_ENABLE();
 8004732:	4b15      	ldr	r3, [pc, #84]	; (8004788 <HAL_ADC_MspInit+0x78>)
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	4a14      	ldr	r2, [pc, #80]	; (8004788 <HAL_ADC_MspInit+0x78>)
 8004738:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800473c:	6153      	str	r3, [r2, #20]
 800473e:	4b12      	ldr	r3, [pc, #72]	; (8004788 <HAL_ADC_MspInit+0x78>)
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004746:	613b      	str	r3, [r7, #16]
 8004748:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800474a:	4b0f      	ldr	r3, [pc, #60]	; (8004788 <HAL_ADC_MspInit+0x78>)
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	4a0e      	ldr	r2, [pc, #56]	; (8004788 <HAL_ADC_MspInit+0x78>)
 8004750:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004754:	6153      	str	r3, [r2, #20]
 8004756:	4b0c      	ldr	r3, [pc, #48]	; (8004788 <HAL_ADC_MspInit+0x78>)
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PD11     ------> ADC3_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004762:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004768:	2303      	movs	r3, #3
 800476a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800476c:	2300      	movs	r3, #0
 800476e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004770:	f107 0314 	add.w	r3, r7, #20
 8004774:	4619      	mov	r1, r3
 8004776:	4805      	ldr	r0, [pc, #20]	; (800478c <HAL_ADC_MspInit+0x7c>)
 8004778:	f001 fdde 	bl	8006338 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800477c:	bf00      	nop
 800477e:	3728      	adds	r7, #40	; 0x28
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	50000400 	.word	0x50000400
 8004788:	40021000 	.word	0x40021000
 800478c:	48000c00 	.word	0x48000c00

08004790 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b08c      	sub	sp, #48	; 0x30
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004798:	f107 031c 	add.w	r3, r7, #28
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	605a      	str	r2, [r3, #4]
 80047a2:	609a      	str	r2, [r3, #8]
 80047a4:	60da      	str	r2, [r3, #12]
 80047a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a2f      	ldr	r2, [pc, #188]	; (800486c <HAL_I2C_MspInit+0xdc>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d128      	bne.n	8004804 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047b2:	4b2f      	ldr	r3, [pc, #188]	; (8004870 <HAL_I2C_MspInit+0xe0>)
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	4a2e      	ldr	r2, [pc, #184]	; (8004870 <HAL_I2C_MspInit+0xe0>)
 80047b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047bc:	6153      	str	r3, [r2, #20]
 80047be:	4b2c      	ldr	r3, [pc, #176]	; (8004870 <HAL_I2C_MspInit+0xe0>)
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047c6:	61bb      	str	r3, [r7, #24]
 80047c8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80047ca:	23c0      	movs	r3, #192	; 0xc0
 80047cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047ce:	2312      	movs	r3, #18
 80047d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047d2:	2301      	movs	r3, #1
 80047d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047d6:	2303      	movs	r3, #3
 80047d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80047da:	2304      	movs	r3, #4
 80047dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047de:	f107 031c 	add.w	r3, r7, #28
 80047e2:	4619      	mov	r1, r3
 80047e4:	4823      	ldr	r0, [pc, #140]	; (8004874 <HAL_I2C_MspInit+0xe4>)
 80047e6:	f001 fda7 	bl	8006338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80047ea:	4b21      	ldr	r3, [pc, #132]	; (8004870 <HAL_I2C_MspInit+0xe0>)
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	4a20      	ldr	r2, [pc, #128]	; (8004870 <HAL_I2C_MspInit+0xe0>)
 80047f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80047f4:	61d3      	str	r3, [r2, #28]
 80047f6:	4b1e      	ldr	r3, [pc, #120]	; (8004870 <HAL_I2C_MspInit+0xe0>)
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047fe:	617b      	str	r3, [r7, #20]
 8004800:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004802:	e02e      	b.n	8004862 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C2)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a1b      	ldr	r2, [pc, #108]	; (8004878 <HAL_I2C_MspInit+0xe8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d129      	bne.n	8004862 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800480e:	4b18      	ldr	r3, [pc, #96]	; (8004870 <HAL_I2C_MspInit+0xe0>)
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	4a17      	ldr	r2, [pc, #92]	; (8004870 <HAL_I2C_MspInit+0xe0>)
 8004814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004818:	6153      	str	r3, [r2, #20]
 800481a:	4b15      	ldr	r3, [pc, #84]	; (8004870 <HAL_I2C_MspInit+0xe0>)
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004822:	613b      	str	r3, [r7, #16]
 8004824:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004826:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800482a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800482c:	2312      	movs	r3, #18
 800482e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004830:	2301      	movs	r3, #1
 8004832:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004834:	2303      	movs	r3, #3
 8004836:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004838:	2304      	movs	r3, #4
 800483a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800483c:	f107 031c 	add.w	r3, r7, #28
 8004840:	4619      	mov	r1, r3
 8004842:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004846:	f001 fd77 	bl	8006338 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800484a:	4b09      	ldr	r3, [pc, #36]	; (8004870 <HAL_I2C_MspInit+0xe0>)
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	4a08      	ldr	r2, [pc, #32]	; (8004870 <HAL_I2C_MspInit+0xe0>)
 8004850:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004854:	61d3      	str	r3, [r2, #28]
 8004856:	4b06      	ldr	r3, [pc, #24]	; (8004870 <HAL_I2C_MspInit+0xe0>)
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	68fb      	ldr	r3, [r7, #12]
}
 8004862:	bf00      	nop
 8004864:	3730      	adds	r7, #48	; 0x30
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	40005400 	.word	0x40005400
 8004870:	40021000 	.word	0x40021000
 8004874:	48000400 	.word	0x48000400
 8004878:	40005800 	.word	0x40005800

0800487c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b08c      	sub	sp, #48	; 0x30
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004884:	f107 031c 	add.w	r3, r7, #28
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	605a      	str	r2, [r3, #4]
 800488e:	609a      	str	r2, [r3, #8]
 8004890:	60da      	str	r2, [r3, #12]
 8004892:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a3d      	ldr	r2, [pc, #244]	; (8004990 <HAL_SPI_MspInit+0x114>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d12a      	bne.n	80048f4 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800489e:	4b3d      	ldr	r3, [pc, #244]	; (8004994 <HAL_SPI_MspInit+0x118>)
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	4a3c      	ldr	r2, [pc, #240]	; (8004994 <HAL_SPI_MspInit+0x118>)
 80048a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048a8:	6193      	str	r3, [r2, #24]
 80048aa:	4b3a      	ldr	r3, [pc, #232]	; (8004994 <HAL_SPI_MspInit+0x118>)
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048b2:	61bb      	str	r3, [r7, #24]
 80048b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048b6:	4b37      	ldr	r3, [pc, #220]	; (8004994 <HAL_SPI_MspInit+0x118>)
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	4a36      	ldr	r2, [pc, #216]	; (8004994 <HAL_SPI_MspInit+0x118>)
 80048bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048c0:	6153      	str	r3, [r2, #20]
 80048c2:	4b34      	ldr	r3, [pc, #208]	; (8004994 <HAL_SPI_MspInit+0x118>)
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ca:	617b      	str	r3, [r7, #20]
 80048cc:	697b      	ldr	r3, [r7, #20]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin|GPIO_PIN_15;
 80048ce:	f248 03e0 	movw	r3, #32992	; 0x80e0
 80048d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048d4:	2302      	movs	r3, #2
 80048d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d8:	2300      	movs	r3, #0
 80048da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80048dc:	2303      	movs	r3, #3
 80048de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80048e0:	2305      	movs	r3, #5
 80048e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048e4:	f107 031c 	add.w	r3, r7, #28
 80048e8:	4619      	mov	r1, r3
 80048ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048ee:	f001 fd23 	bl	8006338 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80048f2:	e049      	b.n	8004988 <HAL_SPI_MspInit+0x10c>
  else if(hspi->Instance==SPI3)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a27      	ldr	r2, [pc, #156]	; (8004998 <HAL_SPI_MspInit+0x11c>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d144      	bne.n	8004988 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80048fe:	4b25      	ldr	r3, [pc, #148]	; (8004994 <HAL_SPI_MspInit+0x118>)
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	4a24      	ldr	r2, [pc, #144]	; (8004994 <HAL_SPI_MspInit+0x118>)
 8004904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004908:	61d3      	str	r3, [r2, #28]
 800490a:	4b22      	ldr	r3, [pc, #136]	; (8004994 <HAL_SPI_MspInit+0x118>)
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004912:	613b      	str	r3, [r7, #16]
 8004914:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004916:	4b1f      	ldr	r3, [pc, #124]	; (8004994 <HAL_SPI_MspInit+0x118>)
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	4a1e      	ldr	r2, [pc, #120]	; (8004994 <HAL_SPI_MspInit+0x118>)
 800491c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004920:	6153      	str	r3, [r2, #20]
 8004922:	4b1c      	ldr	r3, [pc, #112]	; (8004994 <HAL_SPI_MspInit+0x118>)
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800492e:	4b19      	ldr	r3, [pc, #100]	; (8004994 <HAL_SPI_MspInit+0x118>)
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	4a18      	ldr	r2, [pc, #96]	; (8004994 <HAL_SPI_MspInit+0x118>)
 8004934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004938:	6153      	str	r3, [r2, #20]
 800493a:	4b16      	ldr	r3, [pc, #88]	; (8004994 <HAL_SPI_MspInit+0x118>)
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004942:	60bb      	str	r3, [r7, #8]
 8004944:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004946:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800494a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800494c:	2302      	movs	r3, #2
 800494e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004950:	2300      	movs	r3, #0
 8004952:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004954:	2303      	movs	r3, #3
 8004956:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004958:	2306      	movs	r3, #6
 800495a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800495c:	f107 031c 	add.w	r3, r7, #28
 8004960:	4619      	mov	r1, r3
 8004962:	480e      	ldr	r0, [pc, #56]	; (800499c <HAL_SPI_MspInit+0x120>)
 8004964:	f001 fce8 	bl	8006338 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004968:	2320      	movs	r3, #32
 800496a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800496c:	2302      	movs	r3, #2
 800496e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004970:	2300      	movs	r3, #0
 8004972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004974:	2303      	movs	r3, #3
 8004976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004978:	2306      	movs	r3, #6
 800497a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800497c:	f107 031c 	add.w	r3, r7, #28
 8004980:	4619      	mov	r1, r3
 8004982:	4807      	ldr	r0, [pc, #28]	; (80049a0 <HAL_SPI_MspInit+0x124>)
 8004984:	f001 fcd8 	bl	8006338 <HAL_GPIO_Init>
}
 8004988:	bf00      	nop
 800498a:	3730      	adds	r7, #48	; 0x30
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40013000 	.word	0x40013000
 8004994:	40021000 	.word	0x40021000
 8004998:	40003c00 	.word	0x40003c00
 800499c:	48000800 	.word	0x48000800
 80049a0:	48000400 	.word	0x48000400

080049a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b4:	d10c      	bne.n	80049d0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80049b6:	4b1b      	ldr	r3, [pc, #108]	; (8004a24 <HAL_TIM_PWM_MspInit+0x80>)
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	4a1a      	ldr	r2, [pc, #104]	; (8004a24 <HAL_TIM_PWM_MspInit+0x80>)
 80049bc:	f043 0301 	orr.w	r3, r3, #1
 80049c0:	61d3      	str	r3, [r2, #28]
 80049c2:	4b18      	ldr	r3, [pc, #96]	; (8004a24 <HAL_TIM_PWM_MspInit+0x80>)
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	617b      	str	r3, [r7, #20]
 80049cc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80049ce:	e022      	b.n	8004a16 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a14      	ldr	r2, [pc, #80]	; (8004a28 <HAL_TIM_PWM_MspInit+0x84>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d10c      	bne.n	80049f4 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80049da:	4b12      	ldr	r3, [pc, #72]	; (8004a24 <HAL_TIM_PWM_MspInit+0x80>)
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	4a11      	ldr	r2, [pc, #68]	; (8004a24 <HAL_TIM_PWM_MspInit+0x80>)
 80049e0:	f043 0302 	orr.w	r3, r3, #2
 80049e4:	61d3      	str	r3, [r2, #28]
 80049e6:	4b0f      	ldr	r3, [pc, #60]	; (8004a24 <HAL_TIM_PWM_MspInit+0x80>)
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	613b      	str	r3, [r7, #16]
 80049f0:	693b      	ldr	r3, [r7, #16]
}
 80049f2:	e010      	b.n	8004a16 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a0c      	ldr	r2, [pc, #48]	; (8004a2c <HAL_TIM_PWM_MspInit+0x88>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d10b      	bne.n	8004a16 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80049fe:	4b09      	ldr	r3, [pc, #36]	; (8004a24 <HAL_TIM_PWM_MspInit+0x80>)
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	4a08      	ldr	r2, [pc, #32]	; (8004a24 <HAL_TIM_PWM_MspInit+0x80>)
 8004a04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a08:	6193      	str	r3, [r2, #24]
 8004a0a:	4b06      	ldr	r3, [pc, #24]	; (8004a24 <HAL_TIM_PWM_MspInit+0x80>)
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	68fb      	ldr	r3, [r7, #12]
}
 8004a16:	bf00      	nop
 8004a18:	371c      	adds	r7, #28
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	40021000 	.word	0x40021000
 8004a28:	40000400 	.word	0x40000400
 8004a2c:	40013400 	.word	0x40013400

08004a30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b08e      	sub	sp, #56	; 0x38
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	605a      	str	r2, [r3, #4]
 8004a42:	609a      	str	r2, [r3, #8]
 8004a44:	60da      	str	r2, [r3, #12]
 8004a46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a50:	d139      	bne.n	8004ac6 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a52:	4b5d      	ldr	r3, [pc, #372]	; (8004bc8 <HAL_TIM_MspPostInit+0x198>)
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	4a5c      	ldr	r2, [pc, #368]	; (8004bc8 <HAL_TIM_MspPostInit+0x198>)
 8004a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a5c:	6153      	str	r3, [r2, #20]
 8004a5e:	4b5a      	ldr	r3, [pc, #360]	; (8004bc8 <HAL_TIM_MspPostInit+0x198>)
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a66:	623b      	str	r3, [r7, #32]
 8004a68:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a6a:	4b57      	ldr	r3, [pc, #348]	; (8004bc8 <HAL_TIM_MspPostInit+0x198>)
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	4a56      	ldr	r2, [pc, #344]	; (8004bc8 <HAL_TIM_MspPostInit+0x198>)
 8004a70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a74:	6153      	str	r3, [r2, #20]
 8004a76:	4b54      	ldr	r3, [pc, #336]	; (8004bc8 <HAL_TIM_MspPostInit+0x198>)
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a7e:	61fb      	str	r3, [r7, #28]
 8004a80:	69fb      	ldr	r3, [r7, #28]
    PA1     ------> TIM2_CH2
    PD3     ------> TIM2_CH1
    PD6     ------> TIM2_CH4
    PD7     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = VMA_2_Pin;
 8004a82:	2302      	movs	r3, #2
 8004a84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a86:	2302      	movs	r3, #2
 8004a88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004a92:	2301      	movs	r3, #1
 8004a94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VMA_2_GPIO_Port, &GPIO_InitStruct);
 8004a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004aa0:	f001 fc4a 	bl	8006338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VMA_1_Pin|VMA_4_Pin|VMA_3_Pin;
 8004aa4:	23c8      	movs	r3, #200	; 0xc8
 8004aa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aac:	2300      	movs	r3, #0
 8004aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004abc:	4619      	mov	r1, r3
 8004abe:	4843      	ldr	r0, [pc, #268]	; (8004bcc <HAL_TIM_MspPostInit+0x19c>)
 8004ac0:	f001 fc3a 	bl	8006338 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004ac4:	e07b      	b.n	8004bbe <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM3)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a41      	ldr	r2, [pc, #260]	; (8004bd0 <HAL_TIM_MspPostInit+0x1a0>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d138      	bne.n	8004b42 <HAL_TIM_MspPostInit+0x112>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ad0:	4b3d      	ldr	r3, [pc, #244]	; (8004bc8 <HAL_TIM_MspPostInit+0x198>)
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	4a3c      	ldr	r2, [pc, #240]	; (8004bc8 <HAL_TIM_MspPostInit+0x198>)
 8004ad6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ada:	6153      	str	r3, [r2, #20]
 8004adc:	4b3a      	ldr	r3, [pc, #232]	; (8004bc8 <HAL_TIM_MspPostInit+0x198>)
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ae4:	61bb      	str	r3, [r7, #24]
 8004ae6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ae8:	4b37      	ldr	r3, [pc, #220]	; (8004bc8 <HAL_TIM_MspPostInit+0x198>)
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	4a36      	ldr	r2, [pc, #216]	; (8004bc8 <HAL_TIM_MspPostInit+0x198>)
 8004aee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004af2:	6153      	str	r3, [r2, #20]
 8004af4:	4b34      	ldr	r3, [pc, #208]	; (8004bc8 <HAL_TIM_MspPostInit+0x198>)
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VMA_7_Pin|VMA_8_Pin|VMA_5_Pin;
 8004b00:	2313      	movs	r3, #19
 8004b02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b04:	2302      	movs	r3, #2
 8004b06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004b10:	2302      	movs	r3, #2
 8004b12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b18:	4619      	mov	r1, r3
 8004b1a:	482e      	ldr	r0, [pc, #184]	; (8004bd4 <HAL_TIM_MspPostInit+0x1a4>)
 8004b1c:	f001 fc0c 	bl	8006338 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VMA_6_Pin;
 8004b20:	2380      	movs	r3, #128	; 0x80
 8004b22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b24:	2302      	movs	r3, #2
 8004b26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004b30:	2302      	movs	r3, #2
 8004b32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VMA_6_GPIO_Port, &GPIO_InitStruct);
 8004b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b38:	4619      	mov	r1, r3
 8004b3a:	4827      	ldr	r0, [pc, #156]	; (8004bd8 <HAL_TIM_MspPostInit+0x1a8>)
 8004b3c:	f001 fbfc 	bl	8006338 <HAL_GPIO_Init>
}
 8004b40:	e03d      	b.n	8004bbe <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM8)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a25      	ldr	r2, [pc, #148]	; (8004bdc <HAL_TIM_MspPostInit+0x1ac>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d138      	bne.n	8004bbe <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b4c:	4b1e      	ldr	r3, [pc, #120]	; (8004bc8 <HAL_TIM_MspPostInit+0x198>)
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	4a1d      	ldr	r2, [pc, #116]	; (8004bc8 <HAL_TIM_MspPostInit+0x198>)
 8004b52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b56:	6153      	str	r3, [r2, #20]
 8004b58:	4b1b      	ldr	r3, [pc, #108]	; (8004bc8 <HAL_TIM_MspPostInit+0x198>)
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b60:	613b      	str	r3, [r7, #16]
 8004b62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b64:	4b18      	ldr	r3, [pc, #96]	; (8004bc8 <HAL_TIM_MspPostInit+0x198>)
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	4a17      	ldr	r2, [pc, #92]	; (8004bc8 <HAL_TIM_MspPostInit+0x198>)
 8004b6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b6e:	6153      	str	r3, [r2, #20]
 8004b70:	4b15      	ldr	r3, [pc, #84]	; (8004bc8 <HAL_TIM_MspPostInit+0x198>)
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b78:	60fb      	str	r3, [r7, #12]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_PWM_TILT_Pin;
 8004b7c:	2340      	movs	r3, #64	; 0x40
 8004b7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b80:	2302      	movs	r3, #2
 8004b82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b84:	2300      	movs	r3, #0
 8004b86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8004b8c:	2304      	movs	r3, #4
 8004b8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SERVO_PWM_TILT_GPIO_Port, &GPIO_InitStruct);
 8004b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b94:	4619      	mov	r1, r3
 8004b96:	4810      	ldr	r0, [pc, #64]	; (8004bd8 <HAL_TIM_MspPostInit+0x1a8>)
 8004b98:	f001 fbce 	bl	8006338 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SERVO_PWM_MAN_Pin;
 8004b9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ba0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004baa:	2300      	movs	r3, #0
 8004bac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8004bae:	230a      	movs	r3, #10
 8004bb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SERVO_PWM_MAN_GPIO_Port, &GPIO_InitStruct);
 8004bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	4806      	ldr	r0, [pc, #24]	; (8004bd4 <HAL_TIM_MspPostInit+0x1a4>)
 8004bba:	f001 fbbd 	bl	8006338 <HAL_GPIO_Init>
}
 8004bbe:	bf00      	nop
 8004bc0:	3738      	adds	r7, #56	; 0x38
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	48000c00 	.word	0x48000c00
 8004bd0:	40000400 	.word	0x40000400
 8004bd4:	48000400 	.word	0x48000400
 8004bd8:	48000800 	.word	0x48000800
 8004bdc:	40013400 	.word	0x40013400

08004be0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b092      	sub	sp, #72	; 0x48
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004be8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004bec:	2200      	movs	r2, #0
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	605a      	str	r2, [r3, #4]
 8004bf2:	609a      	str	r2, [r3, #8]
 8004bf4:	60da      	str	r2, [r3, #12]
 8004bf6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a79      	ldr	r2, [pc, #484]	; (8004de4 <HAL_UART_MspInit+0x204>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d145      	bne.n	8004c8e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8004c02:	4b79      	ldr	r3, [pc, #484]	; (8004de8 <HAL_UART_MspInit+0x208>)
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	4a78      	ldr	r2, [pc, #480]	; (8004de8 <HAL_UART_MspInit+0x208>)
 8004c08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c0c:	61d3      	str	r3, [r2, #28]
 8004c0e:	4b76      	ldr	r3, [pc, #472]	; (8004de8 <HAL_UART_MspInit+0x208>)
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c16:	633b      	str	r3, [r7, #48]	; 0x30
 8004c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c1a:	4b73      	ldr	r3, [pc, #460]	; (8004de8 <HAL_UART_MspInit+0x208>)
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	4a72      	ldr	r2, [pc, #456]	; (8004de8 <HAL_UART_MspInit+0x208>)
 8004c20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c24:	6153      	str	r3, [r2, #20]
 8004c26:	4b70      	ldr	r3, [pc, #448]	; (8004de8 <HAL_UART_MspInit+0x208>)
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c32:	4b6d      	ldr	r3, [pc, #436]	; (8004de8 <HAL_UART_MspInit+0x208>)
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	4a6c      	ldr	r2, [pc, #432]	; (8004de8 <HAL_UART_MspInit+0x208>)
 8004c38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c3c:	6153      	str	r3, [r2, #20]
 8004c3e:	4b6a      	ldr	r3, [pc, #424]	; (8004de8 <HAL_UART_MspInit+0x208>)
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c46:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = IMU_TX_Pin;
 8004c4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c4e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c50:	2302      	movs	r3, #2
 8004c52:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c54:	2300      	movs	r3, #0
 8004c56:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8004c5c:	2305      	movs	r3, #5
 8004c5e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(IMU_TX_GPIO_Port, &GPIO_InitStruct);
 8004c60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004c64:	4619      	mov	r1, r3
 8004c66:	4861      	ldr	r0, [pc, #388]	; (8004dec <HAL_UART_MspInit+0x20c>)
 8004c68:	f001 fb66 	bl	8006338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IMU_RX_Pin;
 8004c6c:	2304      	movs	r3, #4
 8004c6e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c70:	2302      	movs	r3, #2
 8004c72:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c74:	2300      	movs	r3, #0
 8004c76:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8004c7c:	2305      	movs	r3, #5
 8004c7e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(IMU_RX_GPIO_Port, &GPIO_InitStruct);
 8004c80:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004c84:	4619      	mov	r1, r3
 8004c86:	485a      	ldr	r0, [pc, #360]	; (8004df0 <HAL_UART_MspInit+0x210>)
 8004c88:	f001 fb56 	bl	8006338 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004c8c:	e0a6      	b.n	8004ddc <HAL_UART_MspInit+0x1fc>
  else if(huart->Instance==USART1)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a58      	ldr	r2, [pc, #352]	; (8004df4 <HAL_UART_MspInit+0x214>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d128      	bne.n	8004cea <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004c98:	4b53      	ldr	r3, [pc, #332]	; (8004de8 <HAL_UART_MspInit+0x208>)
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	4a52      	ldr	r2, [pc, #328]	; (8004de8 <HAL_UART_MspInit+0x208>)
 8004c9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ca2:	6193      	str	r3, [r2, #24]
 8004ca4:	4b50      	ldr	r3, [pc, #320]	; (8004de8 <HAL_UART_MspInit+0x208>)
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cac:	627b      	str	r3, [r7, #36]	; 0x24
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cb0:	4b4d      	ldr	r3, [pc, #308]	; (8004de8 <HAL_UART_MspInit+0x208>)
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	4a4c      	ldr	r2, [pc, #304]	; (8004de8 <HAL_UART_MspInit+0x208>)
 8004cb6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cba:	6153      	str	r3, [r2, #20]
 8004cbc:	4b4a      	ldr	r3, [pc, #296]	; (8004de8 <HAL_UART_MspInit+0x208>)
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cc4:	623b      	str	r3, [r7, #32]
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004cc8:	2330      	movs	r3, #48	; 0x30
 8004cca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ccc:	2302      	movs	r3, #2
 8004cce:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004cd8:	2307      	movs	r3, #7
 8004cda:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cdc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	4842      	ldr	r0, [pc, #264]	; (8004dec <HAL_UART_MspInit+0x20c>)
 8004ce4:	f001 fb28 	bl	8006338 <HAL_GPIO_Init>
}
 8004ce8:	e078      	b.n	8004ddc <HAL_UART_MspInit+0x1fc>
  else if(huart->Instance==USART2)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a42      	ldr	r2, [pc, #264]	; (8004df8 <HAL_UART_MspInit+0x218>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d129      	bne.n	8004d48 <HAL_UART_MspInit+0x168>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004cf4:	4b3c      	ldr	r3, [pc, #240]	; (8004de8 <HAL_UART_MspInit+0x208>)
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	4a3b      	ldr	r2, [pc, #236]	; (8004de8 <HAL_UART_MspInit+0x208>)
 8004cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cfe:	61d3      	str	r3, [r2, #28]
 8004d00:	4b39      	ldr	r3, [pc, #228]	; (8004de8 <HAL_UART_MspInit+0x208>)
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d08:	61fb      	str	r3, [r7, #28]
 8004d0a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d0c:	4b36      	ldr	r3, [pc, #216]	; (8004de8 <HAL_UART_MspInit+0x208>)
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	4a35      	ldr	r2, [pc, #212]	; (8004de8 <HAL_UART_MspInit+0x208>)
 8004d12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d16:	6153      	str	r3, [r2, #20]
 8004d18:	4b33      	ldr	r3, [pc, #204]	; (8004de8 <HAL_UART_MspInit+0x208>)
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d20:	61bb      	str	r3, [r7, #24]
 8004d22:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = OSD_TX_Pin|OSD_RX_Pin;
 8004d24:	230c      	movs	r3, #12
 8004d26:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d28:	2302      	movs	r3, #2
 8004d2a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d30:	2303      	movs	r3, #3
 8004d32:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004d34:	2307      	movs	r3, #7
 8004d36:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d42:	f001 faf9 	bl	8006338 <HAL_GPIO_Init>
}
 8004d46:	e049      	b.n	8004ddc <HAL_UART_MspInit+0x1fc>
  else if(huart->Instance==USART3)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a2b      	ldr	r2, [pc, #172]	; (8004dfc <HAL_UART_MspInit+0x21c>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d144      	bne.n	8004ddc <HAL_UART_MspInit+0x1fc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004d52:	4b25      	ldr	r3, [pc, #148]	; (8004de8 <HAL_UART_MspInit+0x208>)
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	4a24      	ldr	r2, [pc, #144]	; (8004de8 <HAL_UART_MspInit+0x208>)
 8004d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d5c:	61d3      	str	r3, [r2, #28]
 8004d5e:	4b22      	ldr	r3, [pc, #136]	; (8004de8 <HAL_UART_MspInit+0x208>)
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d66:	617b      	str	r3, [r7, #20]
 8004d68:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d6a:	4b1f      	ldr	r3, [pc, #124]	; (8004de8 <HAL_UART_MspInit+0x208>)
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	4a1e      	ldr	r2, [pc, #120]	; (8004de8 <HAL_UART_MspInit+0x208>)
 8004d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d74:	6153      	str	r3, [r2, #20]
 8004d76:	4b1c      	ldr	r3, [pc, #112]	; (8004de8 <HAL_UART_MspInit+0x208>)
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d7e:	613b      	str	r3, [r7, #16]
 8004d80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004d82:	4b19      	ldr	r3, [pc, #100]	; (8004de8 <HAL_UART_MspInit+0x208>)
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	4a18      	ldr	r2, [pc, #96]	; (8004de8 <HAL_UART_MspInit+0x208>)
 8004d88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d8c:	6153      	str	r3, [r2, #20]
 8004d8e:	4b16      	ldr	r3, [pc, #88]	; (8004de8 <HAL_UART_MspInit+0x208>)
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX_485_Pin|RX_485_Pin;
 8004d9a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004d9e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004da0:	2302      	movs	r3, #2
 8004da2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004da4:	2300      	movs	r3, #0
 8004da6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004da8:	2303      	movs	r3, #3
 8004daa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004dac:	2307      	movs	r3, #7
 8004dae:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004db0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004db4:	4619      	mov	r1, r3
 8004db6:	4812      	ldr	r0, [pc, #72]	; (8004e00 <HAL_UART_MspInit+0x220>)
 8004db8:	f001 fabe 	bl	8006338 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DE_485_Pin;
 8004dbc:	2340      	movs	r3, #64	; 0x40
 8004dbe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004dcc:	2307      	movs	r3, #7
 8004dce:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(DE_485_GPIO_Port, &GPIO_InitStruct);
 8004dd0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	480b      	ldr	r0, [pc, #44]	; (8004e04 <HAL_UART_MspInit+0x224>)
 8004dd8:	f001 faae 	bl	8006338 <HAL_GPIO_Init>
}
 8004ddc:	bf00      	nop
 8004dde:	3748      	adds	r7, #72	; 0x48
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	40005000 	.word	0x40005000
 8004de8:	40021000 	.word	0x40021000
 8004dec:	48000800 	.word	0x48000800
 8004df0:	48000c00 	.word	0x48000c00
 8004df4:	40013800 	.word	0x40013800
 8004df8:	40004400 	.word	0x40004400
 8004dfc:	40004800 	.word	0x40004800
 8004e00:	48000400 	.word	0x48000400
 8004e04:	48001400 	.word	0x48001400

08004e08 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08a      	sub	sp, #40	; 0x28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e10:	f107 0314 	add.w	r3, r7, #20
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	605a      	str	r2, [r3, #4]
 8004e1a:	609a      	str	r2, [r3, #8]
 8004e1c:	60da      	str	r2, [r3, #12]
 8004e1e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a18      	ldr	r2, [pc, #96]	; (8004e88 <HAL_PCD_MspInit+0x80>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d129      	bne.n	8004e7e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e2a:	4b18      	ldr	r3, [pc, #96]	; (8004e8c <HAL_PCD_MspInit+0x84>)
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	4a17      	ldr	r2, [pc, #92]	; (8004e8c <HAL_PCD_MspInit+0x84>)
 8004e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e34:	6153      	str	r3, [r2, #20]
 8004e36:	4b15      	ldr	r3, [pc, #84]	; (8004e8c <HAL_PCD_MspInit+0x84>)
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e3e:	613b      	str	r3, [r7, #16]
 8004e40:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004e42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e48:	2302      	movs	r3, #2
 8004e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e50:	2303      	movs	r3, #3
 8004e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8004e54:	230e      	movs	r3, #14
 8004e56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e58:	f107 0314 	add.w	r3, r7, #20
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e62:	f001 fa69 	bl	8006338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8004e66:	4b09      	ldr	r3, [pc, #36]	; (8004e8c <HAL_PCD_MspInit+0x84>)
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	4a08      	ldr	r2, [pc, #32]	; (8004e8c <HAL_PCD_MspInit+0x84>)
 8004e6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e70:	61d3      	str	r3, [r2, #28]
 8004e72:	4b06      	ldr	r3, [pc, #24]	; (8004e8c <HAL_PCD_MspInit+0x84>)
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8004e7e:	bf00      	nop
 8004e80:	3728      	adds	r7, #40	; 0x28
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	40005c00 	.word	0x40005c00
 8004e8c:	40021000 	.word	0x40021000

08004e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004e94:	e7fe      	b.n	8004e94 <NMI_Handler+0x4>

08004e96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e96:	b480      	push	{r7}
 8004e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e9a:	e7fe      	b.n	8004e9a <HardFault_Handler+0x4>

08004e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ea0:	e7fe      	b.n	8004ea0 <MemManage_Handler+0x4>

08004ea2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ea6:	e7fe      	b.n	8004ea6 <BusFault_Handler+0x4>

08004ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004eac:	e7fe      	b.n	8004eac <UsageFault_Handler+0x4>

08004eae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004eb2:	bf00      	nop
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ec0:	bf00      	nop
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ece:	bf00      	nop
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004edc:	f000 f8ba 	bl	8005054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ee0:	bf00      	nop
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004eec:	4a14      	ldr	r2, [pc, #80]	; (8004f40 <_sbrk+0x5c>)
 8004eee:	4b15      	ldr	r3, [pc, #84]	; (8004f44 <_sbrk+0x60>)
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ef8:	4b13      	ldr	r3, [pc, #76]	; (8004f48 <_sbrk+0x64>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d102      	bne.n	8004f06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f00:	4b11      	ldr	r3, [pc, #68]	; (8004f48 <_sbrk+0x64>)
 8004f02:	4a12      	ldr	r2, [pc, #72]	; (8004f4c <_sbrk+0x68>)
 8004f04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f06:	4b10      	ldr	r3, [pc, #64]	; (8004f48 <_sbrk+0x64>)
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d207      	bcs.n	8004f24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f14:	f006 f962 	bl	800b1dc <__errno>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	220c      	movs	r2, #12
 8004f1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f22:	e009      	b.n	8004f38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004f24:	4b08      	ldr	r3, [pc, #32]	; (8004f48 <_sbrk+0x64>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004f2a:	4b07      	ldr	r3, [pc, #28]	; (8004f48 <_sbrk+0x64>)
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4413      	add	r3, r2
 8004f32:	4a05      	ldr	r2, [pc, #20]	; (8004f48 <_sbrk+0x64>)
 8004f34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004f36:	68fb      	ldr	r3, [r7, #12]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3718      	adds	r7, #24
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	2000a000 	.word	0x2000a000
 8004f44:	00000400 	.word	0x00000400
 8004f48:	200001f8 	.word	0x200001f8
 8004f4c:	20000ab8 	.word	0x20000ab8

08004f50 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f50:	b480      	push	{r7}
 8004f52:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f54:	4b06      	ldr	r3, [pc, #24]	; (8004f70 <SystemInit+0x20>)
 8004f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5a:	4a05      	ldr	r2, [pc, #20]	; (8004f70 <SystemInit+0x20>)
 8004f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f64:	bf00      	nop
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	e000ed00 	.word	0xe000ed00

08004f74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004fac <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004f78:	480d      	ldr	r0, [pc, #52]	; (8004fb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8004f7a:	490e      	ldr	r1, [pc, #56]	; (8004fb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004f7c:	4a0e      	ldr	r2, [pc, #56]	; (8004fb8 <LoopForever+0xe>)
  movs r3, #0
 8004f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f80:	e002      	b.n	8004f88 <LoopCopyDataInit>

08004f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f86:	3304      	adds	r3, #4

08004f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f8c:	d3f9      	bcc.n	8004f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f8e:	4a0b      	ldr	r2, [pc, #44]	; (8004fbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8004f90:	4c0b      	ldr	r4, [pc, #44]	; (8004fc0 <LoopForever+0x16>)
  movs r3, #0
 8004f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f94:	e001      	b.n	8004f9a <LoopFillZerobss>

08004f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f98:	3204      	adds	r2, #4

08004f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f9c:	d3fb      	bcc.n	8004f96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004f9e:	f7ff ffd7 	bl	8004f50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004fa2:	f006 f921 	bl	800b1e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004fa6:	f7fd fcb7 	bl	8002918 <main>

08004faa <LoopForever>:

LoopForever:
    b LoopForever
 8004faa:	e7fe      	b.n	8004faa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004fac:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8004fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004fb4:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8004fb8:	0800c688 	.word	0x0800c688
  ldr r2, =_sbss
 8004fbc:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8004fc0:	20000ab4 	.word	0x20000ab4

08004fc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004fc4:	e7fe      	b.n	8004fc4 <ADC1_2_IRQHandler>
	...

08004fc8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004fcc:	4b08      	ldr	r3, [pc, #32]	; (8004ff0 <HAL_Init+0x28>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a07      	ldr	r2, [pc, #28]	; (8004ff0 <HAL_Init+0x28>)
 8004fd2:	f043 0310 	orr.w	r3, r3, #16
 8004fd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004fd8:	2003      	movs	r0, #3
 8004fda:	f001 f979 	bl	80062d0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004fde:	2000      	movs	r0, #0
 8004fe0:	f000 f808 	bl	8004ff4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004fe4:	f7ff fb70 	bl	80046c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	40022000 	.word	0x40022000

08004ff4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ffc:	4b12      	ldr	r3, [pc, #72]	; (8005048 <HAL_InitTick+0x54>)
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	4b12      	ldr	r3, [pc, #72]	; (800504c <HAL_InitTick+0x58>)
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	4619      	mov	r1, r3
 8005006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800500a:	fbb3 f3f1 	udiv	r3, r3, r1
 800500e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005012:	4618      	mov	r0, r3
 8005014:	f001 f983 	bl	800631e <HAL_SYSTICK_Config>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e00e      	b.n	8005040 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b0f      	cmp	r3, #15
 8005026:	d80a      	bhi.n	800503e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005028:	2200      	movs	r2, #0
 800502a:	6879      	ldr	r1, [r7, #4]
 800502c:	f04f 30ff 	mov.w	r0, #4294967295
 8005030:	f001 f959 	bl	80062e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005034:	4a06      	ldr	r2, [pc, #24]	; (8005050 <HAL_InitTick+0x5c>)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800503a:	2300      	movs	r3, #0
 800503c:	e000      	b.n	8005040 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
}
 8005040:	4618      	mov	r0, r3
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	2000008c 	.word	0x2000008c
 800504c:	20000094 	.word	0x20000094
 8005050:	20000090 	.word	0x20000090

08005054 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005054:	b480      	push	{r7}
 8005056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005058:	4b06      	ldr	r3, [pc, #24]	; (8005074 <HAL_IncTick+0x20>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	461a      	mov	r2, r3
 800505e:	4b06      	ldr	r3, [pc, #24]	; (8005078 <HAL_IncTick+0x24>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4413      	add	r3, r2
 8005064:	4a04      	ldr	r2, [pc, #16]	; (8005078 <HAL_IncTick+0x24>)
 8005066:	6013      	str	r3, [r2, #0]
}
 8005068:	bf00      	nop
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	20000094 	.word	0x20000094
 8005078:	20000aa0 	.word	0x20000aa0

0800507c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
  return uwTick;  
 8005080:	4b03      	ldr	r3, [pc, #12]	; (8005090 <HAL_GetTick+0x14>)
 8005082:	681b      	ldr	r3, [r3, #0]
}
 8005084:	4618      	mov	r0, r3
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	20000aa0 	.word	0x20000aa0

08005094 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800509c:	f7ff ffee 	bl	800507c <HAL_GetTick>
 80050a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ac:	d005      	beq.n	80050ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80050ae:	4b0a      	ldr	r3, [pc, #40]	; (80050d8 <HAL_Delay+0x44>)
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	461a      	mov	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4413      	add	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80050ba:	bf00      	nop
 80050bc:	f7ff ffde 	bl	800507c <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d8f7      	bhi.n	80050bc <HAL_Delay+0x28>
  {
  }
}
 80050cc:	bf00      	nop
 80050ce:	bf00      	nop
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	20000094 	.word	0x20000094

080050dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b09a      	sub	sp, #104	; 0x68
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050e4:	2300      	movs	r3, #0
 80050e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80050ea:	2300      	movs	r3, #0
 80050ec:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e1c9      	b.n	8005490 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	f003 0310 	and.w	r3, r3, #16
 800510a:	2b00      	cmp	r3, #0
 800510c:	d176      	bne.n	80051fc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	2b00      	cmp	r3, #0
 8005114:	d152      	bne.n	80051bc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7ff faed 	bl	8004710 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d13b      	bne.n	80051bc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 ffab 	bl	80060a0 <ADC_Disable>
 800514a:	4603      	mov	r3, r0
 800514c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005154:	f003 0310 	and.w	r3, r3, #16
 8005158:	2b00      	cmp	r3, #0
 800515a:	d12f      	bne.n	80051bc <HAL_ADC_Init+0xe0>
 800515c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005160:	2b00      	cmp	r3, #0
 8005162:	d12b      	bne.n	80051bc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005168:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800516c:	f023 0302 	bic.w	r3, r3, #2
 8005170:	f043 0202 	orr.w	r2, r3, #2
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689a      	ldr	r2, [r3, #8]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005186:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005196:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005198:	4b86      	ldr	r3, [pc, #536]	; (80053b4 <HAL_ADC_Init+0x2d8>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a86      	ldr	r2, [pc, #536]	; (80053b8 <HAL_ADC_Init+0x2dc>)
 800519e:	fba2 2303 	umull	r2, r3, r2, r3
 80051a2:	0c9a      	lsrs	r2, r3, #18
 80051a4:	4613      	mov	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80051ae:	e002      	b.n	80051b6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	3b01      	subs	r3, #1
 80051b4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1f9      	bne.n	80051b0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d007      	beq.n	80051da <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80051d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051d8:	d110      	bne.n	80051fc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051de:	f023 0312 	bic.w	r3, r3, #18
 80051e2:	f043 0210 	orr.w	r2, r3, #16
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ee:	f043 0201 	orr.w	r2, r3, #1
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005200:	f003 0310 	and.w	r3, r3, #16
 8005204:	2b00      	cmp	r3, #0
 8005206:	f040 8136 	bne.w	8005476 <HAL_ADC_Init+0x39a>
 800520a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800520e:	2b00      	cmp	r3, #0
 8005210:	f040 8131 	bne.w	8005476 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800521e:	2b00      	cmp	r3, #0
 8005220:	f040 8129 	bne.w	8005476 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005228:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800522c:	f043 0202 	orr.w	r2, r3, #2
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800523c:	d004      	beq.n	8005248 <HAL_ADC_Init+0x16c>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a5e      	ldr	r2, [pc, #376]	; (80053bc <HAL_ADC_Init+0x2e0>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d101      	bne.n	800524c <HAL_ADC_Init+0x170>
 8005248:	4b5d      	ldr	r3, [pc, #372]	; (80053c0 <HAL_ADC_Init+0x2e4>)
 800524a:	e000      	b.n	800524e <HAL_ADC_Init+0x172>
 800524c:	4b5d      	ldr	r3, [pc, #372]	; (80053c4 <HAL_ADC_Init+0x2e8>)
 800524e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005258:	d102      	bne.n	8005260 <HAL_ADC_Init+0x184>
 800525a:	4b58      	ldr	r3, [pc, #352]	; (80053bc <HAL_ADC_Init+0x2e0>)
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	e01a      	b.n	8005296 <HAL_ADC_Init+0x1ba>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a55      	ldr	r2, [pc, #340]	; (80053bc <HAL_ADC_Init+0x2e0>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d103      	bne.n	8005272 <HAL_ADC_Init+0x196>
 800526a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	e011      	b.n	8005296 <HAL_ADC_Init+0x1ba>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a54      	ldr	r2, [pc, #336]	; (80053c8 <HAL_ADC_Init+0x2ec>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d102      	bne.n	8005282 <HAL_ADC_Init+0x1a6>
 800527c:	4b53      	ldr	r3, [pc, #332]	; (80053cc <HAL_ADC_Init+0x2f0>)
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	e009      	b.n	8005296 <HAL_ADC_Init+0x1ba>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a51      	ldr	r2, [pc, #324]	; (80053cc <HAL_ADC_Init+0x2f0>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d102      	bne.n	8005292 <HAL_ADC_Init+0x1b6>
 800528c:	4b4e      	ldr	r3, [pc, #312]	; (80053c8 <HAL_ADC_Init+0x2ec>)
 800528e:	60fb      	str	r3, [r7, #12]
 8005290:	e001      	b.n	8005296 <HAL_ADC_Init+0x1ba>
 8005292:	2300      	movs	r3, #0
 8005294:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f003 0303 	and.w	r3, r3, #3
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d108      	bne.n	80052b6 <HAL_ADC_Init+0x1da>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d101      	bne.n	80052b6 <HAL_ADC_Init+0x1da>
 80052b2:	2301      	movs	r3, #1
 80052b4:	e000      	b.n	80052b8 <HAL_ADC_Init+0x1dc>
 80052b6:	2300      	movs	r3, #0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d11c      	bne.n	80052f6 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80052bc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d010      	beq.n	80052e4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f003 0303 	and.w	r3, r3, #3
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d107      	bne.n	80052de <HAL_ADC_Init+0x202>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d101      	bne.n	80052de <HAL_ADC_Init+0x202>
 80052da:	2301      	movs	r3, #1
 80052dc:	e000      	b.n	80052e0 <HAL_ADC_Init+0x204>
 80052de:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d108      	bne.n	80052f6 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80052e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	431a      	orrs	r2, r3
 80052f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052f4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	7e5b      	ldrb	r3, [r3, #25]
 80052fa:	035b      	lsls	r3, r3, #13
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005300:	2a01      	cmp	r2, #1
 8005302:	d002      	beq.n	800530a <HAL_ADC_Init+0x22e>
 8005304:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005308:	e000      	b.n	800530c <HAL_ADC_Init+0x230>
 800530a:	2200      	movs	r2, #0
 800530c:	431a      	orrs	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	431a      	orrs	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	4313      	orrs	r3, r2
 800531a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800531c:	4313      	orrs	r3, r2
 800531e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d11b      	bne.n	8005362 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	7e5b      	ldrb	r3, [r3, #25]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d109      	bne.n	8005346 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	3b01      	subs	r3, #1
 8005338:	045a      	lsls	r2, r3, #17
 800533a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800533c:	4313      	orrs	r3, r2
 800533e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005342:	663b      	str	r3, [r7, #96]	; 0x60
 8005344:	e00d      	b.n	8005362 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800534e:	f043 0220 	orr.w	r2, r3, #32
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535a:	f043 0201 	orr.w	r2, r3, #1
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005366:	2b01      	cmp	r3, #1
 8005368:	d03a      	beq.n	80053e0 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a16      	ldr	r2, [pc, #88]	; (80053c8 <HAL_ADC_Init+0x2ec>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d004      	beq.n	800537e <HAL_ADC_Init+0x2a2>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a14      	ldr	r2, [pc, #80]	; (80053cc <HAL_ADC_Init+0x2f0>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d128      	bne.n	80053d0 <HAL_ADC_Init+0x2f4>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005382:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8005386:	d012      	beq.n	80053ae <HAL_ADC_Init+0x2d2>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005390:	d00a      	beq.n	80053a8 <HAL_ADC_Init+0x2cc>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005396:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800539a:	d002      	beq.n	80053a2 <HAL_ADC_Init+0x2c6>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a0:	e018      	b.n	80053d4 <HAL_ADC_Init+0x2f8>
 80053a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053a6:	e015      	b.n	80053d4 <HAL_ADC_Init+0x2f8>
 80053a8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80053ac:	e012      	b.n	80053d4 <HAL_ADC_Init+0x2f8>
 80053ae:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80053b2:	e00f      	b.n	80053d4 <HAL_ADC_Init+0x2f8>
 80053b4:	2000008c 	.word	0x2000008c
 80053b8:	431bde83 	.word	0x431bde83
 80053bc:	50000100 	.word	0x50000100
 80053c0:	50000300 	.word	0x50000300
 80053c4:	50000700 	.word	0x50000700
 80053c8:	50000400 	.word	0x50000400
 80053cc:	50000500 	.word	0x50000500
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80053d8:	4313      	orrs	r3, r2
 80053da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053dc:	4313      	orrs	r3, r2
 80053de:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f003 030c 	and.w	r3, r3, #12
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d114      	bne.n	8005418 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	6812      	ldr	r2, [r2, #0]
 80053f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053fc:	f023 0302 	bic.w	r3, r3, #2
 8005400:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	7e1b      	ldrb	r3, [r3, #24]
 8005406:	039a      	lsls	r2, r3, #14
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	4313      	orrs	r3, r2
 8005412:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005414:	4313      	orrs	r3, r2
 8005416:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68da      	ldr	r2, [r3, #12]
 800541e:	4b1e      	ldr	r3, [pc, #120]	; (8005498 <HAL_ADC_Init+0x3bc>)
 8005420:	4013      	ands	r3, r2
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	6812      	ldr	r2, [r2, #0]
 8005426:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005428:	430b      	orrs	r3, r1
 800542a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d10c      	bne.n	800544e <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543a:	f023 010f 	bic.w	r1, r3, #15
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	1e5a      	subs	r2, r3, #1
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	430a      	orrs	r2, r1
 800544a:	631a      	str	r2, [r3, #48]	; 0x30
 800544c:	e007      	b.n	800545e <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f022 020f 	bic.w	r2, r2, #15
 800545c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005468:	f023 0303 	bic.w	r3, r3, #3
 800546c:	f043 0201 	orr.w	r2, r3, #1
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	641a      	str	r2, [r3, #64]	; 0x40
 8005474:	e00a      	b.n	800548c <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	f023 0312 	bic.w	r3, r3, #18
 800547e:	f043 0210 	orr.w	r2, r3, #16
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8005486:	2301      	movs	r3, #1
 8005488:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800548c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005490:	4618      	mov	r0, r3
 8005492:	3768      	adds	r7, #104	; 0x68
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	fff0c007 	.word	0xfff0c007

0800549c <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054a4:	2300      	movs	r3, #0
 80054a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f003 0304 	and.w	r3, r3, #4
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f040 8123 	bne.w	80056fe <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d101      	bne.n	80054c6 <HAL_ADC_Start_IT+0x2a>
 80054c2:	2302      	movs	r3, #2
 80054c4:	e11e      	b.n	8005704 <HAL_ADC_Start_IT+0x268>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 fd82 	bl	8005fd8 <ADC_Enable>
 80054d4:	4603      	mov	r3, r0
 80054d6:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80054d8:	7bfb      	ldrb	r3, [r7, #15]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f040 810a 	bne.w	80056f4 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80054e8:	f023 0301 	bic.w	r3, r3, #1
 80054ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054fc:	d004      	beq.n	8005508 <HAL_ADC_Start_IT+0x6c>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a82      	ldr	r2, [pc, #520]	; (800570c <HAL_ADC_Start_IT+0x270>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d106      	bne.n	8005516 <HAL_ADC_Start_IT+0x7a>
 8005508:	4b81      	ldr	r3, [pc, #516]	; (8005710 <HAL_ADC_Start_IT+0x274>)
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f003 031f 	and.w	r3, r3, #31
 8005510:	2b00      	cmp	r3, #0
 8005512:	d010      	beq.n	8005536 <HAL_ADC_Start_IT+0x9a>
 8005514:	e005      	b.n	8005522 <HAL_ADC_Start_IT+0x86>
 8005516:	4b7f      	ldr	r3, [pc, #508]	; (8005714 <HAL_ADC_Start_IT+0x278>)
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f003 031f 	and.w	r3, r3, #31
 800551e:	2b00      	cmp	r3, #0
 8005520:	d009      	beq.n	8005536 <HAL_ADC_Start_IT+0x9a>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800552a:	d004      	beq.n	8005536 <HAL_ADC_Start_IT+0x9a>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a79      	ldr	r2, [pc, #484]	; (8005718 <HAL_ADC_Start_IT+0x27c>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d115      	bne.n	8005562 <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d036      	beq.n	80055be <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005554:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005558:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8005560:	e02d      	b.n	80055be <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005566:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005576:	d004      	beq.n	8005582 <HAL_ADC_Start_IT+0xe6>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a63      	ldr	r2, [pc, #396]	; (800570c <HAL_ADC_Start_IT+0x270>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d10a      	bne.n	8005598 <HAL_ADC_Start_IT+0xfc>
 8005582:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	bf14      	ite	ne
 8005590:	2301      	movne	r3, #1
 8005592:	2300      	moveq	r3, #0
 8005594:	b2db      	uxtb	r3, r3
 8005596:	e008      	b.n	80055aa <HAL_ADC_Start_IT+0x10e>
 8005598:	4b5f      	ldr	r3, [pc, #380]	; (8005718 <HAL_ADC_Start_IT+0x27c>)
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	bf14      	ite	ne
 80055a4:	2301      	movne	r3, #1
 80055a6:	2300      	moveq	r3, #0
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d007      	beq.n	80055be <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80055b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ca:	d106      	bne.n	80055da <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d0:	f023 0206 	bic.w	r2, r3, #6
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	645a      	str	r2, [r3, #68]	; 0x44
 80055d8:	e002      	b.n	80055e0 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	221c      	movs	r2, #28
 80055ee:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	2b08      	cmp	r3, #8
 80055f6:	d110      	bne.n	800561a <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0204 	bic.w	r2, r2, #4
 8005606:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	685a      	ldr	r2, [r3, #4]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f042 0208 	orr.w	r2, r2, #8
 8005616:	605a      	str	r2, [r3, #4]
          break;
 8005618:	e008      	b.n	800562c <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f042 020c 	orr.w	r2, r2, #12
 8005628:	605a      	str	r2, [r3, #4]
          break;
 800562a:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005630:	2b01      	cmp	r3, #1
 8005632:	d107      	bne.n	8005644 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 0210 	bic.w	r2, r2, #16
 8005642:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800564c:	d004      	beq.n	8005658 <HAL_ADC_Start_IT+0x1bc>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a2e      	ldr	r2, [pc, #184]	; (800570c <HAL_ADC_Start_IT+0x270>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d106      	bne.n	8005666 <HAL_ADC_Start_IT+0x1ca>
 8005658:	4b2d      	ldr	r3, [pc, #180]	; (8005710 <HAL_ADC_Start_IT+0x274>)
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f003 031f 	and.w	r3, r3, #31
 8005660:	2b00      	cmp	r3, #0
 8005662:	d03e      	beq.n	80056e2 <HAL_ADC_Start_IT+0x246>
 8005664:	e005      	b.n	8005672 <HAL_ADC_Start_IT+0x1d6>
 8005666:	4b2b      	ldr	r3, [pc, #172]	; (8005714 <HAL_ADC_Start_IT+0x278>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f003 031f 	and.w	r3, r3, #31
 800566e:	2b00      	cmp	r3, #0
 8005670:	d037      	beq.n	80056e2 <HAL_ADC_Start_IT+0x246>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800567a:	d004      	beq.n	8005686 <HAL_ADC_Start_IT+0x1ea>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a22      	ldr	r2, [pc, #136]	; (800570c <HAL_ADC_Start_IT+0x270>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d106      	bne.n	8005694 <HAL_ADC_Start_IT+0x1f8>
 8005686:	4b22      	ldr	r3, [pc, #136]	; (8005710 <HAL_ADC_Start_IT+0x274>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f003 031f 	and.w	r3, r3, #31
 800568e:	2b05      	cmp	r3, #5
 8005690:	d027      	beq.n	80056e2 <HAL_ADC_Start_IT+0x246>
 8005692:	e005      	b.n	80056a0 <HAL_ADC_Start_IT+0x204>
 8005694:	4b1f      	ldr	r3, [pc, #124]	; (8005714 <HAL_ADC_Start_IT+0x278>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f003 031f 	and.w	r3, r3, #31
 800569c:	2b05      	cmp	r3, #5
 800569e:	d020      	beq.n	80056e2 <HAL_ADC_Start_IT+0x246>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056a8:	d004      	beq.n	80056b4 <HAL_ADC_Start_IT+0x218>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a17      	ldr	r2, [pc, #92]	; (800570c <HAL_ADC_Start_IT+0x270>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d106      	bne.n	80056c2 <HAL_ADC_Start_IT+0x226>
 80056b4:	4b16      	ldr	r3, [pc, #88]	; (8005710 <HAL_ADC_Start_IT+0x274>)
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f003 031f 	and.w	r3, r3, #31
 80056bc:	2b09      	cmp	r3, #9
 80056be:	d010      	beq.n	80056e2 <HAL_ADC_Start_IT+0x246>
 80056c0:	e005      	b.n	80056ce <HAL_ADC_Start_IT+0x232>
 80056c2:	4b14      	ldr	r3, [pc, #80]	; (8005714 <HAL_ADC_Start_IT+0x278>)
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f003 031f 	and.w	r3, r3, #31
 80056ca:	2b09      	cmp	r3, #9
 80056cc:	d009      	beq.n	80056e2 <HAL_ADC_Start_IT+0x246>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056d6:	d004      	beq.n	80056e2 <HAL_ADC_Start_IT+0x246>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a0e      	ldr	r2, [pc, #56]	; (8005718 <HAL_ADC_Start_IT+0x27c>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d10f      	bne.n	8005702 <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	689a      	ldr	r2, [r3, #8]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f042 0204 	orr.w	r2, r2, #4
 80056f0:	609a      	str	r2, [r3, #8]
 80056f2:	e006      	b.n	8005702 <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80056fc:	e001      	b.n	8005702 <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80056fe:	2302      	movs	r3, #2
 8005700:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005702:	7bfb      	ldrb	r3, [r7, #15]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	50000100 	.word	0x50000100
 8005710:	50000300 	.word	0x50000300
 8005714:	50000700 	.word	0x50000700
 8005718:	50000400 	.word	0x50000400

0800571c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800572a:	4618      	mov	r0, r3
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr

08005736 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b084      	sub	sp, #16
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
 800573e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005740:	2300      	movs	r3, #0
 8005742:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800574a:	2b01      	cmp	r3, #1
 800574c:	d101      	bne.n	8005752 <HAL_ADCEx_Calibration_Start+0x1c>
 800574e:	2302      	movs	r3, #2
 8005750:	e05f      	b.n	8005812 <HAL_ADCEx_Calibration_Start+0xdc>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fca0 	bl	80060a0 <ADC_Disable>
 8005760:	4603      	mov	r3, r0
 8005762:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005764:	7bfb      	ldrb	r3, [r7, #15]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d14e      	bne.n	8005808 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689a      	ldr	r2, [r3, #8]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800577e:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	2b01      	cmp	r3, #1
 8005784:	d107      	bne.n	8005796 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005794:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80057a4:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80057a6:	f7ff fc69 	bl	800507c <HAL_GetTick>
 80057aa:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80057ac:	e01c      	b.n	80057e8 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80057ae:	f7ff fc65 	bl	800507c <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	2b0a      	cmp	r3, #10
 80057ba:	d915      	bls.n	80057e8 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057ca:	d10d      	bne.n	80057e8 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d0:	f023 0312 	bic.w	r3, r3, #18
 80057d4:	f043 0210 	orr.w	r2, r3, #16
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e014      	b.n	8005812 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057f6:	d0da      	beq.n	80057ae <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fc:	f023 0303 	bic.w	r3, r3, #3
 8005800:	f043 0201 	orr.w	r2, r3, #1
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005810:	7bfb      	ldrb	r3, [r7, #15]
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
	...

0800581c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800581c:	b480      	push	{r7}
 800581e:	b09b      	sub	sp, #108	; 0x6c
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800582c:	2300      	movs	r3, #0
 800582e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005836:	2b01      	cmp	r3, #1
 8005838:	d101      	bne.n	800583e <HAL_ADC_ConfigChannel+0x22>
 800583a:	2302      	movs	r3, #2
 800583c:	e2cb      	b.n	8005dd6 <HAL_ADC_ConfigChannel+0x5ba>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b00      	cmp	r3, #0
 8005852:	f040 82af 	bne.w	8005db4 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	2b04      	cmp	r3, #4
 800585c:	d81c      	bhi.n	8005898 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	4613      	mov	r3, r2
 800586a:	005b      	lsls	r3, r3, #1
 800586c:	4413      	add	r3, r2
 800586e:	005b      	lsls	r3, r3, #1
 8005870:	461a      	mov	r2, r3
 8005872:	231f      	movs	r3, #31
 8005874:	4093      	lsls	r3, r2
 8005876:	43db      	mvns	r3, r3
 8005878:	4019      	ands	r1, r3
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	6818      	ldr	r0, [r3, #0]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	4613      	mov	r3, r2
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	4413      	add	r3, r2
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	fa00 f203 	lsl.w	r2, r0, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	430a      	orrs	r2, r1
 8005894:	631a      	str	r2, [r3, #48]	; 0x30
 8005896:	e063      	b.n	8005960 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	2b09      	cmp	r3, #9
 800589e:	d81e      	bhi.n	80058de <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	4613      	mov	r3, r2
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	4413      	add	r3, r2
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	3b1e      	subs	r3, #30
 80058b4:	221f      	movs	r2, #31
 80058b6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ba:	43db      	mvns	r3, r3
 80058bc:	4019      	ands	r1, r3
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	6818      	ldr	r0, [r3, #0]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	4613      	mov	r3, r2
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	4413      	add	r3, r2
 80058cc:	005b      	lsls	r3, r3, #1
 80058ce:	3b1e      	subs	r3, #30
 80058d0:	fa00 f203 	lsl.w	r2, r0, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	430a      	orrs	r2, r1
 80058da:	635a      	str	r2, [r3, #52]	; 0x34
 80058dc:	e040      	b.n	8005960 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2b0e      	cmp	r3, #14
 80058e4:	d81e      	bhi.n	8005924 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	4613      	mov	r3, r2
 80058f2:	005b      	lsls	r3, r3, #1
 80058f4:	4413      	add	r3, r2
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	3b3c      	subs	r3, #60	; 0x3c
 80058fa:	221f      	movs	r2, #31
 80058fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005900:	43db      	mvns	r3, r3
 8005902:	4019      	ands	r1, r3
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	6818      	ldr	r0, [r3, #0]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	4613      	mov	r3, r2
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	4413      	add	r3, r2
 8005912:	005b      	lsls	r3, r3, #1
 8005914:	3b3c      	subs	r3, #60	; 0x3c
 8005916:	fa00 f203 	lsl.w	r2, r0, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	430a      	orrs	r2, r1
 8005920:	639a      	str	r2, [r3, #56]	; 0x38
 8005922:	e01d      	b.n	8005960 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	4613      	mov	r3, r2
 8005930:	005b      	lsls	r3, r3, #1
 8005932:	4413      	add	r3, r2
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	3b5a      	subs	r3, #90	; 0x5a
 8005938:	221f      	movs	r2, #31
 800593a:	fa02 f303 	lsl.w	r3, r2, r3
 800593e:	43db      	mvns	r3, r3
 8005940:	4019      	ands	r1, r3
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	6818      	ldr	r0, [r3, #0]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	4613      	mov	r3, r2
 800594c:	005b      	lsls	r3, r3, #1
 800594e:	4413      	add	r3, r2
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	3b5a      	subs	r3, #90	; 0x5a
 8005954:	fa00 f203 	lsl.w	r2, r0, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 030c 	and.w	r3, r3, #12
 800596a:	2b00      	cmp	r3, #0
 800596c:	f040 80e5 	bne.w	8005b3a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2b09      	cmp	r3, #9
 8005976:	d91c      	bls.n	80059b2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6999      	ldr	r1, [r3, #24]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	4613      	mov	r3, r2
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	4413      	add	r3, r2
 8005988:	3b1e      	subs	r3, #30
 800598a:	2207      	movs	r2, #7
 800598c:	fa02 f303 	lsl.w	r3, r2, r3
 8005990:	43db      	mvns	r3, r3
 8005992:	4019      	ands	r1, r3
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	6898      	ldr	r0, [r3, #8]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	4613      	mov	r3, r2
 800599e:	005b      	lsls	r3, r3, #1
 80059a0:	4413      	add	r3, r2
 80059a2:	3b1e      	subs	r3, #30
 80059a4:	fa00 f203 	lsl.w	r2, r0, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	430a      	orrs	r2, r1
 80059ae:	619a      	str	r2, [r3, #24]
 80059b0:	e019      	b.n	80059e6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6959      	ldr	r1, [r3, #20]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	4613      	mov	r3, r2
 80059be:	005b      	lsls	r3, r3, #1
 80059c0:	4413      	add	r3, r2
 80059c2:	2207      	movs	r2, #7
 80059c4:	fa02 f303 	lsl.w	r3, r2, r3
 80059c8:	43db      	mvns	r3, r3
 80059ca:	4019      	ands	r1, r3
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	6898      	ldr	r0, [r3, #8]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	4613      	mov	r3, r2
 80059d6:	005b      	lsls	r3, r3, #1
 80059d8:	4413      	add	r3, r2
 80059da:	fa00 f203 	lsl.w	r2, r0, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	695a      	ldr	r2, [r3, #20]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	08db      	lsrs	r3, r3, #3
 80059f2:	f003 0303 	and.w	r3, r3, #3
 80059f6:	005b      	lsls	r3, r3, #1
 80059f8:	fa02 f303 	lsl.w	r3, r2, r3
 80059fc:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	3b01      	subs	r3, #1
 8005a04:	2b03      	cmp	r3, #3
 8005a06:	d84f      	bhi.n	8005aa8 <HAL_ADC_ConfigChannel+0x28c>
 8005a08:	a201      	add	r2, pc, #4	; (adr r2, 8005a10 <HAL_ADC_ConfigChannel+0x1f4>)
 8005a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a0e:	bf00      	nop
 8005a10:	08005a21 	.word	0x08005a21
 8005a14:	08005a43 	.word	0x08005a43
 8005a18:	08005a65 	.word	0x08005a65
 8005a1c:	08005a87 	.word	0x08005a87
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005a26:	4b9f      	ldr	r3, [pc, #636]	; (8005ca4 <HAL_ADC_ConfigChannel+0x488>)
 8005a28:	4013      	ands	r3, r2
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	6812      	ldr	r2, [r2, #0]
 8005a2e:	0691      	lsls	r1, r2, #26
 8005a30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a32:	430a      	orrs	r2, r1
 8005a34:	431a      	orrs	r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005a3e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005a40:	e07e      	b.n	8005b40 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005a48:	4b96      	ldr	r3, [pc, #600]	; (8005ca4 <HAL_ADC_ConfigChannel+0x488>)
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	6812      	ldr	r2, [r2, #0]
 8005a50:	0691      	lsls	r1, r2, #26
 8005a52:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a54:	430a      	orrs	r2, r1
 8005a56:	431a      	orrs	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005a60:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005a62:	e06d      	b.n	8005b40 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005a6a:	4b8e      	ldr	r3, [pc, #568]	; (8005ca4 <HAL_ADC_ConfigChannel+0x488>)
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	6812      	ldr	r2, [r2, #0]
 8005a72:	0691      	lsls	r1, r2, #26
 8005a74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a76:	430a      	orrs	r2, r1
 8005a78:	431a      	orrs	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005a82:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005a84:	e05c      	b.n	8005b40 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005a8c:	4b85      	ldr	r3, [pc, #532]	; (8005ca4 <HAL_ADC_ConfigChannel+0x488>)
 8005a8e:	4013      	ands	r3, r2
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	6812      	ldr	r2, [r2, #0]
 8005a94:	0691      	lsls	r1, r2, #26
 8005a96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005aa4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005aa6:	e04b      	b.n	8005b40 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	069b      	lsls	r3, r3, #26
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d107      	bne.n	8005acc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005aca:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ad2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	069b      	lsls	r3, r3, #26
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d107      	bne.n	8005af0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005aee:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005af6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	069b      	lsls	r3, r3, #26
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d107      	bne.n	8005b14 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005b12:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	069b      	lsls	r3, r3, #26
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d10a      	bne.n	8005b3e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005b36:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8005b38:	e001      	b.n	8005b3e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8005b3a:	bf00      	nop
 8005b3c:	e000      	b.n	8005b40 <HAL_ADC_ConfigChannel+0x324>
      break;
 8005b3e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f003 0303 	and.w	r3, r3, #3
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d108      	bne.n	8005b60 <HAL_ADC_ConfigChannel+0x344>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d101      	bne.n	8005b60 <HAL_ADC_ConfigChannel+0x344>
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e000      	b.n	8005b62 <HAL_ADC_ConfigChannel+0x346>
 8005b60:	2300      	movs	r3, #0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f040 8131 	bne.w	8005dca <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d00f      	beq.n	8005b90 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b82:	43da      	mvns	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	400a      	ands	r2, r1
 8005b8a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8005b8e:	e049      	b.n	8005c24 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	409a      	lsls	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2b09      	cmp	r3, #9
 8005bb0:	d91c      	bls.n	8005bec <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	6999      	ldr	r1, [r3, #24]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	4413      	add	r3, r2
 8005bc2:	3b1b      	subs	r3, #27
 8005bc4:	2207      	movs	r2, #7
 8005bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bca:	43db      	mvns	r3, r3
 8005bcc:	4019      	ands	r1, r3
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	6898      	ldr	r0, [r3, #8]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	005b      	lsls	r3, r3, #1
 8005bda:	4413      	add	r3, r2
 8005bdc:	3b1b      	subs	r3, #27
 8005bde:	fa00 f203 	lsl.w	r2, r0, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	619a      	str	r2, [r3, #24]
 8005bea:	e01b      	b.n	8005c24 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6959      	ldr	r1, [r3, #20]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	1c5a      	adds	r2, r3, #1
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	005b      	lsls	r3, r3, #1
 8005bfc:	4413      	add	r3, r2
 8005bfe:	2207      	movs	r2, #7
 8005c00:	fa02 f303 	lsl.w	r3, r2, r3
 8005c04:	43db      	mvns	r3, r3
 8005c06:	4019      	ands	r1, r3
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	6898      	ldr	r0, [r3, #8]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	1c5a      	adds	r2, r3, #1
 8005c12:	4613      	mov	r3, r2
 8005c14:	005b      	lsls	r3, r3, #1
 8005c16:	4413      	add	r3, r2
 8005c18:	fa00 f203 	lsl.w	r2, r0, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c2c:	d004      	beq.n	8005c38 <HAL_ADC_ConfigChannel+0x41c>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a1d      	ldr	r2, [pc, #116]	; (8005ca8 <HAL_ADC_ConfigChannel+0x48c>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d101      	bne.n	8005c3c <HAL_ADC_ConfigChannel+0x420>
 8005c38:	4b1c      	ldr	r3, [pc, #112]	; (8005cac <HAL_ADC_ConfigChannel+0x490>)
 8005c3a:	e000      	b.n	8005c3e <HAL_ADC_ConfigChannel+0x422>
 8005c3c:	4b1c      	ldr	r3, [pc, #112]	; (8005cb0 <HAL_ADC_ConfigChannel+0x494>)
 8005c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2b10      	cmp	r3, #16
 8005c46:	d105      	bne.n	8005c54 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005c48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d015      	beq.n	8005c80 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005c58:	2b11      	cmp	r3, #17
 8005c5a:	d105      	bne.n	8005c68 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005c5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00b      	beq.n	8005c80 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005c6c:	2b12      	cmp	r3, #18
 8005c6e:	f040 80ac 	bne.w	8005dca <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8005c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f040 80a5 	bne.w	8005dca <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c88:	d102      	bne.n	8005c90 <HAL_ADC_ConfigChannel+0x474>
 8005c8a:	4b07      	ldr	r3, [pc, #28]	; (8005ca8 <HAL_ADC_ConfigChannel+0x48c>)
 8005c8c:	60fb      	str	r3, [r7, #12]
 8005c8e:	e023      	b.n	8005cd8 <HAL_ADC_ConfigChannel+0x4bc>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a04      	ldr	r2, [pc, #16]	; (8005ca8 <HAL_ADC_ConfigChannel+0x48c>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d10c      	bne.n	8005cb4 <HAL_ADC_ConfigChannel+0x498>
 8005c9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005c9e:	60fb      	str	r3, [r7, #12]
 8005ca0:	e01a      	b.n	8005cd8 <HAL_ADC_ConfigChannel+0x4bc>
 8005ca2:	bf00      	nop
 8005ca4:	83fff000 	.word	0x83fff000
 8005ca8:	50000100 	.word	0x50000100
 8005cac:	50000300 	.word	0x50000300
 8005cb0:	50000700 	.word	0x50000700
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a4a      	ldr	r2, [pc, #296]	; (8005de4 <HAL_ADC_ConfigChannel+0x5c8>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d102      	bne.n	8005cc4 <HAL_ADC_ConfigChannel+0x4a8>
 8005cbe:	4b4a      	ldr	r3, [pc, #296]	; (8005de8 <HAL_ADC_ConfigChannel+0x5cc>)
 8005cc0:	60fb      	str	r3, [r7, #12]
 8005cc2:	e009      	b.n	8005cd8 <HAL_ADC_ConfigChannel+0x4bc>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a47      	ldr	r2, [pc, #284]	; (8005de8 <HAL_ADC_ConfigChannel+0x5cc>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d102      	bne.n	8005cd4 <HAL_ADC_ConfigChannel+0x4b8>
 8005cce:	4b45      	ldr	r3, [pc, #276]	; (8005de4 <HAL_ADC_ConfigChannel+0x5c8>)
 8005cd0:	60fb      	str	r3, [r7, #12]
 8005cd2:	e001      	b.n	8005cd8 <HAL_ADC_ConfigChannel+0x4bc>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f003 0303 	and.w	r3, r3, #3
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d108      	bne.n	8005cf8 <HAL_ADC_ConfigChannel+0x4dc>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0301 	and.w	r3, r3, #1
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d101      	bne.n	8005cf8 <HAL_ADC_ConfigChannel+0x4dc>
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e000      	b.n	8005cfa <HAL_ADC_ConfigChannel+0x4de>
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d150      	bne.n	8005da0 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005cfe:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d010      	beq.n	8005d26 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f003 0303 	and.w	r3, r3, #3
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d107      	bne.n	8005d20 <HAL_ADC_ConfigChannel+0x504>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d101      	bne.n	8005d20 <HAL_ADC_ConfigChannel+0x504>
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e000      	b.n	8005d22 <HAL_ADC_ConfigChannel+0x506>
 8005d20:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d13c      	bne.n	8005da0 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2b10      	cmp	r3, #16
 8005d2c:	d11d      	bne.n	8005d6a <HAL_ADC_ConfigChannel+0x54e>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d36:	d118      	bne.n	8005d6a <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005d38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005d40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d42:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005d44:	4b29      	ldr	r3, [pc, #164]	; (8005dec <HAL_ADC_ConfigChannel+0x5d0>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a29      	ldr	r2, [pc, #164]	; (8005df0 <HAL_ADC_ConfigChannel+0x5d4>)
 8005d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d4e:	0c9a      	lsrs	r2, r3, #18
 8005d50:	4613      	mov	r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005d5a:	e002      	b.n	8005d62 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1f9      	bne.n	8005d5c <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005d68:	e02e      	b.n	8005dc8 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2b11      	cmp	r3, #17
 8005d70:	d10b      	bne.n	8005d8a <HAL_ADC_ConfigChannel+0x56e>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d7a:	d106      	bne.n	8005d8a <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005d7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005d84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d86:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005d88:	e01e      	b.n	8005dc8 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2b12      	cmp	r3, #18
 8005d90:	d11a      	bne.n	8005dc8 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d9c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005d9e:	e013      	b.n	8005dc8 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da4:	f043 0220 	orr.w	r2, r3, #32
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005db2:	e00a      	b.n	8005dca <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db8:	f043 0220 	orr.w	r2, r3, #32
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005dc6:	e000      	b.n	8005dca <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005dc8:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005dd2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	376c      	adds	r7, #108	; 0x6c
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	50000400 	.word	0x50000400
 8005de8:	50000500 	.word	0x50000500
 8005dec:	2000008c 	.word	0x2000008c
 8005df0:	431bde83 	.word	0x431bde83

08005df4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b099      	sub	sp, #100	; 0x64
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e0c:	d102      	bne.n	8005e14 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8005e0e:	4b6d      	ldr	r3, [pc, #436]	; (8005fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005e10:	60bb      	str	r3, [r7, #8]
 8005e12:	e01a      	b.n	8005e4a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a6a      	ldr	r2, [pc, #424]	; (8005fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d103      	bne.n	8005e26 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8005e1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005e22:	60bb      	str	r3, [r7, #8]
 8005e24:	e011      	b.n	8005e4a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a67      	ldr	r2, [pc, #412]	; (8005fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d102      	bne.n	8005e36 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005e30:	4b66      	ldr	r3, [pc, #408]	; (8005fcc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8005e32:	60bb      	str	r3, [r7, #8]
 8005e34:	e009      	b.n	8005e4a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a64      	ldr	r2, [pc, #400]	; (8005fcc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d102      	bne.n	8005e46 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005e40:	4b61      	ldr	r3, [pc, #388]	; (8005fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8005e42:	60bb      	str	r3, [r7, #8]
 8005e44:	e001      	b.n	8005e4a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005e46:	2300      	movs	r3, #0
 8005e48:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d101      	bne.n	8005e54 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e0b0      	b.n	8005fb6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d101      	bne.n	8005e62 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8005e5e:	2302      	movs	r3, #2
 8005e60:	e0a9      	b.n	8005fb6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f003 0304 	and.w	r3, r3, #4
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f040 808d 	bne.w	8005f94 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f003 0304 	and.w	r3, r3, #4
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f040 8086 	bne.w	8005f94 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e90:	d004      	beq.n	8005e9c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a4b      	ldr	r2, [pc, #300]	; (8005fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d101      	bne.n	8005ea0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005e9c:	4b4c      	ldr	r3, [pc, #304]	; (8005fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8005e9e:	e000      	b.n	8005ea2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005ea0:	4b4c      	ldr	r3, [pc, #304]	; (8005fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8005ea2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d040      	beq.n	8005f2e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005eac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	6859      	ldr	r1, [r3, #4]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ebe:	035b      	lsls	r3, r3, #13
 8005ec0:	430b      	orrs	r3, r1
 8005ec2:	431a      	orrs	r2, r3
 8005ec4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ec6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f003 0303 	and.w	r3, r3, #3
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d108      	bne.n	8005ee8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d101      	bne.n	8005ee8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e000      	b.n	8005eea <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8005ee8:	2300      	movs	r3, #0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d15c      	bne.n	8005fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f003 0303 	and.w	r3, r3, #3
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d107      	bne.n	8005f0a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d101      	bne.n	8005f0a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8005f06:	2301      	movs	r3, #1
 8005f08:	e000      	b.n	8005f0c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8005f0a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d14b      	bne.n	8005fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005f10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005f18:	f023 030f 	bic.w	r3, r3, #15
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	6811      	ldr	r1, [r2, #0]
 8005f20:	683a      	ldr	r2, [r7, #0]
 8005f22:	6892      	ldr	r2, [r2, #8]
 8005f24:	430a      	orrs	r2, r1
 8005f26:	431a      	orrs	r2, r3
 8005f28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f2a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005f2c:	e03c      	b.n	8005fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005f2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f38:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f003 0303 	and.w	r3, r3, #3
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d108      	bne.n	8005f5a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d101      	bne.n	8005f5a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8005f56:	2301      	movs	r3, #1
 8005f58:	e000      	b.n	8005f5c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d123      	bne.n	8005fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f003 0303 	and.w	r3, r3, #3
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d107      	bne.n	8005f7c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0301 	and.w	r3, r3, #1
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d101      	bne.n	8005f7c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e000      	b.n	8005f7e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8005f7c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d112      	bne.n	8005fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8005f82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005f8a:	f023 030f 	bic.w	r3, r3, #15
 8005f8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f90:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005f92:	e009      	b.n	8005fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f98:	f043 0220 	orr.w	r2, r3, #32
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005fa6:	e000      	b.n	8005faa <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005fa8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005fb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3764      	adds	r7, #100	; 0x64
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	50000100 	.word	0x50000100
 8005fc8:	50000400 	.word	0x50000400
 8005fcc:	50000500 	.word	0x50000500
 8005fd0:	50000300 	.word	0x50000300
 8005fd4:	50000700 	.word	0x50000700

08005fd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f003 0303 	and.w	r3, r3, #3
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d108      	bne.n	8006004 <ADC_Enable+0x2c>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0301 	and.w	r3, r3, #1
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d101      	bne.n	8006004 <ADC_Enable+0x2c>
 8006000:	2301      	movs	r3, #1
 8006002:	e000      	b.n	8006006 <ADC_Enable+0x2e>
 8006004:	2300      	movs	r3, #0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d143      	bne.n	8006092 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	689a      	ldr	r2, [r3, #8]
 8006010:	4b22      	ldr	r3, [pc, #136]	; (800609c <ADC_Enable+0xc4>)
 8006012:	4013      	ands	r3, r2
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00d      	beq.n	8006034 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601c:	f043 0210 	orr.w	r2, r3, #16
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006028:	f043 0201 	orr.w	r2, r3, #1
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e02f      	b.n	8006094 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689a      	ldr	r2, [r3, #8]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0201 	orr.w	r2, r2, #1
 8006042:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8006044:	f7ff f81a 	bl	800507c <HAL_GetTick>
 8006048:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800604a:	e01b      	b.n	8006084 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800604c:	f7ff f816 	bl	800507c <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	2b02      	cmp	r3, #2
 8006058:	d914      	bls.n	8006084 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0301 	and.w	r3, r3, #1
 8006064:	2b01      	cmp	r3, #1
 8006066:	d00d      	beq.n	8006084 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606c:	f043 0210 	orr.w	r2, r3, #16
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006078:	f043 0201 	orr.w	r2, r3, #1
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e007      	b.n	8006094 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b01      	cmp	r3, #1
 8006090:	d1dc      	bne.n	800604c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	8000003f 	.word	0x8000003f

080060a0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f003 0303 	and.w	r3, r3, #3
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d108      	bne.n	80060cc <ADC_Disable+0x2c>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d101      	bne.n	80060cc <ADC_Disable+0x2c>
 80060c8:	2301      	movs	r3, #1
 80060ca:	e000      	b.n	80060ce <ADC_Disable+0x2e>
 80060cc:	2300      	movs	r3, #0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d047      	beq.n	8006162 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f003 030d 	and.w	r3, r3, #13
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d10f      	bne.n	8006100 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689a      	ldr	r2, [r3, #8]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f042 0202 	orr.w	r2, r2, #2
 80060ee:	609a      	str	r2, [r3, #8]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2203      	movs	r2, #3
 80060f6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80060f8:	f7fe ffc0 	bl	800507c <HAL_GetTick>
 80060fc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80060fe:	e029      	b.n	8006154 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006104:	f043 0210 	orr.w	r2, r3, #16
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006110:	f043 0201 	orr.w	r2, r3, #1
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e023      	b.n	8006164 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800611c:	f7fe ffae 	bl	800507c <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	2b02      	cmp	r3, #2
 8006128:	d914      	bls.n	8006154 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	2b01      	cmp	r3, #1
 8006136:	d10d      	bne.n	8006154 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613c:	f043 0210 	orr.w	r2, r3, #16
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006148:	f043 0201 	orr.w	r2, r3, #1
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e007      	b.n	8006164 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	2b01      	cmp	r3, #1
 8006160:	d0dc      	beq.n	800611c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f003 0307 	and.w	r3, r3, #7
 800617a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800617c:	4b0c      	ldr	r3, [pc, #48]	; (80061b0 <__NVIC_SetPriorityGrouping+0x44>)
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006188:	4013      	ands	r3, r2
 800618a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006194:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800619c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800619e:	4a04      	ldr	r2, [pc, #16]	; (80061b0 <__NVIC_SetPriorityGrouping+0x44>)
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	60d3      	str	r3, [r2, #12]
}
 80061a4:	bf00      	nop
 80061a6:	3714      	adds	r7, #20
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	e000ed00 	.word	0xe000ed00

080061b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80061b4:	b480      	push	{r7}
 80061b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061b8:	4b04      	ldr	r3, [pc, #16]	; (80061cc <__NVIC_GetPriorityGrouping+0x18>)
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	0a1b      	lsrs	r3, r3, #8
 80061be:	f003 0307 	and.w	r3, r3, #7
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr
 80061cc:	e000ed00 	.word	0xe000ed00

080061d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	4603      	mov	r3, r0
 80061d8:	6039      	str	r1, [r7, #0]
 80061da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	db0a      	blt.n	80061fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	b2da      	uxtb	r2, r3
 80061e8:	490c      	ldr	r1, [pc, #48]	; (800621c <__NVIC_SetPriority+0x4c>)
 80061ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061ee:	0112      	lsls	r2, r2, #4
 80061f0:	b2d2      	uxtb	r2, r2
 80061f2:	440b      	add	r3, r1
 80061f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80061f8:	e00a      	b.n	8006210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	b2da      	uxtb	r2, r3
 80061fe:	4908      	ldr	r1, [pc, #32]	; (8006220 <__NVIC_SetPriority+0x50>)
 8006200:	79fb      	ldrb	r3, [r7, #7]
 8006202:	f003 030f 	and.w	r3, r3, #15
 8006206:	3b04      	subs	r3, #4
 8006208:	0112      	lsls	r2, r2, #4
 800620a:	b2d2      	uxtb	r2, r2
 800620c:	440b      	add	r3, r1
 800620e:	761a      	strb	r2, [r3, #24]
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	e000e100 	.word	0xe000e100
 8006220:	e000ed00 	.word	0xe000ed00

08006224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006224:	b480      	push	{r7}
 8006226:	b089      	sub	sp, #36	; 0x24
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f003 0307 	and.w	r3, r3, #7
 8006236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	f1c3 0307 	rsb	r3, r3, #7
 800623e:	2b04      	cmp	r3, #4
 8006240:	bf28      	it	cs
 8006242:	2304      	movcs	r3, #4
 8006244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	3304      	adds	r3, #4
 800624a:	2b06      	cmp	r3, #6
 800624c:	d902      	bls.n	8006254 <NVIC_EncodePriority+0x30>
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	3b03      	subs	r3, #3
 8006252:	e000      	b.n	8006256 <NVIC_EncodePriority+0x32>
 8006254:	2300      	movs	r3, #0
 8006256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006258:	f04f 32ff 	mov.w	r2, #4294967295
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	fa02 f303 	lsl.w	r3, r2, r3
 8006262:	43da      	mvns	r2, r3
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	401a      	ands	r2, r3
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800626c:	f04f 31ff 	mov.w	r1, #4294967295
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	fa01 f303 	lsl.w	r3, r1, r3
 8006276:	43d9      	mvns	r1, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800627c:	4313      	orrs	r3, r2
         );
}
 800627e:	4618      	mov	r0, r3
 8006280:	3724      	adds	r7, #36	; 0x24
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
	...

0800628c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	3b01      	subs	r3, #1
 8006298:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800629c:	d301      	bcc.n	80062a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800629e:	2301      	movs	r3, #1
 80062a0:	e00f      	b.n	80062c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80062a2:	4a0a      	ldr	r2, [pc, #40]	; (80062cc <SysTick_Config+0x40>)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	3b01      	subs	r3, #1
 80062a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80062aa:	210f      	movs	r1, #15
 80062ac:	f04f 30ff 	mov.w	r0, #4294967295
 80062b0:	f7ff ff8e 	bl	80061d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80062b4:	4b05      	ldr	r3, [pc, #20]	; (80062cc <SysTick_Config+0x40>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80062ba:	4b04      	ldr	r3, [pc, #16]	; (80062cc <SysTick_Config+0x40>)
 80062bc:	2207      	movs	r2, #7
 80062be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	e000e010 	.word	0xe000e010

080062d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f7ff ff47 	bl	800616c <__NVIC_SetPriorityGrouping>
}
 80062de:	bf00      	nop
 80062e0:	3708      	adds	r7, #8
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b086      	sub	sp, #24
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	4603      	mov	r3, r0
 80062ee:	60b9      	str	r1, [r7, #8]
 80062f0:	607a      	str	r2, [r7, #4]
 80062f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80062f4:	2300      	movs	r3, #0
 80062f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80062f8:	f7ff ff5c 	bl	80061b4 <__NVIC_GetPriorityGrouping>
 80062fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	68b9      	ldr	r1, [r7, #8]
 8006302:	6978      	ldr	r0, [r7, #20]
 8006304:	f7ff ff8e 	bl	8006224 <NVIC_EncodePriority>
 8006308:	4602      	mov	r2, r0
 800630a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800630e:	4611      	mov	r1, r2
 8006310:	4618      	mov	r0, r3
 8006312:	f7ff ff5d 	bl	80061d0 <__NVIC_SetPriority>
}
 8006316:	bf00      	nop
 8006318:	3718      	adds	r7, #24
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b082      	sub	sp, #8
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f7ff ffb0 	bl	800628c <SysTick_Config>
 800632c:	4603      	mov	r3, r0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
	...

08006338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006338:	b480      	push	{r7}
 800633a:	b087      	sub	sp, #28
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006342:	2300      	movs	r3, #0
 8006344:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006346:	e154      	b.n	80065f2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	2101      	movs	r1, #1
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	fa01 f303 	lsl.w	r3, r1, r3
 8006354:	4013      	ands	r3, r2
 8006356:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2b00      	cmp	r3, #0
 800635c:	f000 8146 	beq.w	80065ec <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f003 0303 	and.w	r3, r3, #3
 8006368:	2b01      	cmp	r3, #1
 800636a:	d005      	beq.n	8006378 <HAL_GPIO_Init+0x40>
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f003 0303 	and.w	r3, r3, #3
 8006374:	2b02      	cmp	r3, #2
 8006376:	d130      	bne.n	80063da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	005b      	lsls	r3, r3, #1
 8006382:	2203      	movs	r2, #3
 8006384:	fa02 f303 	lsl.w	r3, r2, r3
 8006388:	43db      	mvns	r3, r3
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	4013      	ands	r3, r2
 800638e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	68da      	ldr	r2, [r3, #12]
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	005b      	lsls	r3, r3, #1
 8006398:	fa02 f303 	lsl.w	r3, r2, r3
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	4313      	orrs	r3, r2
 80063a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80063ae:	2201      	movs	r2, #1
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	fa02 f303 	lsl.w	r3, r2, r3
 80063b6:	43db      	mvns	r3, r3
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	4013      	ands	r3, r2
 80063bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	091b      	lsrs	r3, r3, #4
 80063c4:	f003 0201 	and.w	r2, r3, #1
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	fa02 f303 	lsl.w	r3, r2, r3
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f003 0303 	and.w	r3, r3, #3
 80063e2:	2b03      	cmp	r3, #3
 80063e4:	d017      	beq.n	8006416 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	005b      	lsls	r3, r3, #1
 80063f0:	2203      	movs	r2, #3
 80063f2:	fa02 f303 	lsl.w	r3, r2, r3
 80063f6:	43db      	mvns	r3, r3
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	4013      	ands	r3, r2
 80063fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	689a      	ldr	r2, [r3, #8]
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	005b      	lsls	r3, r3, #1
 8006406:	fa02 f303 	lsl.w	r3, r2, r3
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	4313      	orrs	r3, r2
 800640e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f003 0303 	and.w	r3, r3, #3
 800641e:	2b02      	cmp	r3, #2
 8006420:	d123      	bne.n	800646a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	08da      	lsrs	r2, r3, #3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	3208      	adds	r2, #8
 800642a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800642e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	f003 0307 	and.w	r3, r3, #7
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	220f      	movs	r2, #15
 800643a:	fa02 f303 	lsl.w	r3, r2, r3
 800643e:	43db      	mvns	r3, r3
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	4013      	ands	r3, r2
 8006444:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	691a      	ldr	r2, [r3, #16]
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f003 0307 	and.w	r3, r3, #7
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	fa02 f303 	lsl.w	r3, r2, r3
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	4313      	orrs	r3, r2
 800645a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	08da      	lsrs	r2, r3, #3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	3208      	adds	r2, #8
 8006464:	6939      	ldr	r1, [r7, #16]
 8006466:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	005b      	lsls	r3, r3, #1
 8006474:	2203      	movs	r2, #3
 8006476:	fa02 f303 	lsl.w	r3, r2, r3
 800647a:	43db      	mvns	r3, r3
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	4013      	ands	r3, r2
 8006480:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f003 0203 	and.w	r2, r3, #3
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	005b      	lsls	r3, r3, #1
 800648e:	fa02 f303 	lsl.w	r3, r2, r3
 8006492:	693a      	ldr	r2, [r7, #16]
 8006494:	4313      	orrs	r3, r2
 8006496:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	693a      	ldr	r2, [r7, #16]
 800649c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 80a0 	beq.w	80065ec <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064ac:	4b58      	ldr	r3, [pc, #352]	; (8006610 <HAL_GPIO_Init+0x2d8>)
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	4a57      	ldr	r2, [pc, #348]	; (8006610 <HAL_GPIO_Init+0x2d8>)
 80064b2:	f043 0301 	orr.w	r3, r3, #1
 80064b6:	6193      	str	r3, [r2, #24]
 80064b8:	4b55      	ldr	r3, [pc, #340]	; (8006610 <HAL_GPIO_Init+0x2d8>)
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	60bb      	str	r3, [r7, #8]
 80064c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80064c4:	4a53      	ldr	r2, [pc, #332]	; (8006614 <HAL_GPIO_Init+0x2dc>)
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	089b      	lsrs	r3, r3, #2
 80064ca:	3302      	adds	r3, #2
 80064cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f003 0303 	and.w	r3, r3, #3
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	220f      	movs	r2, #15
 80064dc:	fa02 f303 	lsl.w	r3, r2, r3
 80064e0:	43db      	mvns	r3, r3
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	4013      	ands	r3, r2
 80064e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80064ee:	d019      	beq.n	8006524 <HAL_GPIO_Init+0x1ec>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a49      	ldr	r2, [pc, #292]	; (8006618 <HAL_GPIO_Init+0x2e0>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d013      	beq.n	8006520 <HAL_GPIO_Init+0x1e8>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a48      	ldr	r2, [pc, #288]	; (800661c <HAL_GPIO_Init+0x2e4>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d00d      	beq.n	800651c <HAL_GPIO_Init+0x1e4>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a47      	ldr	r2, [pc, #284]	; (8006620 <HAL_GPIO_Init+0x2e8>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d007      	beq.n	8006518 <HAL_GPIO_Init+0x1e0>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a46      	ldr	r2, [pc, #280]	; (8006624 <HAL_GPIO_Init+0x2ec>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d101      	bne.n	8006514 <HAL_GPIO_Init+0x1dc>
 8006510:	2304      	movs	r3, #4
 8006512:	e008      	b.n	8006526 <HAL_GPIO_Init+0x1ee>
 8006514:	2305      	movs	r3, #5
 8006516:	e006      	b.n	8006526 <HAL_GPIO_Init+0x1ee>
 8006518:	2303      	movs	r3, #3
 800651a:	e004      	b.n	8006526 <HAL_GPIO_Init+0x1ee>
 800651c:	2302      	movs	r3, #2
 800651e:	e002      	b.n	8006526 <HAL_GPIO_Init+0x1ee>
 8006520:	2301      	movs	r3, #1
 8006522:	e000      	b.n	8006526 <HAL_GPIO_Init+0x1ee>
 8006524:	2300      	movs	r3, #0
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	f002 0203 	and.w	r2, r2, #3
 800652c:	0092      	lsls	r2, r2, #2
 800652e:	4093      	lsls	r3, r2
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	4313      	orrs	r3, r2
 8006534:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006536:	4937      	ldr	r1, [pc, #220]	; (8006614 <HAL_GPIO_Init+0x2dc>)
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	089b      	lsrs	r3, r3, #2
 800653c:	3302      	adds	r3, #2
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006544:	4b38      	ldr	r3, [pc, #224]	; (8006628 <HAL_GPIO_Init+0x2f0>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	43db      	mvns	r3, r3
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	4013      	ands	r3, r2
 8006552:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d003      	beq.n	8006568 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	4313      	orrs	r3, r2
 8006566:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006568:	4a2f      	ldr	r2, [pc, #188]	; (8006628 <HAL_GPIO_Init+0x2f0>)
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800656e:	4b2e      	ldr	r3, [pc, #184]	; (8006628 <HAL_GPIO_Init+0x2f0>)
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	43db      	mvns	r3, r3
 8006578:	693a      	ldr	r2, [r7, #16]
 800657a:	4013      	ands	r3, r2
 800657c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4313      	orrs	r3, r2
 8006590:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006592:	4a25      	ldr	r2, [pc, #148]	; (8006628 <HAL_GPIO_Init+0x2f0>)
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006598:	4b23      	ldr	r3, [pc, #140]	; (8006628 <HAL_GPIO_Init+0x2f0>)
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	43db      	mvns	r3, r3
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	4013      	ands	r3, r2
 80065a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d003      	beq.n	80065bc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80065bc:	4a1a      	ldr	r2, [pc, #104]	; (8006628 <HAL_GPIO_Init+0x2f0>)
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80065c2:	4b19      	ldr	r3, [pc, #100]	; (8006628 <HAL_GPIO_Init+0x2f0>)
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	43db      	mvns	r3, r3
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	4013      	ands	r3, r2
 80065d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d003      	beq.n	80065e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80065e6:	4a10      	ldr	r2, [pc, #64]	; (8006628 <HAL_GPIO_Init+0x2f0>)
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	3301      	adds	r3, #1
 80065f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	fa22 f303 	lsr.w	r3, r2, r3
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f47f aea3 	bne.w	8006348 <HAL_GPIO_Init+0x10>
  }
}
 8006602:	bf00      	nop
 8006604:	bf00      	nop
 8006606:	371c      	adds	r7, #28
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	40021000 	.word	0x40021000
 8006614:	40010000 	.word	0x40010000
 8006618:	48000400 	.word	0x48000400
 800661c:	48000800 	.word	0x48000800
 8006620:	48000c00 	.word	0x48000c00
 8006624:	48001000 	.word	0x48001000
 8006628:	40010400 	.word	0x40010400

0800662c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	460b      	mov	r3, r1
 8006636:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	691a      	ldr	r2, [r3, #16]
 800663c:	887b      	ldrh	r3, [r7, #2]
 800663e:	4013      	ands	r3, r2
 8006640:	2b00      	cmp	r3, #0
 8006642:	d002      	beq.n	800664a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006644:	2301      	movs	r3, #1
 8006646:	73fb      	strb	r3, [r7, #15]
 8006648:	e001      	b.n	800664e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800664a:	2300      	movs	r3, #0
 800664c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800664e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3714      	adds	r7, #20
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	460b      	mov	r3, r1
 8006666:	807b      	strh	r3, [r7, #2]
 8006668:	4613      	mov	r3, r2
 800666a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800666c:	787b      	ldrb	r3, [r7, #1]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d003      	beq.n	800667a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006672:	887a      	ldrh	r2, [r7, #2]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006678:	e002      	b.n	8006680 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800667a:	887a      	ldrh	r2, [r7, #2]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d101      	bne.n	800669e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e081      	b.n	80067a2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d106      	bne.n	80066b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7fe f86c 	bl	8004790 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2224      	movs	r2, #36	; 0x24
 80066bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f022 0201 	bic.w	r2, r2, #1
 80066ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685a      	ldr	r2, [r3, #4]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80066dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	689a      	ldr	r2, [r3, #8]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d107      	bne.n	8006706 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	689a      	ldr	r2, [r3, #8]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006702:	609a      	str	r2, [r3, #8]
 8006704:	e006      	b.n	8006714 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	689a      	ldr	r2, [r3, #8]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006712:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	2b02      	cmp	r3, #2
 800671a:	d104      	bne.n	8006726 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006724:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	6812      	ldr	r2, [r2, #0]
 8006730:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006734:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006738:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68da      	ldr	r2, [r3, #12]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006748:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	691a      	ldr	r2, [r3, #16]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	430a      	orrs	r2, r1
 8006762:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	69d9      	ldr	r1, [r3, #28]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a1a      	ldr	r2, [r3, #32]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	430a      	orrs	r2, r1
 8006772:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f042 0201 	orr.w	r2, r2, #1
 8006782:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2220      	movs	r2, #32
 800678e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
	...

080067ac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b088      	sub	sp, #32
 80067b0:	af02      	add	r7, sp, #8
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	607a      	str	r2, [r7, #4]
 80067b6:	461a      	mov	r2, r3
 80067b8:	460b      	mov	r3, r1
 80067ba:	817b      	strh	r3, [r7, #10]
 80067bc:	4613      	mov	r3, r2
 80067be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	2b20      	cmp	r3, #32
 80067ca:	f040 80da 	bne.w	8006982 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d101      	bne.n	80067dc <HAL_I2C_Master_Transmit+0x30>
 80067d8:	2302      	movs	r3, #2
 80067da:	e0d3      	b.n	8006984 <HAL_I2C_Master_Transmit+0x1d8>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80067e4:	f7fe fc4a 	bl	800507c <HAL_GetTick>
 80067e8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	2319      	movs	r3, #25
 80067f0:	2201      	movs	r2, #1
 80067f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f000 fcbc 	bl	8007174 <I2C_WaitOnFlagUntilTimeout>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d001      	beq.n	8006806 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e0be      	b.n	8006984 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2221      	movs	r2, #33	; 0x21
 800680a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2210      	movs	r2, #16
 8006812:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	893a      	ldrh	r2, [r7, #8]
 8006826:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006832:	b29b      	uxth	r3, r3
 8006834:	2bff      	cmp	r3, #255	; 0xff
 8006836:	d90e      	bls.n	8006856 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	22ff      	movs	r2, #255	; 0xff
 800683c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006842:	b2da      	uxtb	r2, r3
 8006844:	8979      	ldrh	r1, [r7, #10]
 8006846:	4b51      	ldr	r3, [pc, #324]	; (800698c <HAL_I2C_Master_Transmit+0x1e0>)
 8006848:	9300      	str	r3, [sp, #0]
 800684a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f000 fe2e 	bl	80074b0 <I2C_TransferConfig>
 8006854:	e06c      	b.n	8006930 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800685a:	b29a      	uxth	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006864:	b2da      	uxtb	r2, r3
 8006866:	8979      	ldrh	r1, [r7, #10]
 8006868:	4b48      	ldr	r3, [pc, #288]	; (800698c <HAL_I2C_Master_Transmit+0x1e0>)
 800686a:	9300      	str	r3, [sp, #0]
 800686c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f000 fe1d 	bl	80074b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006876:	e05b      	b.n	8006930 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	6a39      	ldr	r1, [r7, #32]
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f000 fcb9 	bl	80071f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d001      	beq.n	800688c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e07b      	b.n	8006984 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	781a      	ldrb	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689c:	1c5a      	adds	r2, r3, #1
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	3b01      	subs	r3, #1
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068b4:	3b01      	subs	r3, #1
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d034      	beq.n	8006930 <HAL_I2C_Master_Transmit+0x184>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d130      	bne.n	8006930 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	6a3b      	ldr	r3, [r7, #32]
 80068d4:	2200      	movs	r2, #0
 80068d6:	2180      	movs	r1, #128	; 0x80
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f000 fc4b 	bl	8007174 <I2C_WaitOnFlagUntilTimeout>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d001      	beq.n	80068e8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e04d      	b.n	8006984 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	2bff      	cmp	r3, #255	; 0xff
 80068f0:	d90e      	bls.n	8006910 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	22ff      	movs	r2, #255	; 0xff
 80068f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068fc:	b2da      	uxtb	r2, r3
 80068fe:	8979      	ldrh	r1, [r7, #10]
 8006900:	2300      	movs	r3, #0
 8006902:	9300      	str	r3, [sp, #0]
 8006904:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f000 fdd1 	bl	80074b0 <I2C_TransferConfig>
 800690e:	e00f      	b.n	8006930 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006914:	b29a      	uxth	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800691e:	b2da      	uxtb	r2, r3
 8006920:	8979      	ldrh	r1, [r7, #10]
 8006922:	2300      	movs	r3, #0
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f000 fdc0 	bl	80074b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006934:	b29b      	uxth	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	d19e      	bne.n	8006878 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	6a39      	ldr	r1, [r7, #32]
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f000 fc98 	bl	8007274 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d001      	beq.n	800694e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e01a      	b.n	8006984 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2220      	movs	r2, #32
 8006954:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	6859      	ldr	r1, [r3, #4]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	4b0b      	ldr	r3, [pc, #44]	; (8006990 <HAL_I2C_Master_Transmit+0x1e4>)
 8006962:	400b      	ands	r3, r1
 8006964:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2220      	movs	r2, #32
 800696a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800697e:	2300      	movs	r3, #0
 8006980:	e000      	b.n	8006984 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006982:	2302      	movs	r3, #2
  }
}
 8006984:	4618      	mov	r0, r3
 8006986:	3718      	adds	r7, #24
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	80002000 	.word	0x80002000
 8006990:	fe00e800 	.word	0xfe00e800

08006994 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b088      	sub	sp, #32
 8006998:	af02      	add	r7, sp, #8
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	607a      	str	r2, [r7, #4]
 800699e:	461a      	mov	r2, r3
 80069a0:	460b      	mov	r3, r1
 80069a2:	817b      	strh	r3, [r7, #10]
 80069a4:	4613      	mov	r3, r2
 80069a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	2b20      	cmp	r3, #32
 80069b2:	f040 80db 	bne.w	8006b6c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d101      	bne.n	80069c4 <HAL_I2C_Master_Receive+0x30>
 80069c0:	2302      	movs	r3, #2
 80069c2:	e0d4      	b.n	8006b6e <HAL_I2C_Master_Receive+0x1da>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80069cc:	f7fe fb56 	bl	800507c <HAL_GetTick>
 80069d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	2319      	movs	r3, #25
 80069d8:	2201      	movs	r2, #1
 80069da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f000 fbc8 	bl	8007174 <I2C_WaitOnFlagUntilTimeout>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d001      	beq.n	80069ee <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e0bf      	b.n	8006b6e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2222      	movs	r2, #34	; 0x22
 80069f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2210      	movs	r2, #16
 80069fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	893a      	ldrh	r2, [r7, #8]
 8006a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	2bff      	cmp	r3, #255	; 0xff
 8006a1e:	d90e      	bls.n	8006a3e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	22ff      	movs	r2, #255	; 0xff
 8006a24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a2a:	b2da      	uxtb	r2, r3
 8006a2c:	8979      	ldrh	r1, [r7, #10]
 8006a2e:	4b52      	ldr	r3, [pc, #328]	; (8006b78 <HAL_I2C_Master_Receive+0x1e4>)
 8006a30:	9300      	str	r3, [sp, #0]
 8006a32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f000 fd3a 	bl	80074b0 <I2C_TransferConfig>
 8006a3c:	e06d      	b.n	8006b1a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a4c:	b2da      	uxtb	r2, r3
 8006a4e:	8979      	ldrh	r1, [r7, #10]
 8006a50:	4b49      	ldr	r3, [pc, #292]	; (8006b78 <HAL_I2C_Master_Receive+0x1e4>)
 8006a52:	9300      	str	r3, [sp, #0]
 8006a54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f000 fd29 	bl	80074b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006a5e:	e05c      	b.n	8006b1a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	6a39      	ldr	r1, [r7, #32]
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f000 fc41 	bl	80072ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d001      	beq.n	8006a74 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e07c      	b.n	8006b6e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7e:	b2d2      	uxtb	r2, r2
 8006a80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a86:	1c5a      	adds	r2, r3, #1
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a90:	3b01      	subs	r3, #1
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d034      	beq.n	8006b1a <HAL_I2C_Master_Receive+0x186>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d130      	bne.n	8006b1a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	2180      	movs	r1, #128	; 0x80
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f000 fb56 	bl	8007174 <I2C_WaitOnFlagUntilTimeout>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d001      	beq.n	8006ad2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e04d      	b.n	8006b6e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	2bff      	cmp	r3, #255	; 0xff
 8006ada:	d90e      	bls.n	8006afa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	22ff      	movs	r2, #255	; 0xff
 8006ae0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ae6:	b2da      	uxtb	r2, r3
 8006ae8:	8979      	ldrh	r1, [r7, #10]
 8006aea:	2300      	movs	r3, #0
 8006aec:	9300      	str	r3, [sp, #0]
 8006aee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f000 fcdc 	bl	80074b0 <I2C_TransferConfig>
 8006af8:	e00f      	b.n	8006b1a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b08:	b2da      	uxtb	r2, r3
 8006b0a:	8979      	ldrh	r1, [r7, #10]
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 fccb 	bl	80074b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d19d      	bne.n	8006a60 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b24:	697a      	ldr	r2, [r7, #20]
 8006b26:	6a39      	ldr	r1, [r7, #32]
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f000 fba3 	bl	8007274 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d001      	beq.n	8006b38 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e01a      	b.n	8006b6e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	6859      	ldr	r1, [r3, #4]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	4b0c      	ldr	r3, [pc, #48]	; (8006b7c <HAL_I2C_Master_Receive+0x1e8>)
 8006b4c:	400b      	ands	r3, r1
 8006b4e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2220      	movs	r2, #32
 8006b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	e000      	b.n	8006b6e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006b6c:	2302      	movs	r3, #2
  }
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3718      	adds	r7, #24
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	80002400 	.word	0x80002400
 8006b7c:	fe00e800 	.word	0xfe00e800

08006b80 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b088      	sub	sp, #32
 8006b84:	af02      	add	r7, sp, #8
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	4608      	mov	r0, r1
 8006b8a:	4611      	mov	r1, r2
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	4603      	mov	r3, r0
 8006b90:	817b      	strh	r3, [r7, #10]
 8006b92:	460b      	mov	r3, r1
 8006b94:	813b      	strh	r3, [r7, #8]
 8006b96:	4613      	mov	r3, r2
 8006b98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b20      	cmp	r3, #32
 8006ba4:	f040 80f9 	bne.w	8006d9a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ba8:	6a3b      	ldr	r3, [r7, #32]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d002      	beq.n	8006bb4 <HAL_I2C_Mem_Write+0x34>
 8006bae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d105      	bne.n	8006bc0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e0ed      	b.n	8006d9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d101      	bne.n	8006bce <HAL_I2C_Mem_Write+0x4e>
 8006bca:	2302      	movs	r3, #2
 8006bcc:	e0e6      	b.n	8006d9c <HAL_I2C_Mem_Write+0x21c>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006bd6:	f7fe fa51 	bl	800507c <HAL_GetTick>
 8006bda:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	2319      	movs	r3, #25
 8006be2:	2201      	movs	r2, #1
 8006be4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 fac3 	bl	8007174 <I2C_WaitOnFlagUntilTimeout>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d001      	beq.n	8006bf8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e0d1      	b.n	8006d9c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2221      	movs	r2, #33	; 0x21
 8006bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2240      	movs	r2, #64	; 0x40
 8006c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6a3a      	ldr	r2, [r7, #32]
 8006c12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006c18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c20:	88f8      	ldrh	r0, [r7, #6]
 8006c22:	893a      	ldrh	r2, [r7, #8]
 8006c24:	8979      	ldrh	r1, [r7, #10]
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	9301      	str	r3, [sp, #4]
 8006c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	4603      	mov	r3, r0
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f000 f9d3 	bl	8006fdc <I2C_RequestMemoryWrite>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d005      	beq.n	8006c48 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e0a9      	b.n	8006d9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	2bff      	cmp	r3, #255	; 0xff
 8006c50:	d90e      	bls.n	8006c70 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	22ff      	movs	r2, #255	; 0xff
 8006c56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	8979      	ldrh	r1, [r7, #10]
 8006c60:	2300      	movs	r3, #0
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f000 fc21 	bl	80074b0 <I2C_TransferConfig>
 8006c6e:	e00f      	b.n	8006c90 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c74:	b29a      	uxth	r2, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	8979      	ldrh	r1, [r7, #10]
 8006c82:	2300      	movs	r3, #0
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f000 fc10 	bl	80074b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c94:	68f8      	ldr	r0, [r7, #12]
 8006c96:	f000 faad 	bl	80071f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d001      	beq.n	8006ca4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e07b      	b.n	8006d9c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca8:	781a      	ldrb	r2, [r3, #0]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb4:	1c5a      	adds	r2, r3, #1
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	b29a      	uxth	r2, r3
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d034      	beq.n	8006d48 <HAL_I2C_Mem_Write+0x1c8>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d130      	bne.n	8006d48 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	9300      	str	r3, [sp, #0]
 8006cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cec:	2200      	movs	r2, #0
 8006cee:	2180      	movs	r1, #128	; 0x80
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f000 fa3f 	bl	8007174 <I2C_WaitOnFlagUntilTimeout>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d001      	beq.n	8006d00 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e04d      	b.n	8006d9c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	2bff      	cmp	r3, #255	; 0xff
 8006d08:	d90e      	bls.n	8006d28 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	22ff      	movs	r2, #255	; 0xff
 8006d0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d14:	b2da      	uxtb	r2, r3
 8006d16:	8979      	ldrh	r1, [r7, #10]
 8006d18:	2300      	movs	r3, #0
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f000 fbc5 	bl	80074b0 <I2C_TransferConfig>
 8006d26:	e00f      	b.n	8006d48 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d2c:	b29a      	uxth	r2, r3
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	8979      	ldrh	r1, [r7, #10]
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	9300      	str	r3, [sp, #0]
 8006d3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f000 fbb4 	bl	80074b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d19e      	bne.n	8006c90 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f000 fa8c 	bl	8007274 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d001      	beq.n	8006d66 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e01a      	b.n	8006d9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2220      	movs	r2, #32
 8006d6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	6859      	ldr	r1, [r3, #4]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	4b0a      	ldr	r3, [pc, #40]	; (8006da4 <HAL_I2C_Mem_Write+0x224>)
 8006d7a:	400b      	ands	r3, r1
 8006d7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2220      	movs	r2, #32
 8006d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d96:	2300      	movs	r3, #0
 8006d98:	e000      	b.n	8006d9c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006d9a:	2302      	movs	r3, #2
  }
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3718      	adds	r7, #24
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	fe00e800 	.word	0xfe00e800

08006da8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b088      	sub	sp, #32
 8006dac:	af02      	add	r7, sp, #8
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	4608      	mov	r0, r1
 8006db2:	4611      	mov	r1, r2
 8006db4:	461a      	mov	r2, r3
 8006db6:	4603      	mov	r3, r0
 8006db8:	817b      	strh	r3, [r7, #10]
 8006dba:	460b      	mov	r3, r1
 8006dbc:	813b      	strh	r3, [r7, #8]
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	2b20      	cmp	r3, #32
 8006dcc:	f040 80fd 	bne.w	8006fca <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dd0:	6a3b      	ldr	r3, [r7, #32]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d002      	beq.n	8006ddc <HAL_I2C_Mem_Read+0x34>
 8006dd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d105      	bne.n	8006de8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006de2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e0f1      	b.n	8006fcc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d101      	bne.n	8006df6 <HAL_I2C_Mem_Read+0x4e>
 8006df2:	2302      	movs	r3, #2
 8006df4:	e0ea      	b.n	8006fcc <HAL_I2C_Mem_Read+0x224>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006dfe:	f7fe f93d 	bl	800507c <HAL_GetTick>
 8006e02:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	9300      	str	r3, [sp, #0]
 8006e08:	2319      	movs	r3, #25
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f000 f9af 	bl	8007174 <I2C_WaitOnFlagUntilTimeout>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d001      	beq.n	8006e20 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e0d5      	b.n	8006fcc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2222      	movs	r2, #34	; 0x22
 8006e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2240      	movs	r2, #64	; 0x40
 8006e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6a3a      	ldr	r2, [r7, #32]
 8006e3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006e40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e48:	88f8      	ldrh	r0, [r7, #6]
 8006e4a:	893a      	ldrh	r2, [r7, #8]
 8006e4c:	8979      	ldrh	r1, [r7, #10]
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	9301      	str	r3, [sp, #4]
 8006e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e54:	9300      	str	r3, [sp, #0]
 8006e56:	4603      	mov	r3, r0
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f000 f913 	bl	8007084 <I2C_RequestMemoryRead>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d005      	beq.n	8006e70 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e0ad      	b.n	8006fcc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	2bff      	cmp	r3, #255	; 0xff
 8006e78:	d90e      	bls.n	8006e98 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	22ff      	movs	r2, #255	; 0xff
 8006e7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	8979      	ldrh	r1, [r7, #10]
 8006e88:	4b52      	ldr	r3, [pc, #328]	; (8006fd4 <HAL_I2C_Mem_Read+0x22c>)
 8006e8a:	9300      	str	r3, [sp, #0]
 8006e8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f000 fb0d 	bl	80074b0 <I2C_TransferConfig>
 8006e96:	e00f      	b.n	8006eb8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ea6:	b2da      	uxtb	r2, r3
 8006ea8:	8979      	ldrh	r1, [r7, #10]
 8006eaa:	4b4a      	ldr	r3, [pc, #296]	; (8006fd4 <HAL_I2C_Mem_Read+0x22c>)
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f000 fafc 	bl	80074b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	9300      	str	r3, [sp, #0]
 8006ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	2104      	movs	r1, #4
 8006ec2:	68f8      	ldr	r0, [r7, #12]
 8006ec4:	f000 f956 	bl	8007174 <I2C_WaitOnFlagUntilTimeout>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d001      	beq.n	8006ed2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e07c      	b.n	8006fcc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006edc:	b2d2      	uxtb	r2, r2
 8006ede:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee4:	1c5a      	adds	r2, r3, #1
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	3b01      	subs	r3, #1
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d034      	beq.n	8006f78 <HAL_I2C_Mem_Read+0x1d0>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d130      	bne.n	8006f78 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	9300      	str	r3, [sp, #0]
 8006f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	2180      	movs	r1, #128	; 0x80
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f000 f927 	bl	8007174 <I2C_WaitOnFlagUntilTimeout>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d001      	beq.n	8006f30 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e04d      	b.n	8006fcc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	2bff      	cmp	r3, #255	; 0xff
 8006f38:	d90e      	bls.n	8006f58 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	22ff      	movs	r2, #255	; 0xff
 8006f3e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f44:	b2da      	uxtb	r2, r3
 8006f46:	8979      	ldrh	r1, [r7, #10]
 8006f48:	2300      	movs	r3, #0
 8006f4a:	9300      	str	r3, [sp, #0]
 8006f4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f000 faad 	bl	80074b0 <I2C_TransferConfig>
 8006f56:	e00f      	b.n	8006f78 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f66:	b2da      	uxtb	r2, r3
 8006f68:	8979      	ldrh	r1, [r7, #10]
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f000 fa9c 	bl	80074b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d19a      	bne.n	8006eb8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f000 f974 	bl	8007274 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d001      	beq.n	8006f96 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e01a      	b.n	8006fcc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2220      	movs	r2, #32
 8006f9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	6859      	ldr	r1, [r3, #4]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	4b0b      	ldr	r3, [pc, #44]	; (8006fd8 <HAL_I2C_Mem_Read+0x230>)
 8006faa:	400b      	ands	r3, r1
 8006fac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2220      	movs	r2, #32
 8006fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	e000      	b.n	8006fcc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006fca:	2302      	movs	r3, #2
  }
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3718      	adds	r7, #24
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	80002400 	.word	0x80002400
 8006fd8:	fe00e800 	.word	0xfe00e800

08006fdc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af02      	add	r7, sp, #8
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	4608      	mov	r0, r1
 8006fe6:	4611      	mov	r1, r2
 8006fe8:	461a      	mov	r2, r3
 8006fea:	4603      	mov	r3, r0
 8006fec:	817b      	strh	r3, [r7, #10]
 8006fee:	460b      	mov	r3, r1
 8006ff0:	813b      	strh	r3, [r7, #8]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006ff6:	88fb      	ldrh	r3, [r7, #6]
 8006ff8:	b2da      	uxtb	r2, r3
 8006ffa:	8979      	ldrh	r1, [r7, #10]
 8006ffc:	4b20      	ldr	r3, [pc, #128]	; (8007080 <I2C_RequestMemoryWrite+0xa4>)
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f000 fa53 	bl	80074b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800700a:	69fa      	ldr	r2, [r7, #28]
 800700c:	69b9      	ldr	r1, [r7, #24]
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f000 f8f0 	bl	80071f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d001      	beq.n	800701e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e02c      	b.n	8007078 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800701e:	88fb      	ldrh	r3, [r7, #6]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d105      	bne.n	8007030 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007024:	893b      	ldrh	r3, [r7, #8]
 8007026:	b2da      	uxtb	r2, r3
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	629a      	str	r2, [r3, #40]	; 0x28
 800702e:	e015      	b.n	800705c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007030:	893b      	ldrh	r3, [r7, #8]
 8007032:	0a1b      	lsrs	r3, r3, #8
 8007034:	b29b      	uxth	r3, r3
 8007036:	b2da      	uxtb	r2, r3
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800703e:	69fa      	ldr	r2, [r7, #28]
 8007040:	69b9      	ldr	r1, [r7, #24]
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f000 f8d6 	bl	80071f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e012      	b.n	8007078 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007052:	893b      	ldrh	r3, [r7, #8]
 8007054:	b2da      	uxtb	r2, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	2200      	movs	r2, #0
 8007064:	2180      	movs	r1, #128	; 0x80
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	f000 f884 	bl	8007174 <I2C_WaitOnFlagUntilTimeout>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d001      	beq.n	8007076 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e000      	b.n	8007078 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3710      	adds	r7, #16
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	80002000 	.word	0x80002000

08007084 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b086      	sub	sp, #24
 8007088:	af02      	add	r7, sp, #8
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	4608      	mov	r0, r1
 800708e:	4611      	mov	r1, r2
 8007090:	461a      	mov	r2, r3
 8007092:	4603      	mov	r3, r0
 8007094:	817b      	strh	r3, [r7, #10]
 8007096:	460b      	mov	r3, r1
 8007098:	813b      	strh	r3, [r7, #8]
 800709a:	4613      	mov	r3, r2
 800709c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800709e:	88fb      	ldrh	r3, [r7, #6]
 80070a0:	b2da      	uxtb	r2, r3
 80070a2:	8979      	ldrh	r1, [r7, #10]
 80070a4:	4b20      	ldr	r3, [pc, #128]	; (8007128 <I2C_RequestMemoryRead+0xa4>)
 80070a6:	9300      	str	r3, [sp, #0]
 80070a8:	2300      	movs	r3, #0
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f000 fa00 	bl	80074b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070b0:	69fa      	ldr	r2, [r7, #28]
 80070b2:	69b9      	ldr	r1, [r7, #24]
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f000 f89d 	bl	80071f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d001      	beq.n	80070c4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	e02c      	b.n	800711e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80070c4:	88fb      	ldrh	r3, [r7, #6]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d105      	bne.n	80070d6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80070ca:	893b      	ldrh	r3, [r7, #8]
 80070cc:	b2da      	uxtb	r2, r3
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	629a      	str	r2, [r3, #40]	; 0x28
 80070d4:	e015      	b.n	8007102 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80070d6:	893b      	ldrh	r3, [r7, #8]
 80070d8:	0a1b      	lsrs	r3, r3, #8
 80070da:	b29b      	uxth	r3, r3
 80070dc:	b2da      	uxtb	r2, r3
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070e4:	69fa      	ldr	r2, [r7, #28]
 80070e6:	69b9      	ldr	r1, [r7, #24]
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f000 f883 	bl	80071f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d001      	beq.n	80070f8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e012      	b.n	800711e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80070f8:	893b      	ldrh	r3, [r7, #8]
 80070fa:	b2da      	uxtb	r2, r3
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	2200      	movs	r2, #0
 800710a:	2140      	movs	r1, #64	; 0x40
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f000 f831 	bl	8007174 <I2C_WaitOnFlagUntilTimeout>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d001      	beq.n	800711c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e000      	b.n	800711e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	80002000 	.word	0x80002000

0800712c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	f003 0302 	and.w	r3, r3, #2
 800713e:	2b02      	cmp	r3, #2
 8007140:	d103      	bne.n	800714a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2200      	movs	r2, #0
 8007148:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	699b      	ldr	r3, [r3, #24]
 8007150:	f003 0301 	and.w	r3, r3, #1
 8007154:	2b01      	cmp	r3, #1
 8007156:	d007      	beq.n	8007168 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	699a      	ldr	r2, [r3, #24]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f042 0201 	orr.w	r2, r2, #1
 8007166:	619a      	str	r2, [r3, #24]
  }
}
 8007168:	bf00      	nop
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	603b      	str	r3, [r7, #0]
 8007180:	4613      	mov	r3, r2
 8007182:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007184:	e022      	b.n	80071cc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800718c:	d01e      	beq.n	80071cc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800718e:	f7fd ff75 	bl	800507c <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	683a      	ldr	r2, [r7, #0]
 800719a:	429a      	cmp	r2, r3
 800719c:	d302      	bcc.n	80071a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d113      	bne.n	80071cc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071a8:	f043 0220 	orr.w	r2, r3, #32
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2220      	movs	r2, #32
 80071b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e00f      	b.n	80071ec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	699a      	ldr	r2, [r3, #24]
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	4013      	ands	r3, r2
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	429a      	cmp	r2, r3
 80071da:	bf0c      	ite	eq
 80071dc:	2301      	moveq	r3, #1
 80071de:	2300      	movne	r3, #0
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	461a      	mov	r2, r3
 80071e4:	79fb      	ldrb	r3, [r7, #7]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d0cd      	beq.n	8007186 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007200:	e02c      	b.n	800725c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	68b9      	ldr	r1, [r7, #8]
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f000 f8dc 	bl	80073c4 <I2C_IsAcknowledgeFailed>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d001      	beq.n	8007216 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e02a      	b.n	800726c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721c:	d01e      	beq.n	800725c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800721e:	f7fd ff2d 	bl	800507c <HAL_GetTick>
 8007222:	4602      	mov	r2, r0
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	68ba      	ldr	r2, [r7, #8]
 800722a:	429a      	cmp	r2, r3
 800722c:	d302      	bcc.n	8007234 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d113      	bne.n	800725c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007238:	f043 0220 	orr.w	r2, r3, #32
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2220      	movs	r2, #32
 8007244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e007      	b.n	800726c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	f003 0302 	and.w	r3, r3, #2
 8007266:	2b02      	cmp	r3, #2
 8007268:	d1cb      	bne.n	8007202 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007280:	e028      	b.n	80072d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	68b9      	ldr	r1, [r7, #8]
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	f000 f89c 	bl	80073c4 <I2C_IsAcknowledgeFailed>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d001      	beq.n	8007296 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e026      	b.n	80072e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007296:	f7fd fef1 	bl	800507c <HAL_GetTick>
 800729a:	4602      	mov	r2, r0
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	68ba      	ldr	r2, [r7, #8]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d302      	bcc.n	80072ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d113      	bne.n	80072d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072b0:	f043 0220 	orr.w	r2, r3, #32
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2220      	movs	r2, #32
 80072bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e007      	b.n	80072e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	f003 0320 	and.w	r3, r3, #32
 80072de:	2b20      	cmp	r3, #32
 80072e0:	d1cf      	bne.n	8007282 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3710      	adds	r7, #16
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80072f8:	e055      	b.n	80073a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	68b9      	ldr	r1, [r7, #8]
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f000 f860 	bl	80073c4 <I2C_IsAcknowledgeFailed>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e053      	b.n	80073b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	f003 0320 	and.w	r3, r3, #32
 8007318:	2b20      	cmp	r3, #32
 800731a:	d129      	bne.n	8007370 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	f003 0304 	and.w	r3, r3, #4
 8007326:	2b04      	cmp	r3, #4
 8007328:	d105      	bne.n	8007336 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800732e:	2b00      	cmp	r3, #0
 8007330:	d001      	beq.n	8007336 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007332:	2300      	movs	r3, #0
 8007334:	e03f      	b.n	80073b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2220      	movs	r2, #32
 800733c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	6859      	ldr	r1, [r3, #4]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	4b1d      	ldr	r3, [pc, #116]	; (80073c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800734a:	400b      	ands	r3, r1
 800734c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2220      	movs	r2, #32
 8007358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2200      	movs	r2, #0
 8007368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e022      	b.n	80073b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007370:	f7fd fe84 	bl	800507c <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	429a      	cmp	r2, r3
 800737e:	d302      	bcc.n	8007386 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10f      	bne.n	80073a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800738a:	f043 0220 	orr.w	r2, r3, #32
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2220      	movs	r2, #32
 8007396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e007      	b.n	80073b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	f003 0304 	and.w	r3, r3, #4
 80073b0:	2b04      	cmp	r3, #4
 80073b2:	d1a2      	bne.n	80072fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	fe00e800 	.word	0xfe00e800

080073c4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	f003 0310 	and.w	r3, r3, #16
 80073da:	2b10      	cmp	r3, #16
 80073dc:	d161      	bne.n	80074a2 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073ec:	d02b      	beq.n	8007446 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	685a      	ldr	r2, [r3, #4]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073fc:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80073fe:	e022      	b.n	8007446 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007406:	d01e      	beq.n	8007446 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007408:	f7fd fe38 	bl	800507c <HAL_GetTick>
 800740c:	4602      	mov	r2, r0
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	429a      	cmp	r2, r3
 8007416:	d302      	bcc.n	800741e <I2C_IsAcknowledgeFailed+0x5a>
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d113      	bne.n	8007446 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007422:	f043 0220 	orr.w	r2, r3, #32
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2220      	movs	r2, #32
 800742e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e02e      	b.n	80074a4 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	699b      	ldr	r3, [r3, #24]
 800744c:	f003 0320 	and.w	r3, r3, #32
 8007450:	2b20      	cmp	r3, #32
 8007452:	d1d5      	bne.n	8007400 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2210      	movs	r2, #16
 800745a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2220      	movs	r2, #32
 8007462:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f7ff fe61 	bl	800712c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6859      	ldr	r1, [r3, #4]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	4b0d      	ldr	r3, [pc, #52]	; (80074ac <I2C_IsAcknowledgeFailed+0xe8>)
 8007476:	400b      	ands	r3, r1
 8007478:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800747e:	f043 0204 	orr.w	r2, r3, #4
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2220      	movs	r2, #32
 800748a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e000      	b.n	80074a4 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	fe00e800 	.word	0xfe00e800

080074b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	607b      	str	r3, [r7, #4]
 80074ba:	460b      	mov	r3, r1
 80074bc:	817b      	strh	r3, [r7, #10]
 80074be:	4613      	mov	r3, r2
 80074c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	685a      	ldr	r2, [r3, #4]
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	0d5b      	lsrs	r3, r3, #21
 80074cc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80074d0:	4b0d      	ldr	r3, [pc, #52]	; (8007508 <I2C_TransferConfig+0x58>)
 80074d2:	430b      	orrs	r3, r1
 80074d4:	43db      	mvns	r3, r3
 80074d6:	ea02 0103 	and.w	r1, r2, r3
 80074da:	897b      	ldrh	r3, [r7, #10]
 80074dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80074e0:	7a7b      	ldrb	r3, [r7, #9]
 80074e2:	041b      	lsls	r3, r3, #16
 80074e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80074e8:	431a      	orrs	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	431a      	orrs	r2, r3
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	431a      	orrs	r2, r3
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	430a      	orrs	r2, r1
 80074f8:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80074fa:	bf00      	nop
 80074fc:	3714      	adds	r7, #20
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	03ff63ff 	.word	0x03ff63ff

0800750c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800751c:	b2db      	uxtb	r3, r3
 800751e:	2b20      	cmp	r3, #32
 8007520:	d138      	bne.n	8007594 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007528:	2b01      	cmp	r3, #1
 800752a:	d101      	bne.n	8007530 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800752c:	2302      	movs	r3, #2
 800752e:	e032      	b.n	8007596 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2224      	movs	r2, #36	; 0x24
 800753c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f022 0201 	bic.w	r2, r2, #1
 800754e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800755e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	6819      	ldr	r1, [r3, #0]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	683a      	ldr	r2, [r7, #0]
 800756c:	430a      	orrs	r2, r1
 800756e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f042 0201 	orr.w	r2, r2, #1
 800757e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2220      	movs	r2, #32
 8007584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007590:	2300      	movs	r3, #0
 8007592:	e000      	b.n	8007596 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007594:	2302      	movs	r3, #2
  }
}
 8007596:	4618      	mov	r0, r3
 8007598:	370c      	adds	r7, #12
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr

080075a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80075a2:	b480      	push	{r7}
 80075a4:	b085      	sub	sp, #20
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
 80075aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	2b20      	cmp	r3, #32
 80075b6:	d139      	bne.n	800762c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d101      	bne.n	80075c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80075c2:	2302      	movs	r3, #2
 80075c4:	e033      	b.n	800762e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2224      	movs	r2, #36	; 0x24
 80075d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f022 0201 	bic.w	r2, r2, #1
 80075e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80075f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	021b      	lsls	r3, r3, #8
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f042 0201 	orr.w	r2, r2, #1
 8007616:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2220      	movs	r2, #32
 800761c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007628:	2300      	movs	r3, #0
 800762a:	e000      	b.n	800762e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800762c:	2302      	movs	r3, #2
  }
}
 800762e:	4618      	mov	r0, r3
 8007630:	3714      	adds	r7, #20
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800763a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800763c:	b08b      	sub	sp, #44	; 0x2c
 800763e:	af06      	add	r7, sp, #24
 8007640:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d101      	bne.n	800764c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	e0d0      	b.n	80077ee <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b00      	cmp	r3, #0
 8007656:	d106      	bne.n	8007666 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f7fd fbd1 	bl	8004e08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2203      	movs	r2, #3
 800766a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4618      	mov	r0, r3
 8007674:	f003 fd76 	bl	800b164 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007678:	2300      	movs	r3, #0
 800767a:	73fb      	strb	r3, [r7, #15]
 800767c:	e04c      	b.n	8007718 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800767e:	7bfb      	ldrb	r3, [r7, #15]
 8007680:	6879      	ldr	r1, [r7, #4]
 8007682:	1c5a      	adds	r2, r3, #1
 8007684:	4613      	mov	r3, r2
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4413      	add	r3, r2
 800768a:	00db      	lsls	r3, r3, #3
 800768c:	440b      	add	r3, r1
 800768e:	3301      	adds	r3, #1
 8007690:	2201      	movs	r2, #1
 8007692:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007694:	7bfb      	ldrb	r3, [r7, #15]
 8007696:	6879      	ldr	r1, [r7, #4]
 8007698:	1c5a      	adds	r2, r3, #1
 800769a:	4613      	mov	r3, r2
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	4413      	add	r3, r2
 80076a0:	00db      	lsls	r3, r3, #3
 80076a2:	440b      	add	r3, r1
 80076a4:	7bfa      	ldrb	r2, [r7, #15]
 80076a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80076a8:	7bfa      	ldrb	r2, [r7, #15]
 80076aa:	7bfb      	ldrb	r3, [r7, #15]
 80076ac:	b298      	uxth	r0, r3
 80076ae:	6879      	ldr	r1, [r7, #4]
 80076b0:	4613      	mov	r3, r2
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	4413      	add	r3, r2
 80076b6:	00db      	lsls	r3, r3, #3
 80076b8:	440b      	add	r3, r1
 80076ba:	3336      	adds	r3, #54	; 0x36
 80076bc:	4602      	mov	r2, r0
 80076be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80076c0:	7bfb      	ldrb	r3, [r7, #15]
 80076c2:	6879      	ldr	r1, [r7, #4]
 80076c4:	1c5a      	adds	r2, r3, #1
 80076c6:	4613      	mov	r3, r2
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	4413      	add	r3, r2
 80076cc:	00db      	lsls	r3, r3, #3
 80076ce:	440b      	add	r3, r1
 80076d0:	3303      	adds	r3, #3
 80076d2:	2200      	movs	r2, #0
 80076d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80076d6:	7bfa      	ldrb	r2, [r7, #15]
 80076d8:	6879      	ldr	r1, [r7, #4]
 80076da:	4613      	mov	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	4413      	add	r3, r2
 80076e0:	00db      	lsls	r3, r3, #3
 80076e2:	440b      	add	r3, r1
 80076e4:	3338      	adds	r3, #56	; 0x38
 80076e6:	2200      	movs	r2, #0
 80076e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80076ea:	7bfa      	ldrb	r2, [r7, #15]
 80076ec:	6879      	ldr	r1, [r7, #4]
 80076ee:	4613      	mov	r3, r2
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4413      	add	r3, r2
 80076f4:	00db      	lsls	r3, r3, #3
 80076f6:	440b      	add	r3, r1
 80076f8:	333c      	adds	r3, #60	; 0x3c
 80076fa:	2200      	movs	r2, #0
 80076fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80076fe:	7bfa      	ldrb	r2, [r7, #15]
 8007700:	6879      	ldr	r1, [r7, #4]
 8007702:	4613      	mov	r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4413      	add	r3, r2
 8007708:	00db      	lsls	r3, r3, #3
 800770a:	440b      	add	r3, r1
 800770c:	3340      	adds	r3, #64	; 0x40
 800770e:	2200      	movs	r2, #0
 8007710:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007712:	7bfb      	ldrb	r3, [r7, #15]
 8007714:	3301      	adds	r3, #1
 8007716:	73fb      	strb	r3, [r7, #15]
 8007718:	7bfa      	ldrb	r2, [r7, #15]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	429a      	cmp	r2, r3
 8007720:	d3ad      	bcc.n	800767e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007722:	2300      	movs	r3, #0
 8007724:	73fb      	strb	r3, [r7, #15]
 8007726:	e044      	b.n	80077b2 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007728:	7bfa      	ldrb	r2, [r7, #15]
 800772a:	6879      	ldr	r1, [r7, #4]
 800772c:	4613      	mov	r3, r2
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4413      	add	r3, r2
 8007732:	00db      	lsls	r3, r3, #3
 8007734:	440b      	add	r3, r1
 8007736:	f203 1369 	addw	r3, r3, #361	; 0x169
 800773a:	2200      	movs	r2, #0
 800773c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800773e:	7bfa      	ldrb	r2, [r7, #15]
 8007740:	6879      	ldr	r1, [r7, #4]
 8007742:	4613      	mov	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	4413      	add	r3, r2
 8007748:	00db      	lsls	r3, r3, #3
 800774a:	440b      	add	r3, r1
 800774c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007750:	7bfa      	ldrb	r2, [r7, #15]
 8007752:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007754:	7bfa      	ldrb	r2, [r7, #15]
 8007756:	6879      	ldr	r1, [r7, #4]
 8007758:	4613      	mov	r3, r2
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	4413      	add	r3, r2
 800775e:	00db      	lsls	r3, r3, #3
 8007760:	440b      	add	r3, r1
 8007762:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8007766:	2200      	movs	r2, #0
 8007768:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800776a:	7bfa      	ldrb	r2, [r7, #15]
 800776c:	6879      	ldr	r1, [r7, #4]
 800776e:	4613      	mov	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	00db      	lsls	r3, r3, #3
 8007776:	440b      	add	r3, r1
 8007778:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800777c:	2200      	movs	r2, #0
 800777e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007780:	7bfa      	ldrb	r2, [r7, #15]
 8007782:	6879      	ldr	r1, [r7, #4]
 8007784:	4613      	mov	r3, r2
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	4413      	add	r3, r2
 800778a:	00db      	lsls	r3, r3, #3
 800778c:	440b      	add	r3, r1
 800778e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007792:	2200      	movs	r2, #0
 8007794:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007796:	7bfa      	ldrb	r2, [r7, #15]
 8007798:	6879      	ldr	r1, [r7, #4]
 800779a:	4613      	mov	r3, r2
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	4413      	add	r3, r2
 80077a0:	00db      	lsls	r3, r3, #3
 80077a2:	440b      	add	r3, r1
 80077a4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80077a8:	2200      	movs	r2, #0
 80077aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80077ac:	7bfb      	ldrb	r3, [r7, #15]
 80077ae:	3301      	adds	r3, #1
 80077b0:	73fb      	strb	r3, [r7, #15]
 80077b2:	7bfa      	ldrb	r2, [r7, #15]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d3b5      	bcc.n	8007728 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	603b      	str	r3, [r7, #0]
 80077c2:	687e      	ldr	r6, [r7, #4]
 80077c4:	466d      	mov	r5, sp
 80077c6:	f106 0410 	add.w	r4, r6, #16
 80077ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80077cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80077ce:	6823      	ldr	r3, [r4, #0]
 80077d0:	602b      	str	r3, [r5, #0]
 80077d2:	1d33      	adds	r3, r6, #4
 80077d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80077d6:	6838      	ldr	r0, [r7, #0]
 80077d8:	f003 fcdf 	bl	800b19a <USB_DevInit>

  hpcd->USB_Address = 0U;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3714      	adds	r7, #20
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080077f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80077fe:	af00      	add	r7, sp, #0
 8007800:	1d3b      	adds	r3, r7, #4
 8007802:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007804:	1d3b      	adds	r3, r7, #4
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d102      	bne.n	8007812 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	f000 bef4 	b.w	80085fa <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007812:	1d3b      	adds	r3, r7, #4
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 0301 	and.w	r3, r3, #1
 800781c:	2b00      	cmp	r3, #0
 800781e:	f000 816a 	beq.w	8007af6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007822:	4bb3      	ldr	r3, [pc, #716]	; (8007af0 <HAL_RCC_OscConfig+0x2f8>)
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f003 030c 	and.w	r3, r3, #12
 800782a:	2b04      	cmp	r3, #4
 800782c:	d00c      	beq.n	8007848 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800782e:	4bb0      	ldr	r3, [pc, #704]	; (8007af0 <HAL_RCC_OscConfig+0x2f8>)
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	f003 030c 	and.w	r3, r3, #12
 8007836:	2b08      	cmp	r3, #8
 8007838:	d159      	bne.n	80078ee <HAL_RCC_OscConfig+0xf6>
 800783a:	4bad      	ldr	r3, [pc, #692]	; (8007af0 <HAL_RCC_OscConfig+0x2f8>)
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007846:	d152      	bne.n	80078ee <HAL_RCC_OscConfig+0xf6>
 8007848:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800784c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007850:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8007854:	fa93 f3a3 	rbit	r3, r3
 8007858:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800785c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007860:	fab3 f383 	clz	r3, r3
 8007864:	b2db      	uxtb	r3, r3
 8007866:	095b      	lsrs	r3, r3, #5
 8007868:	b2db      	uxtb	r3, r3
 800786a:	f043 0301 	orr.w	r3, r3, #1
 800786e:	b2db      	uxtb	r3, r3
 8007870:	2b01      	cmp	r3, #1
 8007872:	d102      	bne.n	800787a <HAL_RCC_OscConfig+0x82>
 8007874:	4b9e      	ldr	r3, [pc, #632]	; (8007af0 <HAL_RCC_OscConfig+0x2f8>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	e015      	b.n	80078a6 <HAL_RCC_OscConfig+0xae>
 800787a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800787e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007882:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8007886:	fa93 f3a3 	rbit	r3, r3
 800788a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800788e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007892:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8007896:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800789a:	fa93 f3a3 	rbit	r3, r3
 800789e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80078a2:	4b93      	ldr	r3, [pc, #588]	; (8007af0 <HAL_RCC_OscConfig+0x2f8>)
 80078a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80078aa:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80078ae:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80078b2:	fa92 f2a2 	rbit	r2, r2
 80078b6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80078ba:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80078be:	fab2 f282 	clz	r2, r2
 80078c2:	b2d2      	uxtb	r2, r2
 80078c4:	f042 0220 	orr.w	r2, r2, #32
 80078c8:	b2d2      	uxtb	r2, r2
 80078ca:	f002 021f 	and.w	r2, r2, #31
 80078ce:	2101      	movs	r1, #1
 80078d0:	fa01 f202 	lsl.w	r2, r1, r2
 80078d4:	4013      	ands	r3, r2
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f000 810c 	beq.w	8007af4 <HAL_RCC_OscConfig+0x2fc>
 80078dc:	1d3b      	adds	r3, r7, #4
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f040 8106 	bne.w	8007af4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	f000 be86 	b.w	80085fa <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80078ee:	1d3b      	adds	r3, r7, #4
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078f8:	d106      	bne.n	8007908 <HAL_RCC_OscConfig+0x110>
 80078fa:	4b7d      	ldr	r3, [pc, #500]	; (8007af0 <HAL_RCC_OscConfig+0x2f8>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a7c      	ldr	r2, [pc, #496]	; (8007af0 <HAL_RCC_OscConfig+0x2f8>)
 8007900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007904:	6013      	str	r3, [r2, #0]
 8007906:	e030      	b.n	800796a <HAL_RCC_OscConfig+0x172>
 8007908:	1d3b      	adds	r3, r7, #4
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d10c      	bne.n	800792c <HAL_RCC_OscConfig+0x134>
 8007912:	4b77      	ldr	r3, [pc, #476]	; (8007af0 <HAL_RCC_OscConfig+0x2f8>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a76      	ldr	r2, [pc, #472]	; (8007af0 <HAL_RCC_OscConfig+0x2f8>)
 8007918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800791c:	6013      	str	r3, [r2, #0]
 800791e:	4b74      	ldr	r3, [pc, #464]	; (8007af0 <HAL_RCC_OscConfig+0x2f8>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a73      	ldr	r2, [pc, #460]	; (8007af0 <HAL_RCC_OscConfig+0x2f8>)
 8007924:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007928:	6013      	str	r3, [r2, #0]
 800792a:	e01e      	b.n	800796a <HAL_RCC_OscConfig+0x172>
 800792c:	1d3b      	adds	r3, r7, #4
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007936:	d10c      	bne.n	8007952 <HAL_RCC_OscConfig+0x15a>
 8007938:	4b6d      	ldr	r3, [pc, #436]	; (8007af0 <HAL_RCC_OscConfig+0x2f8>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a6c      	ldr	r2, [pc, #432]	; (8007af0 <HAL_RCC_OscConfig+0x2f8>)
 800793e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007942:	6013      	str	r3, [r2, #0]
 8007944:	4b6a      	ldr	r3, [pc, #424]	; (8007af0 <HAL_RCC_OscConfig+0x2f8>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a69      	ldr	r2, [pc, #420]	; (8007af0 <HAL_RCC_OscConfig+0x2f8>)
 800794a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800794e:	6013      	str	r3, [r2, #0]
 8007950:	e00b      	b.n	800796a <HAL_RCC_OscConfig+0x172>
 8007952:	4b67      	ldr	r3, [pc, #412]	; (8007af0 <HAL_RCC_OscConfig+0x2f8>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a66      	ldr	r2, [pc, #408]	; (8007af0 <HAL_RCC_OscConfig+0x2f8>)
 8007958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800795c:	6013      	str	r3, [r2, #0]
 800795e:	4b64      	ldr	r3, [pc, #400]	; (8007af0 <HAL_RCC_OscConfig+0x2f8>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a63      	ldr	r2, [pc, #396]	; (8007af0 <HAL_RCC_OscConfig+0x2f8>)
 8007964:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007968:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800796a:	4b61      	ldr	r3, [pc, #388]	; (8007af0 <HAL_RCC_OscConfig+0x2f8>)
 800796c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796e:	f023 020f 	bic.w	r2, r3, #15
 8007972:	1d3b      	adds	r3, r7, #4
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	495d      	ldr	r1, [pc, #372]	; (8007af0 <HAL_RCC_OscConfig+0x2f8>)
 800797a:	4313      	orrs	r3, r2
 800797c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800797e:	1d3b      	adds	r3, r7, #4
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d059      	beq.n	8007a3c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007988:	f7fd fb78 	bl	800507c <HAL_GetTick>
 800798c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007990:	e00a      	b.n	80079a8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007992:	f7fd fb73 	bl	800507c <HAL_GetTick>
 8007996:	4602      	mov	r2, r0
 8007998:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800799c:	1ad3      	subs	r3, r2, r3
 800799e:	2b64      	cmp	r3, #100	; 0x64
 80079a0:	d902      	bls.n	80079a8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80079a2:	2303      	movs	r3, #3
 80079a4:	f000 be29 	b.w	80085fa <HAL_RCC_OscConfig+0xe02>
 80079a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80079ac:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079b0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80079b4:	fa93 f3a3 	rbit	r3, r3
 80079b8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80079bc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079c0:	fab3 f383 	clz	r3, r3
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	095b      	lsrs	r3, r3, #5
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	f043 0301 	orr.w	r3, r3, #1
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d102      	bne.n	80079da <HAL_RCC_OscConfig+0x1e2>
 80079d4:	4b46      	ldr	r3, [pc, #280]	; (8007af0 <HAL_RCC_OscConfig+0x2f8>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	e015      	b.n	8007a06 <HAL_RCC_OscConfig+0x20e>
 80079da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80079de:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079e2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80079e6:	fa93 f3a3 	rbit	r3, r3
 80079ea:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80079ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80079f2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80079f6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80079fa:	fa93 f3a3 	rbit	r3, r3
 80079fe:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8007a02:	4b3b      	ldr	r3, [pc, #236]	; (8007af0 <HAL_RCC_OscConfig+0x2f8>)
 8007a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007a0a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8007a0e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007a12:	fa92 f2a2 	rbit	r2, r2
 8007a16:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8007a1a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8007a1e:	fab2 f282 	clz	r2, r2
 8007a22:	b2d2      	uxtb	r2, r2
 8007a24:	f042 0220 	orr.w	r2, r2, #32
 8007a28:	b2d2      	uxtb	r2, r2
 8007a2a:	f002 021f 	and.w	r2, r2, #31
 8007a2e:	2101      	movs	r1, #1
 8007a30:	fa01 f202 	lsl.w	r2, r1, r2
 8007a34:	4013      	ands	r3, r2
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d0ab      	beq.n	8007992 <HAL_RCC_OscConfig+0x19a>
 8007a3a:	e05c      	b.n	8007af6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a3c:	f7fd fb1e 	bl	800507c <HAL_GetTick>
 8007a40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a44:	e00a      	b.n	8007a5c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a46:	f7fd fb19 	bl	800507c <HAL_GetTick>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	2b64      	cmp	r3, #100	; 0x64
 8007a54:	d902      	bls.n	8007a5c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	f000 bdcf 	b.w	80085fa <HAL_RCC_OscConfig+0xe02>
 8007a5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007a60:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a64:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8007a68:	fa93 f3a3 	rbit	r3, r3
 8007a6c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8007a70:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a74:	fab3 f383 	clz	r3, r3
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	095b      	lsrs	r3, r3, #5
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	f043 0301 	orr.w	r3, r3, #1
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d102      	bne.n	8007a8e <HAL_RCC_OscConfig+0x296>
 8007a88:	4b19      	ldr	r3, [pc, #100]	; (8007af0 <HAL_RCC_OscConfig+0x2f8>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	e015      	b.n	8007aba <HAL_RCC_OscConfig+0x2c2>
 8007a8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007a92:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a96:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8007a9a:	fa93 f3a3 	rbit	r3, r3
 8007a9e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007aa2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007aa6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8007aaa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8007aae:	fa93 f3a3 	rbit	r3, r3
 8007ab2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8007ab6:	4b0e      	ldr	r3, [pc, #56]	; (8007af0 <HAL_RCC_OscConfig+0x2f8>)
 8007ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007abe:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8007ac2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8007ac6:	fa92 f2a2 	rbit	r2, r2
 8007aca:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8007ace:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8007ad2:	fab2 f282 	clz	r2, r2
 8007ad6:	b2d2      	uxtb	r2, r2
 8007ad8:	f042 0220 	orr.w	r2, r2, #32
 8007adc:	b2d2      	uxtb	r2, r2
 8007ade:	f002 021f 	and.w	r2, r2, #31
 8007ae2:	2101      	movs	r1, #1
 8007ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8007ae8:	4013      	ands	r3, r2
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1ab      	bne.n	8007a46 <HAL_RCC_OscConfig+0x24e>
 8007aee:	e002      	b.n	8007af6 <HAL_RCC_OscConfig+0x2fe>
 8007af0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007af6:	1d3b      	adds	r3, r7, #4
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 0302 	and.w	r3, r3, #2
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f000 816f 	beq.w	8007de4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007b06:	4bd0      	ldr	r3, [pc, #832]	; (8007e48 <HAL_RCC_OscConfig+0x650>)
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	f003 030c 	and.w	r3, r3, #12
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00b      	beq.n	8007b2a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007b12:	4bcd      	ldr	r3, [pc, #820]	; (8007e48 <HAL_RCC_OscConfig+0x650>)
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	f003 030c 	and.w	r3, r3, #12
 8007b1a:	2b08      	cmp	r3, #8
 8007b1c:	d16c      	bne.n	8007bf8 <HAL_RCC_OscConfig+0x400>
 8007b1e:	4bca      	ldr	r3, [pc, #808]	; (8007e48 <HAL_RCC_OscConfig+0x650>)
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d166      	bne.n	8007bf8 <HAL_RCC_OscConfig+0x400>
 8007b2a:	2302      	movs	r3, #2
 8007b2c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b30:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8007b34:	fa93 f3a3 	rbit	r3, r3
 8007b38:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8007b3c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b40:	fab3 f383 	clz	r3, r3
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	095b      	lsrs	r3, r3, #5
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	f043 0301 	orr.w	r3, r3, #1
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d102      	bne.n	8007b5a <HAL_RCC_OscConfig+0x362>
 8007b54:	4bbc      	ldr	r3, [pc, #752]	; (8007e48 <HAL_RCC_OscConfig+0x650>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	e013      	b.n	8007b82 <HAL_RCC_OscConfig+0x38a>
 8007b5a:	2302      	movs	r3, #2
 8007b5c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b60:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8007b64:	fa93 f3a3 	rbit	r3, r3
 8007b68:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8007b6c:	2302      	movs	r3, #2
 8007b6e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8007b72:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8007b76:	fa93 f3a3 	rbit	r3, r3
 8007b7a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8007b7e:	4bb2      	ldr	r3, [pc, #712]	; (8007e48 <HAL_RCC_OscConfig+0x650>)
 8007b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b82:	2202      	movs	r2, #2
 8007b84:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8007b88:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8007b8c:	fa92 f2a2 	rbit	r2, r2
 8007b90:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8007b94:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8007b98:	fab2 f282 	clz	r2, r2
 8007b9c:	b2d2      	uxtb	r2, r2
 8007b9e:	f042 0220 	orr.w	r2, r2, #32
 8007ba2:	b2d2      	uxtb	r2, r2
 8007ba4:	f002 021f 	and.w	r2, r2, #31
 8007ba8:	2101      	movs	r1, #1
 8007baa:	fa01 f202 	lsl.w	r2, r1, r2
 8007bae:	4013      	ands	r3, r2
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d007      	beq.n	8007bc4 <HAL_RCC_OscConfig+0x3cc>
 8007bb4:	1d3b      	adds	r3, r7, #4
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d002      	beq.n	8007bc4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	f000 bd1b 	b.w	80085fa <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bc4:	4ba0      	ldr	r3, [pc, #640]	; (8007e48 <HAL_RCC_OscConfig+0x650>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007bcc:	1d3b      	adds	r3, r7, #4
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	695b      	ldr	r3, [r3, #20]
 8007bd2:	21f8      	movs	r1, #248	; 0xf8
 8007bd4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bd8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8007bdc:	fa91 f1a1 	rbit	r1, r1
 8007be0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8007be4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8007be8:	fab1 f181 	clz	r1, r1
 8007bec:	b2c9      	uxtb	r1, r1
 8007bee:	408b      	lsls	r3, r1
 8007bf0:	4995      	ldr	r1, [pc, #596]	; (8007e48 <HAL_RCC_OscConfig+0x650>)
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007bf6:	e0f5      	b.n	8007de4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007bf8:	1d3b      	adds	r3, r7, #4
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f000 8085 	beq.w	8007d0e <HAL_RCC_OscConfig+0x516>
 8007c04:	2301      	movs	r3, #1
 8007c06:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c0a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8007c0e:	fa93 f3a3 	rbit	r3, r3
 8007c12:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8007c16:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c1a:	fab3 f383 	clz	r3, r3
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007c24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c30:	f7fd fa24 	bl	800507c <HAL_GetTick>
 8007c34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c38:	e00a      	b.n	8007c50 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c3a:	f7fd fa1f 	bl	800507c <HAL_GetTick>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d902      	bls.n	8007c50 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	f000 bcd5 	b.w	80085fa <HAL_RCC_OscConfig+0xe02>
 8007c50:	2302      	movs	r3, #2
 8007c52:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c56:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8007c5a:	fa93 f3a3 	rbit	r3, r3
 8007c5e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8007c62:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c66:	fab3 f383 	clz	r3, r3
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	095b      	lsrs	r3, r3, #5
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	f043 0301 	orr.w	r3, r3, #1
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d102      	bne.n	8007c80 <HAL_RCC_OscConfig+0x488>
 8007c7a:	4b73      	ldr	r3, [pc, #460]	; (8007e48 <HAL_RCC_OscConfig+0x650>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	e013      	b.n	8007ca8 <HAL_RCC_OscConfig+0x4b0>
 8007c80:	2302      	movs	r3, #2
 8007c82:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c86:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8007c8a:	fa93 f3a3 	rbit	r3, r3
 8007c8e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8007c92:	2302      	movs	r3, #2
 8007c94:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007c98:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007c9c:	fa93 f3a3 	rbit	r3, r3
 8007ca0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8007ca4:	4b68      	ldr	r3, [pc, #416]	; (8007e48 <HAL_RCC_OscConfig+0x650>)
 8007ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca8:	2202      	movs	r2, #2
 8007caa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8007cae:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8007cb2:	fa92 f2a2 	rbit	r2, r2
 8007cb6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8007cba:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8007cbe:	fab2 f282 	clz	r2, r2
 8007cc2:	b2d2      	uxtb	r2, r2
 8007cc4:	f042 0220 	orr.w	r2, r2, #32
 8007cc8:	b2d2      	uxtb	r2, r2
 8007cca:	f002 021f 	and.w	r2, r2, #31
 8007cce:	2101      	movs	r1, #1
 8007cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d0af      	beq.n	8007c3a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cda:	4b5b      	ldr	r3, [pc, #364]	; (8007e48 <HAL_RCC_OscConfig+0x650>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ce2:	1d3b      	adds	r3, r7, #4
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	695b      	ldr	r3, [r3, #20]
 8007ce8:	21f8      	movs	r1, #248	; 0xf8
 8007cea:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cee:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007cf2:	fa91 f1a1 	rbit	r1, r1
 8007cf6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8007cfa:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8007cfe:	fab1 f181 	clz	r1, r1
 8007d02:	b2c9      	uxtb	r1, r1
 8007d04:	408b      	lsls	r3, r1
 8007d06:	4950      	ldr	r1, [pc, #320]	; (8007e48 <HAL_RCC_OscConfig+0x650>)
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	600b      	str	r3, [r1, #0]
 8007d0c:	e06a      	b.n	8007de4 <HAL_RCC_OscConfig+0x5ec>
 8007d0e:	2301      	movs	r3, #1
 8007d10:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d14:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007d18:	fa93 f3a3 	rbit	r3, r3
 8007d1c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8007d20:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d24:	fab3 f383 	clz	r3, r3
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007d2e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	461a      	mov	r2, r3
 8007d36:	2300      	movs	r3, #0
 8007d38:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d3a:	f7fd f99f 	bl	800507c <HAL_GetTick>
 8007d3e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d42:	e00a      	b.n	8007d5a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d44:	f7fd f99a 	bl	800507c <HAL_GetTick>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007d4e:	1ad3      	subs	r3, r2, r3
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d902      	bls.n	8007d5a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8007d54:	2303      	movs	r3, #3
 8007d56:	f000 bc50 	b.w	80085fa <HAL_RCC_OscConfig+0xe02>
 8007d5a:	2302      	movs	r3, #2
 8007d5c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d60:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007d64:	fa93 f3a3 	rbit	r3, r3
 8007d68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8007d6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d70:	fab3 f383 	clz	r3, r3
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	095b      	lsrs	r3, r3, #5
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	f043 0301 	orr.w	r3, r3, #1
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d102      	bne.n	8007d8a <HAL_RCC_OscConfig+0x592>
 8007d84:	4b30      	ldr	r3, [pc, #192]	; (8007e48 <HAL_RCC_OscConfig+0x650>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	e013      	b.n	8007db2 <HAL_RCC_OscConfig+0x5ba>
 8007d8a:	2302      	movs	r3, #2
 8007d8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d94:	fa93 f3a3 	rbit	r3, r3
 8007d98:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007da2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007da6:	fa93 f3a3 	rbit	r3, r3
 8007daa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007dae:	4b26      	ldr	r3, [pc, #152]	; (8007e48 <HAL_RCC_OscConfig+0x650>)
 8007db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db2:	2202      	movs	r2, #2
 8007db4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8007db8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007dbc:	fa92 f2a2 	rbit	r2, r2
 8007dc0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8007dc4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8007dc8:	fab2 f282 	clz	r2, r2
 8007dcc:	b2d2      	uxtb	r2, r2
 8007dce:	f042 0220 	orr.w	r2, r2, #32
 8007dd2:	b2d2      	uxtb	r2, r2
 8007dd4:	f002 021f 	and.w	r2, r2, #31
 8007dd8:	2101      	movs	r1, #1
 8007dda:	fa01 f202 	lsl.w	r2, r1, r2
 8007dde:	4013      	ands	r3, r2
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1af      	bne.n	8007d44 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007de4:	1d3b      	adds	r3, r7, #4
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 0308 	and.w	r3, r3, #8
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f000 80da 	beq.w	8007fa8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007df4:	1d3b      	adds	r3, r7, #4
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	699b      	ldr	r3, [r3, #24]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d069      	beq.n	8007ed2 <HAL_RCC_OscConfig+0x6da>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e04:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e08:	fa93 f3a3 	rbit	r3, r3
 8007e0c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8007e10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e14:	fab3 f383 	clz	r3, r3
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	4b0b      	ldr	r3, [pc, #44]	; (8007e4c <HAL_RCC_OscConfig+0x654>)
 8007e1e:	4413      	add	r3, r2
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	461a      	mov	r2, r3
 8007e24:	2301      	movs	r3, #1
 8007e26:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e28:	f7fd f928 	bl	800507c <HAL_GetTick>
 8007e2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e30:	e00e      	b.n	8007e50 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e32:	f7fd f923 	bl	800507c <HAL_GetTick>
 8007e36:	4602      	mov	r2, r0
 8007e38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007e3c:	1ad3      	subs	r3, r2, r3
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d906      	bls.n	8007e50 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8007e42:	2303      	movs	r3, #3
 8007e44:	e3d9      	b.n	80085fa <HAL_RCC_OscConfig+0xe02>
 8007e46:	bf00      	nop
 8007e48:	40021000 	.word	0x40021000
 8007e4c:	10908120 	.word	0x10908120
 8007e50:	2302      	movs	r3, #2
 8007e52:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e5a:	fa93 f3a3 	rbit	r3, r3
 8007e5e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007e62:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8007e66:	2202      	movs	r2, #2
 8007e68:	601a      	str	r2, [r3, #0]
 8007e6a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	fa93 f2a3 	rbit	r2, r3
 8007e74:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8007e78:	601a      	str	r2, [r3, #0]
 8007e7a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8007e7e:	2202      	movs	r2, #2
 8007e80:	601a      	str	r2, [r3, #0]
 8007e82:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	fa93 f2a3 	rbit	r2, r3
 8007e8c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8007e90:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e92:	4ba5      	ldr	r3, [pc, #660]	; (8008128 <HAL_RCC_OscConfig+0x930>)
 8007e94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e96:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8007e9a:	2102      	movs	r1, #2
 8007e9c:	6019      	str	r1, [r3, #0]
 8007e9e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	fa93 f1a3 	rbit	r1, r3
 8007ea8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8007eac:	6019      	str	r1, [r3, #0]
  return result;
 8007eae:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	fab3 f383 	clz	r3, r3
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	f003 031f 	and.w	r3, r3, #31
 8007ec4:	2101      	movs	r1, #1
 8007ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8007eca:	4013      	ands	r3, r2
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d0b0      	beq.n	8007e32 <HAL_RCC_OscConfig+0x63a>
 8007ed0:	e06a      	b.n	8007fa8 <HAL_RCC_OscConfig+0x7b0>
 8007ed2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007eda:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	fa93 f2a3 	rbit	r2, r3
 8007ee4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8007ee8:	601a      	str	r2, [r3, #0]
  return result;
 8007eea:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8007eee:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ef0:	fab3 f383 	clz	r3, r3
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	4b8c      	ldr	r3, [pc, #560]	; (800812c <HAL_RCC_OscConfig+0x934>)
 8007efa:	4413      	add	r3, r2
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	461a      	mov	r2, r3
 8007f00:	2300      	movs	r3, #0
 8007f02:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f04:	f7fd f8ba 	bl	800507c <HAL_GetTick>
 8007f08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f0c:	e009      	b.n	8007f22 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f0e:	f7fd f8b5 	bl	800507c <HAL_GetTick>
 8007f12:	4602      	mov	r2, r0
 8007f14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d901      	bls.n	8007f22 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e36b      	b.n	80085fa <HAL_RCC_OscConfig+0xe02>
 8007f22:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8007f26:	2202      	movs	r2, #2
 8007f28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f2a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	fa93 f2a3 	rbit	r2, r3
 8007f34:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8007f38:	601a      	str	r2, [r3, #0]
 8007f3a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8007f3e:	2202      	movs	r2, #2
 8007f40:	601a      	str	r2, [r3, #0]
 8007f42:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	fa93 f2a3 	rbit	r2, r3
 8007f4c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007f50:	601a      	str	r2, [r3, #0]
 8007f52:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8007f56:	2202      	movs	r2, #2
 8007f58:	601a      	str	r2, [r3, #0]
 8007f5a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	fa93 f2a3 	rbit	r2, r3
 8007f64:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007f68:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f6a:	4b6f      	ldr	r3, [pc, #444]	; (8008128 <HAL_RCC_OscConfig+0x930>)
 8007f6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f6e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007f72:	2102      	movs	r1, #2
 8007f74:	6019      	str	r1, [r3, #0]
 8007f76:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	fa93 f1a3 	rbit	r1, r3
 8007f80:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007f84:	6019      	str	r1, [r3, #0]
  return result;
 8007f86:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	fab3 f383 	clz	r3, r3
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	f003 031f 	and.w	r3, r3, #31
 8007f9c:	2101      	movs	r1, #1
 8007f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1b2      	bne.n	8007f0e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007fa8:	1d3b      	adds	r3, r7, #4
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 0304 	and.w	r3, r3, #4
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f000 8158 	beq.w	8008268 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007fbe:	4b5a      	ldr	r3, [pc, #360]	; (8008128 <HAL_RCC_OscConfig+0x930>)
 8007fc0:	69db      	ldr	r3, [r3, #28]
 8007fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d112      	bne.n	8007ff0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007fca:	4b57      	ldr	r3, [pc, #348]	; (8008128 <HAL_RCC_OscConfig+0x930>)
 8007fcc:	69db      	ldr	r3, [r3, #28]
 8007fce:	4a56      	ldr	r2, [pc, #344]	; (8008128 <HAL_RCC_OscConfig+0x930>)
 8007fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fd4:	61d3      	str	r3, [r2, #28]
 8007fd6:	4b54      	ldr	r3, [pc, #336]	; (8008128 <HAL_RCC_OscConfig+0x930>)
 8007fd8:	69db      	ldr	r3, [r3, #28]
 8007fda:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8007fde:	f107 0308 	add.w	r3, r7, #8
 8007fe2:	601a      	str	r2, [r3, #0]
 8007fe4:	f107 0308 	add.w	r3, r7, #8
 8007fe8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8007fea:	2301      	movs	r3, #1
 8007fec:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ff0:	4b4f      	ldr	r3, [pc, #316]	; (8008130 <HAL_RCC_OscConfig+0x938>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d11a      	bne.n	8008032 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ffc:	4b4c      	ldr	r3, [pc, #304]	; (8008130 <HAL_RCC_OscConfig+0x938>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a4b      	ldr	r2, [pc, #300]	; (8008130 <HAL_RCC_OscConfig+0x938>)
 8008002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008006:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008008:	f7fd f838 	bl	800507c <HAL_GetTick>
 800800c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008010:	e009      	b.n	8008026 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008012:	f7fd f833 	bl	800507c <HAL_GetTick>
 8008016:	4602      	mov	r2, r0
 8008018:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	2b64      	cmp	r3, #100	; 0x64
 8008020:	d901      	bls.n	8008026 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8008022:	2303      	movs	r3, #3
 8008024:	e2e9      	b.n	80085fa <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008026:	4b42      	ldr	r3, [pc, #264]	; (8008130 <HAL_RCC_OscConfig+0x938>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800802e:	2b00      	cmp	r3, #0
 8008030:	d0ef      	beq.n	8008012 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008032:	1d3b      	adds	r3, r7, #4
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	2b01      	cmp	r3, #1
 800803a:	d106      	bne.n	800804a <HAL_RCC_OscConfig+0x852>
 800803c:	4b3a      	ldr	r3, [pc, #232]	; (8008128 <HAL_RCC_OscConfig+0x930>)
 800803e:	6a1b      	ldr	r3, [r3, #32]
 8008040:	4a39      	ldr	r2, [pc, #228]	; (8008128 <HAL_RCC_OscConfig+0x930>)
 8008042:	f043 0301 	orr.w	r3, r3, #1
 8008046:	6213      	str	r3, [r2, #32]
 8008048:	e02f      	b.n	80080aa <HAL_RCC_OscConfig+0x8b2>
 800804a:	1d3b      	adds	r3, r7, #4
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10c      	bne.n	800806e <HAL_RCC_OscConfig+0x876>
 8008054:	4b34      	ldr	r3, [pc, #208]	; (8008128 <HAL_RCC_OscConfig+0x930>)
 8008056:	6a1b      	ldr	r3, [r3, #32]
 8008058:	4a33      	ldr	r2, [pc, #204]	; (8008128 <HAL_RCC_OscConfig+0x930>)
 800805a:	f023 0301 	bic.w	r3, r3, #1
 800805e:	6213      	str	r3, [r2, #32]
 8008060:	4b31      	ldr	r3, [pc, #196]	; (8008128 <HAL_RCC_OscConfig+0x930>)
 8008062:	6a1b      	ldr	r3, [r3, #32]
 8008064:	4a30      	ldr	r2, [pc, #192]	; (8008128 <HAL_RCC_OscConfig+0x930>)
 8008066:	f023 0304 	bic.w	r3, r3, #4
 800806a:	6213      	str	r3, [r2, #32]
 800806c:	e01d      	b.n	80080aa <HAL_RCC_OscConfig+0x8b2>
 800806e:	1d3b      	adds	r3, r7, #4
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	2b05      	cmp	r3, #5
 8008076:	d10c      	bne.n	8008092 <HAL_RCC_OscConfig+0x89a>
 8008078:	4b2b      	ldr	r3, [pc, #172]	; (8008128 <HAL_RCC_OscConfig+0x930>)
 800807a:	6a1b      	ldr	r3, [r3, #32]
 800807c:	4a2a      	ldr	r2, [pc, #168]	; (8008128 <HAL_RCC_OscConfig+0x930>)
 800807e:	f043 0304 	orr.w	r3, r3, #4
 8008082:	6213      	str	r3, [r2, #32]
 8008084:	4b28      	ldr	r3, [pc, #160]	; (8008128 <HAL_RCC_OscConfig+0x930>)
 8008086:	6a1b      	ldr	r3, [r3, #32]
 8008088:	4a27      	ldr	r2, [pc, #156]	; (8008128 <HAL_RCC_OscConfig+0x930>)
 800808a:	f043 0301 	orr.w	r3, r3, #1
 800808e:	6213      	str	r3, [r2, #32]
 8008090:	e00b      	b.n	80080aa <HAL_RCC_OscConfig+0x8b2>
 8008092:	4b25      	ldr	r3, [pc, #148]	; (8008128 <HAL_RCC_OscConfig+0x930>)
 8008094:	6a1b      	ldr	r3, [r3, #32]
 8008096:	4a24      	ldr	r2, [pc, #144]	; (8008128 <HAL_RCC_OscConfig+0x930>)
 8008098:	f023 0301 	bic.w	r3, r3, #1
 800809c:	6213      	str	r3, [r2, #32]
 800809e:	4b22      	ldr	r3, [pc, #136]	; (8008128 <HAL_RCC_OscConfig+0x930>)
 80080a0:	6a1b      	ldr	r3, [r3, #32]
 80080a2:	4a21      	ldr	r2, [pc, #132]	; (8008128 <HAL_RCC_OscConfig+0x930>)
 80080a4:	f023 0304 	bic.w	r3, r3, #4
 80080a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80080aa:	1d3b      	adds	r3, r7, #4
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d06b      	beq.n	800818c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080b4:	f7fc ffe2 	bl	800507c <HAL_GetTick>
 80080b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080bc:	e00b      	b.n	80080d6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080be:	f7fc ffdd 	bl	800507c <HAL_GetTick>
 80080c2:	4602      	mov	r2, r0
 80080c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d901      	bls.n	80080d6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e291      	b.n	80085fa <HAL_RCC_OscConfig+0xe02>
 80080d6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80080da:	2202      	movs	r2, #2
 80080dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080de:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	fa93 f2a3 	rbit	r2, r3
 80080e8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80080ec:	601a      	str	r2, [r3, #0]
 80080ee:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80080f2:	2202      	movs	r2, #2
 80080f4:	601a      	str	r2, [r3, #0]
 80080f6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	fa93 f2a3 	rbit	r2, r3
 8008100:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8008104:	601a      	str	r2, [r3, #0]
  return result;
 8008106:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800810a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800810c:	fab3 f383 	clz	r3, r3
 8008110:	b2db      	uxtb	r3, r3
 8008112:	095b      	lsrs	r3, r3, #5
 8008114:	b2db      	uxtb	r3, r3
 8008116:	f043 0302 	orr.w	r3, r3, #2
 800811a:	b2db      	uxtb	r3, r3
 800811c:	2b02      	cmp	r3, #2
 800811e:	d109      	bne.n	8008134 <HAL_RCC_OscConfig+0x93c>
 8008120:	4b01      	ldr	r3, [pc, #4]	; (8008128 <HAL_RCC_OscConfig+0x930>)
 8008122:	6a1b      	ldr	r3, [r3, #32]
 8008124:	e014      	b.n	8008150 <HAL_RCC_OscConfig+0x958>
 8008126:	bf00      	nop
 8008128:	40021000 	.word	0x40021000
 800812c:	10908120 	.word	0x10908120
 8008130:	40007000 	.word	0x40007000
 8008134:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8008138:	2202      	movs	r2, #2
 800813a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800813c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	fa93 f2a3 	rbit	r2, r3
 8008146:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800814a:	601a      	str	r2, [r3, #0]
 800814c:	4bbb      	ldr	r3, [pc, #748]	; (800843c <HAL_RCC_OscConfig+0xc44>)
 800814e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008150:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8008154:	2102      	movs	r1, #2
 8008156:	6011      	str	r1, [r2, #0]
 8008158:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800815c:	6812      	ldr	r2, [r2, #0]
 800815e:	fa92 f1a2 	rbit	r1, r2
 8008162:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8008166:	6011      	str	r1, [r2, #0]
  return result;
 8008168:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800816c:	6812      	ldr	r2, [r2, #0]
 800816e:	fab2 f282 	clz	r2, r2
 8008172:	b2d2      	uxtb	r2, r2
 8008174:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008178:	b2d2      	uxtb	r2, r2
 800817a:	f002 021f 	and.w	r2, r2, #31
 800817e:	2101      	movs	r1, #1
 8008180:	fa01 f202 	lsl.w	r2, r1, r2
 8008184:	4013      	ands	r3, r2
 8008186:	2b00      	cmp	r3, #0
 8008188:	d099      	beq.n	80080be <HAL_RCC_OscConfig+0x8c6>
 800818a:	e063      	b.n	8008254 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800818c:	f7fc ff76 	bl	800507c <HAL_GetTick>
 8008190:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008194:	e00b      	b.n	80081ae <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008196:	f7fc ff71 	bl	800507c <HAL_GetTick>
 800819a:	4602      	mov	r2, r0
 800819c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80081a0:	1ad3      	subs	r3, r2, r3
 80081a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d901      	bls.n	80081ae <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80081aa:	2303      	movs	r3, #3
 80081ac:	e225      	b.n	80085fa <HAL_RCC_OscConfig+0xe02>
 80081ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80081b2:	2202      	movs	r2, #2
 80081b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081b6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	fa93 f2a3 	rbit	r2, r3
 80081c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80081c4:	601a      	str	r2, [r3, #0]
 80081c6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80081ca:	2202      	movs	r2, #2
 80081cc:	601a      	str	r2, [r3, #0]
 80081ce:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	fa93 f2a3 	rbit	r2, r3
 80081d8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80081dc:	601a      	str	r2, [r3, #0]
  return result;
 80081de:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80081e2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80081e4:	fab3 f383 	clz	r3, r3
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	095b      	lsrs	r3, r3, #5
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	f043 0302 	orr.w	r3, r3, #2
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d102      	bne.n	80081fe <HAL_RCC_OscConfig+0xa06>
 80081f8:	4b90      	ldr	r3, [pc, #576]	; (800843c <HAL_RCC_OscConfig+0xc44>)
 80081fa:	6a1b      	ldr	r3, [r3, #32]
 80081fc:	e00d      	b.n	800821a <HAL_RCC_OscConfig+0xa22>
 80081fe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008202:	2202      	movs	r2, #2
 8008204:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008206:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	fa93 f2a3 	rbit	r2, r3
 8008210:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008214:	601a      	str	r2, [r3, #0]
 8008216:	4b89      	ldr	r3, [pc, #548]	; (800843c <HAL_RCC_OscConfig+0xc44>)
 8008218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800821e:	2102      	movs	r1, #2
 8008220:	6011      	str	r1, [r2, #0]
 8008222:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8008226:	6812      	ldr	r2, [r2, #0]
 8008228:	fa92 f1a2 	rbit	r1, r2
 800822c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8008230:	6011      	str	r1, [r2, #0]
  return result;
 8008232:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8008236:	6812      	ldr	r2, [r2, #0]
 8008238:	fab2 f282 	clz	r2, r2
 800823c:	b2d2      	uxtb	r2, r2
 800823e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008242:	b2d2      	uxtb	r2, r2
 8008244:	f002 021f 	and.w	r2, r2, #31
 8008248:	2101      	movs	r1, #1
 800824a:	fa01 f202 	lsl.w	r2, r1, r2
 800824e:	4013      	ands	r3, r2
 8008250:	2b00      	cmp	r3, #0
 8008252:	d1a0      	bne.n	8008196 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008254:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8008258:	2b01      	cmp	r3, #1
 800825a:	d105      	bne.n	8008268 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800825c:	4b77      	ldr	r3, [pc, #476]	; (800843c <HAL_RCC_OscConfig+0xc44>)
 800825e:	69db      	ldr	r3, [r3, #28]
 8008260:	4a76      	ldr	r2, [pc, #472]	; (800843c <HAL_RCC_OscConfig+0xc44>)
 8008262:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008266:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008268:	1d3b      	adds	r3, r7, #4
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	69db      	ldr	r3, [r3, #28]
 800826e:	2b00      	cmp	r3, #0
 8008270:	f000 81c2 	beq.w	80085f8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008274:	4b71      	ldr	r3, [pc, #452]	; (800843c <HAL_RCC_OscConfig+0xc44>)
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	f003 030c 	and.w	r3, r3, #12
 800827c:	2b08      	cmp	r3, #8
 800827e:	f000 819c 	beq.w	80085ba <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008282:	1d3b      	adds	r3, r7, #4
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	69db      	ldr	r3, [r3, #28]
 8008288:	2b02      	cmp	r3, #2
 800828a:	f040 8114 	bne.w	80084b6 <HAL_RCC_OscConfig+0xcbe>
 800828e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008292:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008296:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008298:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	fa93 f2a3 	rbit	r2, r3
 80082a2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80082a6:	601a      	str	r2, [r3, #0]
  return result;
 80082a8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80082ac:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082ae:	fab3 f383 	clz	r3, r3
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80082b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	461a      	mov	r2, r3
 80082c0:	2300      	movs	r3, #0
 80082c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082c4:	f7fc feda 	bl	800507c <HAL_GetTick>
 80082c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80082cc:	e009      	b.n	80082e2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082ce:	f7fc fed5 	bl	800507c <HAL_GetTick>
 80082d2:	4602      	mov	r2, r0
 80082d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80082d8:	1ad3      	subs	r3, r2, r3
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d901      	bls.n	80082e2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80082de:	2303      	movs	r3, #3
 80082e0:	e18b      	b.n	80085fa <HAL_RCC_OscConfig+0xe02>
 80082e2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80082e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80082ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082ec:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	fa93 f2a3 	rbit	r2, r3
 80082f6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80082fa:	601a      	str	r2, [r3, #0]
  return result;
 80082fc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008300:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008302:	fab3 f383 	clz	r3, r3
 8008306:	b2db      	uxtb	r3, r3
 8008308:	095b      	lsrs	r3, r3, #5
 800830a:	b2db      	uxtb	r3, r3
 800830c:	f043 0301 	orr.w	r3, r3, #1
 8008310:	b2db      	uxtb	r3, r3
 8008312:	2b01      	cmp	r3, #1
 8008314:	d102      	bne.n	800831c <HAL_RCC_OscConfig+0xb24>
 8008316:	4b49      	ldr	r3, [pc, #292]	; (800843c <HAL_RCC_OscConfig+0xc44>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	e01b      	b.n	8008354 <HAL_RCC_OscConfig+0xb5c>
 800831c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008320:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008324:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008326:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	fa93 f2a3 	rbit	r2, r3
 8008330:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008334:	601a      	str	r2, [r3, #0]
 8008336:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800833a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800833e:	601a      	str	r2, [r3, #0]
 8008340:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	fa93 f2a3 	rbit	r2, r3
 800834a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800834e:	601a      	str	r2, [r3, #0]
 8008350:	4b3a      	ldr	r3, [pc, #232]	; (800843c <HAL_RCC_OscConfig+0xc44>)
 8008352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008354:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8008358:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800835c:	6011      	str	r1, [r2, #0]
 800835e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8008362:	6812      	ldr	r2, [r2, #0]
 8008364:	fa92 f1a2 	rbit	r1, r2
 8008368:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800836c:	6011      	str	r1, [r2, #0]
  return result;
 800836e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8008372:	6812      	ldr	r2, [r2, #0]
 8008374:	fab2 f282 	clz	r2, r2
 8008378:	b2d2      	uxtb	r2, r2
 800837a:	f042 0220 	orr.w	r2, r2, #32
 800837e:	b2d2      	uxtb	r2, r2
 8008380:	f002 021f 	and.w	r2, r2, #31
 8008384:	2101      	movs	r1, #1
 8008386:	fa01 f202 	lsl.w	r2, r1, r2
 800838a:	4013      	ands	r3, r2
 800838c:	2b00      	cmp	r3, #0
 800838e:	d19e      	bne.n	80082ce <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008390:	4b2a      	ldr	r3, [pc, #168]	; (800843c <HAL_RCC_OscConfig+0xc44>)
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008398:	1d3b      	adds	r3, r7, #4
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800839e:	1d3b      	adds	r3, r7, #4
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6a1b      	ldr	r3, [r3, #32]
 80083a4:	430b      	orrs	r3, r1
 80083a6:	4925      	ldr	r1, [pc, #148]	; (800843c <HAL_RCC_OscConfig+0xc44>)
 80083a8:	4313      	orrs	r3, r2
 80083aa:	604b      	str	r3, [r1, #4]
 80083ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80083b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80083b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	fa93 f2a3 	rbit	r2, r3
 80083c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80083c4:	601a      	str	r2, [r3, #0]
  return result;
 80083c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80083ca:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80083cc:	fab3 f383 	clz	r3, r3
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80083d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	461a      	mov	r2, r3
 80083de:	2301      	movs	r3, #1
 80083e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083e2:	f7fc fe4b 	bl	800507c <HAL_GetTick>
 80083e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80083ea:	e009      	b.n	8008400 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083ec:	f7fc fe46 	bl	800507c <HAL_GetTick>
 80083f0:	4602      	mov	r2, r0
 80083f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80083f6:	1ad3      	subs	r3, r2, r3
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	d901      	bls.n	8008400 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80083fc:	2303      	movs	r3, #3
 80083fe:	e0fc      	b.n	80085fa <HAL_RCC_OscConfig+0xe02>
 8008400:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008404:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008408:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800840a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	fa93 f2a3 	rbit	r2, r3
 8008414:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008418:	601a      	str	r2, [r3, #0]
  return result;
 800841a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800841e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008420:	fab3 f383 	clz	r3, r3
 8008424:	b2db      	uxtb	r3, r3
 8008426:	095b      	lsrs	r3, r3, #5
 8008428:	b2db      	uxtb	r3, r3
 800842a:	f043 0301 	orr.w	r3, r3, #1
 800842e:	b2db      	uxtb	r3, r3
 8008430:	2b01      	cmp	r3, #1
 8008432:	d105      	bne.n	8008440 <HAL_RCC_OscConfig+0xc48>
 8008434:	4b01      	ldr	r3, [pc, #4]	; (800843c <HAL_RCC_OscConfig+0xc44>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	e01e      	b.n	8008478 <HAL_RCC_OscConfig+0xc80>
 800843a:	bf00      	nop
 800843c:	40021000 	.word	0x40021000
 8008440:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008444:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008448:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800844a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	fa93 f2a3 	rbit	r2, r3
 8008454:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008458:	601a      	str	r2, [r3, #0]
 800845a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800845e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008462:	601a      	str	r2, [r3, #0]
 8008464:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	fa93 f2a3 	rbit	r2, r3
 800846e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008472:	601a      	str	r2, [r3, #0]
 8008474:	4b63      	ldr	r3, [pc, #396]	; (8008604 <HAL_RCC_OscConfig+0xe0c>)
 8008476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008478:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800847c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008480:	6011      	str	r1, [r2, #0]
 8008482:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008486:	6812      	ldr	r2, [r2, #0]
 8008488:	fa92 f1a2 	rbit	r1, r2
 800848c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008490:	6011      	str	r1, [r2, #0]
  return result;
 8008492:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008496:	6812      	ldr	r2, [r2, #0]
 8008498:	fab2 f282 	clz	r2, r2
 800849c:	b2d2      	uxtb	r2, r2
 800849e:	f042 0220 	orr.w	r2, r2, #32
 80084a2:	b2d2      	uxtb	r2, r2
 80084a4:	f002 021f 	and.w	r2, r2, #31
 80084a8:	2101      	movs	r1, #1
 80084aa:	fa01 f202 	lsl.w	r2, r1, r2
 80084ae:	4013      	ands	r3, r2
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d09b      	beq.n	80083ec <HAL_RCC_OscConfig+0xbf4>
 80084b4:	e0a0      	b.n	80085f8 <HAL_RCC_OscConfig+0xe00>
 80084b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80084ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80084be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	fa93 f2a3 	rbit	r2, r3
 80084ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80084ce:	601a      	str	r2, [r3, #0]
  return result;
 80084d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80084d4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084d6:	fab3 f383 	clz	r3, r3
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80084e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	461a      	mov	r2, r3
 80084e8:	2300      	movs	r3, #0
 80084ea:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084ec:	f7fc fdc6 	bl	800507c <HAL_GetTick>
 80084f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80084f4:	e009      	b.n	800850a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084f6:	f7fc fdc1 	bl	800507c <HAL_GetTick>
 80084fa:	4602      	mov	r2, r0
 80084fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008500:	1ad3      	subs	r3, r2, r3
 8008502:	2b02      	cmp	r3, #2
 8008504:	d901      	bls.n	800850a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8008506:	2303      	movs	r3, #3
 8008508:	e077      	b.n	80085fa <HAL_RCC_OscConfig+0xe02>
 800850a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800850e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008512:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008514:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	fa93 f2a3 	rbit	r2, r3
 800851e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008522:	601a      	str	r2, [r3, #0]
  return result;
 8008524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008528:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800852a:	fab3 f383 	clz	r3, r3
 800852e:	b2db      	uxtb	r3, r3
 8008530:	095b      	lsrs	r3, r3, #5
 8008532:	b2db      	uxtb	r3, r3
 8008534:	f043 0301 	orr.w	r3, r3, #1
 8008538:	b2db      	uxtb	r3, r3
 800853a:	2b01      	cmp	r3, #1
 800853c:	d102      	bne.n	8008544 <HAL_RCC_OscConfig+0xd4c>
 800853e:	4b31      	ldr	r3, [pc, #196]	; (8008604 <HAL_RCC_OscConfig+0xe0c>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	e01b      	b.n	800857c <HAL_RCC_OscConfig+0xd84>
 8008544:	f107 0320 	add.w	r3, r7, #32
 8008548:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800854c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800854e:	f107 0320 	add.w	r3, r7, #32
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	fa93 f2a3 	rbit	r2, r3
 8008558:	f107 031c 	add.w	r3, r7, #28
 800855c:	601a      	str	r2, [r3, #0]
 800855e:	f107 0318 	add.w	r3, r7, #24
 8008562:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008566:	601a      	str	r2, [r3, #0]
 8008568:	f107 0318 	add.w	r3, r7, #24
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	fa93 f2a3 	rbit	r2, r3
 8008572:	f107 0314 	add.w	r3, r7, #20
 8008576:	601a      	str	r2, [r3, #0]
 8008578:	4b22      	ldr	r3, [pc, #136]	; (8008604 <HAL_RCC_OscConfig+0xe0c>)
 800857a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857c:	f107 0210 	add.w	r2, r7, #16
 8008580:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008584:	6011      	str	r1, [r2, #0]
 8008586:	f107 0210 	add.w	r2, r7, #16
 800858a:	6812      	ldr	r2, [r2, #0]
 800858c:	fa92 f1a2 	rbit	r1, r2
 8008590:	f107 020c 	add.w	r2, r7, #12
 8008594:	6011      	str	r1, [r2, #0]
  return result;
 8008596:	f107 020c 	add.w	r2, r7, #12
 800859a:	6812      	ldr	r2, [r2, #0]
 800859c:	fab2 f282 	clz	r2, r2
 80085a0:	b2d2      	uxtb	r2, r2
 80085a2:	f042 0220 	orr.w	r2, r2, #32
 80085a6:	b2d2      	uxtb	r2, r2
 80085a8:	f002 021f 	and.w	r2, r2, #31
 80085ac:	2101      	movs	r1, #1
 80085ae:	fa01 f202 	lsl.w	r2, r1, r2
 80085b2:	4013      	ands	r3, r2
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d19e      	bne.n	80084f6 <HAL_RCC_OscConfig+0xcfe>
 80085b8:	e01e      	b.n	80085f8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80085ba:	1d3b      	adds	r3, r7, #4
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	69db      	ldr	r3, [r3, #28]
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d101      	bne.n	80085c8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e018      	b.n	80085fa <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80085c8:	4b0e      	ldr	r3, [pc, #56]	; (8008604 <HAL_RCC_OscConfig+0xe0c>)
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80085d0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80085d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80085d8:	1d3b      	adds	r3, r7, #4
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	6a1b      	ldr	r3, [r3, #32]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d108      	bne.n	80085f4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80085e2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80085e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80085ea:	1d3b      	adds	r3, r7, #4
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d001      	beq.n	80085f8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	e000      	b.n	80085fa <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80085f8:	2300      	movs	r3, #0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	40021000 	.word	0x40021000

08008608 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b09e      	sub	sp, #120	; 0x78
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8008612:	2300      	movs	r3, #0
 8008614:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d101      	bne.n	8008620 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800861c:	2301      	movs	r3, #1
 800861e:	e162      	b.n	80088e6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008620:	4b90      	ldr	r3, [pc, #576]	; (8008864 <HAL_RCC_ClockConfig+0x25c>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 0307 	and.w	r3, r3, #7
 8008628:	683a      	ldr	r2, [r7, #0]
 800862a:	429a      	cmp	r2, r3
 800862c:	d910      	bls.n	8008650 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800862e:	4b8d      	ldr	r3, [pc, #564]	; (8008864 <HAL_RCC_ClockConfig+0x25c>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f023 0207 	bic.w	r2, r3, #7
 8008636:	498b      	ldr	r1, [pc, #556]	; (8008864 <HAL_RCC_ClockConfig+0x25c>)
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	4313      	orrs	r3, r2
 800863c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800863e:	4b89      	ldr	r3, [pc, #548]	; (8008864 <HAL_RCC_ClockConfig+0x25c>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f003 0307 	and.w	r3, r3, #7
 8008646:	683a      	ldr	r2, [r7, #0]
 8008648:	429a      	cmp	r2, r3
 800864a:	d001      	beq.n	8008650 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	e14a      	b.n	80088e6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 0302 	and.w	r3, r3, #2
 8008658:	2b00      	cmp	r3, #0
 800865a:	d008      	beq.n	800866e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800865c:	4b82      	ldr	r3, [pc, #520]	; (8008868 <HAL_RCC_ClockConfig+0x260>)
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	497f      	ldr	r1, [pc, #508]	; (8008868 <HAL_RCC_ClockConfig+0x260>)
 800866a:	4313      	orrs	r3, r2
 800866c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 0301 	and.w	r3, r3, #1
 8008676:	2b00      	cmp	r3, #0
 8008678:	f000 80dc 	beq.w	8008834 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d13c      	bne.n	80086fe <HAL_RCC_ClockConfig+0xf6>
 8008684:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008688:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800868a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800868c:	fa93 f3a3 	rbit	r3, r3
 8008690:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008694:	fab3 f383 	clz	r3, r3
 8008698:	b2db      	uxtb	r3, r3
 800869a:	095b      	lsrs	r3, r3, #5
 800869c:	b2db      	uxtb	r3, r3
 800869e:	f043 0301 	orr.w	r3, r3, #1
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d102      	bne.n	80086ae <HAL_RCC_ClockConfig+0xa6>
 80086a8:	4b6f      	ldr	r3, [pc, #444]	; (8008868 <HAL_RCC_ClockConfig+0x260>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	e00f      	b.n	80086ce <HAL_RCC_ClockConfig+0xc6>
 80086ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80086b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80086b6:	fa93 f3a3 	rbit	r3, r3
 80086ba:	667b      	str	r3, [r7, #100]	; 0x64
 80086bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80086c0:	663b      	str	r3, [r7, #96]	; 0x60
 80086c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086c4:	fa93 f3a3 	rbit	r3, r3
 80086c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086ca:	4b67      	ldr	r3, [pc, #412]	; (8008868 <HAL_RCC_ClockConfig+0x260>)
 80086cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80086d2:	65ba      	str	r2, [r7, #88]	; 0x58
 80086d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80086d6:	fa92 f2a2 	rbit	r2, r2
 80086da:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80086dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80086de:	fab2 f282 	clz	r2, r2
 80086e2:	b2d2      	uxtb	r2, r2
 80086e4:	f042 0220 	orr.w	r2, r2, #32
 80086e8:	b2d2      	uxtb	r2, r2
 80086ea:	f002 021f 	and.w	r2, r2, #31
 80086ee:	2101      	movs	r1, #1
 80086f0:	fa01 f202 	lsl.w	r2, r1, r2
 80086f4:	4013      	ands	r3, r2
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d17b      	bne.n	80087f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e0f3      	b.n	80088e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	2b02      	cmp	r3, #2
 8008704:	d13c      	bne.n	8008780 <HAL_RCC_ClockConfig+0x178>
 8008706:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800870a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800870c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800870e:	fa93 f3a3 	rbit	r3, r3
 8008712:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008716:	fab3 f383 	clz	r3, r3
 800871a:	b2db      	uxtb	r3, r3
 800871c:	095b      	lsrs	r3, r3, #5
 800871e:	b2db      	uxtb	r3, r3
 8008720:	f043 0301 	orr.w	r3, r3, #1
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b01      	cmp	r3, #1
 8008728:	d102      	bne.n	8008730 <HAL_RCC_ClockConfig+0x128>
 800872a:	4b4f      	ldr	r3, [pc, #316]	; (8008868 <HAL_RCC_ClockConfig+0x260>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	e00f      	b.n	8008750 <HAL_RCC_ClockConfig+0x148>
 8008730:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008734:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008738:	fa93 f3a3 	rbit	r3, r3
 800873c:	647b      	str	r3, [r7, #68]	; 0x44
 800873e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008742:	643b      	str	r3, [r7, #64]	; 0x40
 8008744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008746:	fa93 f3a3 	rbit	r3, r3
 800874a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800874c:	4b46      	ldr	r3, [pc, #280]	; (8008868 <HAL_RCC_ClockConfig+0x260>)
 800874e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008750:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008754:	63ba      	str	r2, [r7, #56]	; 0x38
 8008756:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008758:	fa92 f2a2 	rbit	r2, r2
 800875c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800875e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008760:	fab2 f282 	clz	r2, r2
 8008764:	b2d2      	uxtb	r2, r2
 8008766:	f042 0220 	orr.w	r2, r2, #32
 800876a:	b2d2      	uxtb	r2, r2
 800876c:	f002 021f 	and.w	r2, r2, #31
 8008770:	2101      	movs	r1, #1
 8008772:	fa01 f202 	lsl.w	r2, r1, r2
 8008776:	4013      	ands	r3, r2
 8008778:	2b00      	cmp	r3, #0
 800877a:	d13a      	bne.n	80087f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	e0b2      	b.n	80088e6 <HAL_RCC_ClockConfig+0x2de>
 8008780:	2302      	movs	r3, #2
 8008782:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008786:	fa93 f3a3 	rbit	r3, r3
 800878a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800878c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800878e:	fab3 f383 	clz	r3, r3
 8008792:	b2db      	uxtb	r3, r3
 8008794:	095b      	lsrs	r3, r3, #5
 8008796:	b2db      	uxtb	r3, r3
 8008798:	f043 0301 	orr.w	r3, r3, #1
 800879c:	b2db      	uxtb	r3, r3
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d102      	bne.n	80087a8 <HAL_RCC_ClockConfig+0x1a0>
 80087a2:	4b31      	ldr	r3, [pc, #196]	; (8008868 <HAL_RCC_ClockConfig+0x260>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	e00d      	b.n	80087c4 <HAL_RCC_ClockConfig+0x1bc>
 80087a8:	2302      	movs	r3, #2
 80087aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ae:	fa93 f3a3 	rbit	r3, r3
 80087b2:	627b      	str	r3, [r7, #36]	; 0x24
 80087b4:	2302      	movs	r3, #2
 80087b6:	623b      	str	r3, [r7, #32]
 80087b8:	6a3b      	ldr	r3, [r7, #32]
 80087ba:	fa93 f3a3 	rbit	r3, r3
 80087be:	61fb      	str	r3, [r7, #28]
 80087c0:	4b29      	ldr	r3, [pc, #164]	; (8008868 <HAL_RCC_ClockConfig+0x260>)
 80087c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c4:	2202      	movs	r2, #2
 80087c6:	61ba      	str	r2, [r7, #24]
 80087c8:	69ba      	ldr	r2, [r7, #24]
 80087ca:	fa92 f2a2 	rbit	r2, r2
 80087ce:	617a      	str	r2, [r7, #20]
  return result;
 80087d0:	697a      	ldr	r2, [r7, #20]
 80087d2:	fab2 f282 	clz	r2, r2
 80087d6:	b2d2      	uxtb	r2, r2
 80087d8:	f042 0220 	orr.w	r2, r2, #32
 80087dc:	b2d2      	uxtb	r2, r2
 80087de:	f002 021f 	and.w	r2, r2, #31
 80087e2:	2101      	movs	r1, #1
 80087e4:	fa01 f202 	lsl.w	r2, r1, r2
 80087e8:	4013      	ands	r3, r2
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d101      	bne.n	80087f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	e079      	b.n	80088e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80087f2:	4b1d      	ldr	r3, [pc, #116]	; (8008868 <HAL_RCC_ClockConfig+0x260>)
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	f023 0203 	bic.w	r2, r3, #3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	491a      	ldr	r1, [pc, #104]	; (8008868 <HAL_RCC_ClockConfig+0x260>)
 8008800:	4313      	orrs	r3, r2
 8008802:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008804:	f7fc fc3a 	bl	800507c <HAL_GetTick>
 8008808:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800880a:	e00a      	b.n	8008822 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800880c:	f7fc fc36 	bl	800507c <HAL_GetTick>
 8008810:	4602      	mov	r2, r0
 8008812:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008814:	1ad3      	subs	r3, r2, r3
 8008816:	f241 3288 	movw	r2, #5000	; 0x1388
 800881a:	4293      	cmp	r3, r2
 800881c:	d901      	bls.n	8008822 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800881e:	2303      	movs	r3, #3
 8008820:	e061      	b.n	80088e6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008822:	4b11      	ldr	r3, [pc, #68]	; (8008868 <HAL_RCC_ClockConfig+0x260>)
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	f003 020c 	and.w	r2, r3, #12
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	429a      	cmp	r2, r3
 8008832:	d1eb      	bne.n	800880c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008834:	4b0b      	ldr	r3, [pc, #44]	; (8008864 <HAL_RCC_ClockConfig+0x25c>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f003 0307 	and.w	r3, r3, #7
 800883c:	683a      	ldr	r2, [r7, #0]
 800883e:	429a      	cmp	r2, r3
 8008840:	d214      	bcs.n	800886c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008842:	4b08      	ldr	r3, [pc, #32]	; (8008864 <HAL_RCC_ClockConfig+0x25c>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f023 0207 	bic.w	r2, r3, #7
 800884a:	4906      	ldr	r1, [pc, #24]	; (8008864 <HAL_RCC_ClockConfig+0x25c>)
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	4313      	orrs	r3, r2
 8008850:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008852:	4b04      	ldr	r3, [pc, #16]	; (8008864 <HAL_RCC_ClockConfig+0x25c>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f003 0307 	and.w	r3, r3, #7
 800885a:	683a      	ldr	r2, [r7, #0]
 800885c:	429a      	cmp	r2, r3
 800885e:	d005      	beq.n	800886c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	e040      	b.n	80088e6 <HAL_RCC_ClockConfig+0x2de>
 8008864:	40022000 	.word	0x40022000
 8008868:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f003 0304 	and.w	r3, r3, #4
 8008874:	2b00      	cmp	r3, #0
 8008876:	d008      	beq.n	800888a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008878:	4b1d      	ldr	r3, [pc, #116]	; (80088f0 <HAL_RCC_ClockConfig+0x2e8>)
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	491a      	ldr	r1, [pc, #104]	; (80088f0 <HAL_RCC_ClockConfig+0x2e8>)
 8008886:	4313      	orrs	r3, r2
 8008888:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 0308 	and.w	r3, r3, #8
 8008892:	2b00      	cmp	r3, #0
 8008894:	d009      	beq.n	80088aa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008896:	4b16      	ldr	r3, [pc, #88]	; (80088f0 <HAL_RCC_ClockConfig+0x2e8>)
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	00db      	lsls	r3, r3, #3
 80088a4:	4912      	ldr	r1, [pc, #72]	; (80088f0 <HAL_RCC_ClockConfig+0x2e8>)
 80088a6:	4313      	orrs	r3, r2
 80088a8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80088aa:	f000 f829 	bl	8008900 <HAL_RCC_GetSysClockFreq>
 80088ae:	4601      	mov	r1, r0
 80088b0:	4b0f      	ldr	r3, [pc, #60]	; (80088f0 <HAL_RCC_ClockConfig+0x2e8>)
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80088b8:	22f0      	movs	r2, #240	; 0xf0
 80088ba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088bc:	693a      	ldr	r2, [r7, #16]
 80088be:	fa92 f2a2 	rbit	r2, r2
 80088c2:	60fa      	str	r2, [r7, #12]
  return result;
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	fab2 f282 	clz	r2, r2
 80088ca:	b2d2      	uxtb	r2, r2
 80088cc:	40d3      	lsrs	r3, r2
 80088ce:	4a09      	ldr	r2, [pc, #36]	; (80088f4 <HAL_RCC_ClockConfig+0x2ec>)
 80088d0:	5cd3      	ldrb	r3, [r2, r3]
 80088d2:	fa21 f303 	lsr.w	r3, r1, r3
 80088d6:	4a08      	ldr	r2, [pc, #32]	; (80088f8 <HAL_RCC_ClockConfig+0x2f0>)
 80088d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80088da:	4b08      	ldr	r3, [pc, #32]	; (80088fc <HAL_RCC_ClockConfig+0x2f4>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4618      	mov	r0, r3
 80088e0:	f7fc fb88 	bl	8004ff4 <HAL_InitTick>
  
  return HAL_OK;
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3778      	adds	r7, #120	; 0x78
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	40021000 	.word	0x40021000
 80088f4:	0800c598 	.word	0x0800c598
 80088f8:	2000008c 	.word	0x2000008c
 80088fc:	20000090 	.word	0x20000090

08008900 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008900:	b480      	push	{r7}
 8008902:	b08b      	sub	sp, #44	; 0x2c
 8008904:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008906:	2300      	movs	r3, #0
 8008908:	61fb      	str	r3, [r7, #28]
 800890a:	2300      	movs	r3, #0
 800890c:	61bb      	str	r3, [r7, #24]
 800890e:	2300      	movs	r3, #0
 8008910:	627b      	str	r3, [r7, #36]	; 0x24
 8008912:	2300      	movs	r3, #0
 8008914:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008916:	2300      	movs	r3, #0
 8008918:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800891a:	4b29      	ldr	r3, [pc, #164]	; (80089c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	f003 030c 	and.w	r3, r3, #12
 8008926:	2b04      	cmp	r3, #4
 8008928:	d002      	beq.n	8008930 <HAL_RCC_GetSysClockFreq+0x30>
 800892a:	2b08      	cmp	r3, #8
 800892c:	d003      	beq.n	8008936 <HAL_RCC_GetSysClockFreq+0x36>
 800892e:	e03c      	b.n	80089aa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008930:	4b24      	ldr	r3, [pc, #144]	; (80089c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008932:	623b      	str	r3, [r7, #32]
      break;
 8008934:	e03c      	b.n	80089b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8008936:	69fb      	ldr	r3, [r7, #28]
 8008938:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800893c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8008940:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008942:	68ba      	ldr	r2, [r7, #8]
 8008944:	fa92 f2a2 	rbit	r2, r2
 8008948:	607a      	str	r2, [r7, #4]
  return result;
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	fab2 f282 	clz	r2, r2
 8008950:	b2d2      	uxtb	r2, r2
 8008952:	40d3      	lsrs	r3, r2
 8008954:	4a1c      	ldr	r2, [pc, #112]	; (80089c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008956:	5cd3      	ldrb	r3, [r2, r3]
 8008958:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800895a:	4b19      	ldr	r3, [pc, #100]	; (80089c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800895c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895e:	f003 030f 	and.w	r3, r3, #15
 8008962:	220f      	movs	r2, #15
 8008964:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008966:	693a      	ldr	r2, [r7, #16]
 8008968:	fa92 f2a2 	rbit	r2, r2
 800896c:	60fa      	str	r2, [r7, #12]
  return result;
 800896e:	68fa      	ldr	r2, [r7, #12]
 8008970:	fab2 f282 	clz	r2, r2
 8008974:	b2d2      	uxtb	r2, r2
 8008976:	40d3      	lsrs	r3, r2
 8008978:	4a14      	ldr	r2, [pc, #80]	; (80089cc <HAL_RCC_GetSysClockFreq+0xcc>)
 800897a:	5cd3      	ldrb	r3, [r2, r3]
 800897c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008984:	2b00      	cmp	r3, #0
 8008986:	d008      	beq.n	800899a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008988:	4a0e      	ldr	r2, [pc, #56]	; (80089c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	fb02 f303 	mul.w	r3, r2, r3
 8008996:	627b      	str	r3, [r7, #36]	; 0x24
 8008998:	e004      	b.n	80089a4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	4a0c      	ldr	r2, [pc, #48]	; (80089d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800899e:	fb02 f303 	mul.w	r3, r2, r3
 80089a2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80089a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a6:	623b      	str	r3, [r7, #32]
      break;
 80089a8:	e002      	b.n	80089b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80089aa:	4b06      	ldr	r3, [pc, #24]	; (80089c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80089ac:	623b      	str	r3, [r7, #32]
      break;
 80089ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80089b0:	6a3b      	ldr	r3, [r7, #32]
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	372c      	adds	r7, #44	; 0x2c
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop
 80089c0:	40021000 	.word	0x40021000
 80089c4:	007a1200 	.word	0x007a1200
 80089c8:	0800c5b0 	.word	0x0800c5b0
 80089cc:	0800c5c0 	.word	0x0800c5c0
 80089d0:	003d0900 	.word	0x003d0900

080089d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80089d4:	b480      	push	{r7}
 80089d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80089d8:	4b03      	ldr	r3, [pc, #12]	; (80089e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80089da:	681b      	ldr	r3, [r3, #0]
}
 80089dc:	4618      	mov	r0, r3
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop
 80089e8:	2000008c 	.word	0x2000008c

080089ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80089f2:	f7ff ffef 	bl	80089d4 <HAL_RCC_GetHCLKFreq>
 80089f6:	4601      	mov	r1, r0
 80089f8:	4b0b      	ldr	r3, [pc, #44]	; (8008a28 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a00:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008a04:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	fa92 f2a2 	rbit	r2, r2
 8008a0c:	603a      	str	r2, [r7, #0]
  return result;
 8008a0e:	683a      	ldr	r2, [r7, #0]
 8008a10:	fab2 f282 	clz	r2, r2
 8008a14:	b2d2      	uxtb	r2, r2
 8008a16:	40d3      	lsrs	r3, r2
 8008a18:	4a04      	ldr	r2, [pc, #16]	; (8008a2c <HAL_RCC_GetPCLK1Freq+0x40>)
 8008a1a:	5cd3      	ldrb	r3, [r2, r3]
 8008a1c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8008a20:	4618      	mov	r0, r3
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	40021000 	.word	0x40021000
 8008a2c:	0800c5a8 	.word	0x0800c5a8

08008a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8008a36:	f7ff ffcd 	bl	80089d4 <HAL_RCC_GetHCLKFreq>
 8008a3a:	4601      	mov	r1, r0
 8008a3c:	4b0b      	ldr	r3, [pc, #44]	; (8008a6c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8008a44:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008a48:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	fa92 f2a2 	rbit	r2, r2
 8008a50:	603a      	str	r2, [r7, #0]
  return result;
 8008a52:	683a      	ldr	r2, [r7, #0]
 8008a54:	fab2 f282 	clz	r2, r2
 8008a58:	b2d2      	uxtb	r2, r2
 8008a5a:	40d3      	lsrs	r3, r2
 8008a5c:	4a04      	ldr	r2, [pc, #16]	; (8008a70 <HAL_RCC_GetPCLK2Freq+0x40>)
 8008a5e:	5cd3      	ldrb	r3, [r2, r3]
 8008a60:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8008a64:	4618      	mov	r0, r3
 8008a66:	3708      	adds	r7, #8
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	40021000 	.word	0x40021000
 8008a70:	0800c5a8 	.word	0x0800c5a8

08008a74 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b092      	sub	sp, #72	; 0x48
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8008a80:	2300      	movs	r3, #0
 8008a82:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8008a84:	2300      	movs	r3, #0
 8008a86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	f000 80d4 	beq.w	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a98:	4b4e      	ldr	r3, [pc, #312]	; (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a9a:	69db      	ldr	r3, [r3, #28]
 8008a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d10e      	bne.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008aa4:	4b4b      	ldr	r3, [pc, #300]	; (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008aa6:	69db      	ldr	r3, [r3, #28]
 8008aa8:	4a4a      	ldr	r2, [pc, #296]	; (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008aae:	61d3      	str	r3, [r2, #28]
 8008ab0:	4b48      	ldr	r3, [pc, #288]	; (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ab2:	69db      	ldr	r3, [r3, #28]
 8008ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ab8:	60bb      	str	r3, [r7, #8]
 8008aba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008abc:	2301      	movs	r3, #1
 8008abe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ac2:	4b45      	ldr	r3, [pc, #276]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d118      	bne.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008ace:	4b42      	ldr	r3, [pc, #264]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a41      	ldr	r2, [pc, #260]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ad8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008ada:	f7fc facf 	bl	800507c <HAL_GetTick>
 8008ade:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ae0:	e008      	b.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ae2:	f7fc facb 	bl	800507c <HAL_GetTick>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008aea:	1ad3      	subs	r3, r2, r3
 8008aec:	2b64      	cmp	r3, #100	; 0x64
 8008aee:	d901      	bls.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008af0:	2303      	movs	r3, #3
 8008af2:	e169      	b.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008af4:	4b38      	ldr	r3, [pc, #224]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d0f0      	beq.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008b00:	4b34      	ldr	r3, [pc, #208]	; (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008b02:	6a1b      	ldr	r3, [r3, #32]
 8008b04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b08:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	f000 8084 	beq.w	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d07c      	beq.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008b20:	4b2c      	ldr	r3, [pc, #176]	; (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008b22:	6a1b      	ldr	r3, [r3, #32]
 8008b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008b2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b32:	fa93 f3a3 	rbit	r3, r3
 8008b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008b3a:	fab3 f383 	clz	r3, r3
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	461a      	mov	r2, r3
 8008b42:	4b26      	ldr	r3, [pc, #152]	; (8008bdc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008b44:	4413      	add	r3, r2
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	461a      	mov	r2, r3
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	6013      	str	r3, [r2, #0]
 8008b4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008b52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b56:	fa93 f3a3 	rbit	r3, r3
 8008b5a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008b5e:	fab3 f383 	clz	r3, r3
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	461a      	mov	r2, r3
 8008b66:	4b1d      	ldr	r3, [pc, #116]	; (8008bdc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008b68:	4413      	add	r3, r2
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	2300      	movs	r3, #0
 8008b70:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008b72:	4a18      	ldr	r2, [pc, #96]	; (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b76:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b7a:	f003 0301 	and.w	r3, r3, #1
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d04b      	beq.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b82:	f7fc fa7b 	bl	800507c <HAL_GetTick>
 8008b86:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b88:	e00a      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b8a:	f7fc fa77 	bl	800507c <HAL_GetTick>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b92:	1ad3      	subs	r3, r2, r3
 8008b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d901      	bls.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	e113      	b.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8008ba0:	2302      	movs	r3, #2
 8008ba2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba6:	fa93 f3a3 	rbit	r3, r3
 8008baa:	627b      	str	r3, [r7, #36]	; 0x24
 8008bac:	2302      	movs	r3, #2
 8008bae:	623b      	str	r3, [r7, #32]
 8008bb0:	6a3b      	ldr	r3, [r7, #32]
 8008bb2:	fa93 f3a3 	rbit	r3, r3
 8008bb6:	61fb      	str	r3, [r7, #28]
  return result;
 8008bb8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008bba:	fab3 f383 	clz	r3, r3
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	095b      	lsrs	r3, r3, #5
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	f043 0302 	orr.w	r3, r3, #2
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d108      	bne.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8008bce:	4b01      	ldr	r3, [pc, #4]	; (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008bd0:	6a1b      	ldr	r3, [r3, #32]
 8008bd2:	e00d      	b.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8008bd4:	40021000 	.word	0x40021000
 8008bd8:	40007000 	.word	0x40007000
 8008bdc:	10908100 	.word	0x10908100
 8008be0:	2302      	movs	r3, #2
 8008be2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	fa93 f3a3 	rbit	r3, r3
 8008bea:	617b      	str	r3, [r7, #20]
 8008bec:	4b78      	ldr	r3, [pc, #480]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf0:	2202      	movs	r2, #2
 8008bf2:	613a      	str	r2, [r7, #16]
 8008bf4:	693a      	ldr	r2, [r7, #16]
 8008bf6:	fa92 f2a2 	rbit	r2, r2
 8008bfa:	60fa      	str	r2, [r7, #12]
  return result;
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	fab2 f282 	clz	r2, r2
 8008c02:	b2d2      	uxtb	r2, r2
 8008c04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c08:	b2d2      	uxtb	r2, r2
 8008c0a:	f002 021f 	and.w	r2, r2, #31
 8008c0e:	2101      	movs	r1, #1
 8008c10:	fa01 f202 	lsl.w	r2, r1, r2
 8008c14:	4013      	ands	r3, r2
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d0b7      	beq.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8008c1a:	4b6d      	ldr	r3, [pc, #436]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c1c:	6a1b      	ldr	r3, [r3, #32]
 8008c1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	496a      	ldr	r1, [pc, #424]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008c2c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d105      	bne.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c34:	4b66      	ldr	r3, [pc, #408]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c36:	69db      	ldr	r3, [r3, #28]
 8008c38:	4a65      	ldr	r2, [pc, #404]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c3e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 0301 	and.w	r3, r3, #1
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d008      	beq.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008c4c:	4b60      	ldr	r3, [pc, #384]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c50:	f023 0203 	bic.w	r2, r3, #3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	495d      	ldr	r1, [pc, #372]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 0302 	and.w	r3, r3, #2
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d008      	beq.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008c6a:	4b59      	ldr	r3, [pc, #356]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	4956      	ldr	r1, [pc, #344]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f003 0304 	and.w	r3, r3, #4
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d008      	beq.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008c88:	4b51      	ldr	r3, [pc, #324]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	691b      	ldr	r3, [r3, #16]
 8008c94:	494e      	ldr	r1, [pc, #312]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c96:	4313      	orrs	r3, r2
 8008c98:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 0320 	and.w	r3, r3, #32
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d008      	beq.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008ca6:	4b4a      	ldr	r3, [pc, #296]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008caa:	f023 0210 	bic.w	r2, r3, #16
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	69db      	ldr	r3, [r3, #28]
 8008cb2:	4947      	ldr	r1, [pc, #284]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d008      	beq.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8008cc4:	4b42      	ldr	r3, [pc, #264]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd0:	493f      	ldr	r1, [pc, #252]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d008      	beq.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008ce2:	4b3b      	ldr	r3, [pc, #236]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce6:	f023 0220 	bic.w	r2, r3, #32
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6a1b      	ldr	r3, [r3, #32]
 8008cee:	4938      	ldr	r1, [pc, #224]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f003 0308 	and.w	r3, r3, #8
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d008      	beq.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008d00:	4b33      	ldr	r3, [pc, #204]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	695b      	ldr	r3, [r3, #20]
 8008d0c:	4930      	ldr	r1, [pc, #192]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f003 0310 	and.w	r3, r3, #16
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d008      	beq.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008d1e:	4b2c      	ldr	r3, [pc, #176]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	699b      	ldr	r3, [r3, #24]
 8008d2a:	4929      	ldr	r1, [pc, #164]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d008      	beq.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008d3c:	4b24      	ldr	r3, [pc, #144]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d48:	4921      	ldr	r1, [pc, #132]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d008      	beq.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008d5a:	4b1d      	ldr	r3, [pc, #116]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d5e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d66:	491a      	ldr	r1, [pc, #104]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d008      	beq.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8008d78:	4b15      	ldr	r3, [pc, #84]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d84:	4912      	ldr	r1, [pc, #72]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d86:	4313      	orrs	r3, r2
 8008d88:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d008      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008d96:	4b0e      	ldr	r3, [pc, #56]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da2:	490b      	ldr	r1, [pc, #44]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008da4:	4313      	orrs	r3, r2
 8008da6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d008      	beq.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8008db4:	4b06      	ldr	r3, [pc, #24]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc0:	4903      	ldr	r1, [pc, #12]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3748      	adds	r7, #72	; 0x48
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	40021000 	.word	0x40021000

08008dd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d101      	bne.n	8008de6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	e09d      	b.n	8008f22 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d108      	bne.n	8008e00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008df6:	d009      	beq.n	8008e0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	61da      	str	r2, [r3, #28]
 8008dfe:	e005      	b.n	8008e0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d106      	bne.n	8008e2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f7fb fd28 	bl	800487c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2202      	movs	r2, #2
 8008e30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e4c:	d902      	bls.n	8008e54 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	60fb      	str	r3, [r7, #12]
 8008e52:	e002      	b.n	8008e5a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e58:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008e62:	d007      	beq.n	8008e74 <HAL_SPI_Init+0xa0>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e6c:	d002      	beq.n	8008e74 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008e84:	431a      	orrs	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	691b      	ldr	r3, [r3, #16]
 8008e8a:	f003 0302 	and.w	r3, r3, #2
 8008e8e:	431a      	orrs	r2, r3
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	695b      	ldr	r3, [r3, #20]
 8008e94:	f003 0301 	and.w	r3, r3, #1
 8008e98:	431a      	orrs	r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	699b      	ldr	r3, [r3, #24]
 8008e9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ea2:	431a      	orrs	r2, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	69db      	ldr	r3, [r3, #28]
 8008ea8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008eac:	431a      	orrs	r2, r3
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a1b      	ldr	r3, [r3, #32]
 8008eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eb6:	ea42 0103 	orr.w	r1, r2, r3
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ebe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	430a      	orrs	r2, r1
 8008ec8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	699b      	ldr	r3, [r3, #24]
 8008ece:	0c1b      	lsrs	r3, r3, #16
 8008ed0:	f003 0204 	and.w	r2, r3, #4
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed8:	f003 0310 	and.w	r3, r3, #16
 8008edc:	431a      	orrs	r2, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ee2:	f003 0308 	and.w	r3, r3, #8
 8008ee6:	431a      	orrs	r2, r3
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008ef0:	ea42 0103 	orr.w	r1, r2, r3
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	430a      	orrs	r2, r1
 8008f00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	69da      	ldr	r2, [r3, #28]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008f10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b088      	sub	sp, #32
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	60f8      	str	r0, [r7, #12]
 8008f32:	60b9      	str	r1, [r7, #8]
 8008f34:	603b      	str	r3, [r7, #0]
 8008f36:	4613      	mov	r3, r2
 8008f38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d101      	bne.n	8008f4c <HAL_SPI_Transmit+0x22>
 8008f48:	2302      	movs	r3, #2
 8008f4a:	e158      	b.n	80091fe <HAL_SPI_Transmit+0x2d4>
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f54:	f7fc f892 	bl	800507c <HAL_GetTick>
 8008f58:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008f5a:	88fb      	ldrh	r3, [r7, #6]
 8008f5c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d002      	beq.n	8008f70 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008f6a:	2302      	movs	r3, #2
 8008f6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008f6e:	e13d      	b.n	80091ec <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d002      	beq.n	8008f7c <HAL_SPI_Transmit+0x52>
 8008f76:	88fb      	ldrh	r3, [r7, #6]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d102      	bne.n	8008f82 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008f80:	e134      	b.n	80091ec <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2203      	movs	r2, #3
 8008f86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	68ba      	ldr	r2, [r7, #8]
 8008f94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	88fa      	ldrh	r2, [r7, #6]
 8008f9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	88fa      	ldrh	r2, [r7, #6]
 8008fa0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2200      	movs	r2, #0
 8008fac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fcc:	d10f      	bne.n	8008fee <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fdc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008fec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ff8:	2b40      	cmp	r3, #64	; 0x40
 8008ffa:	d007      	beq.n	800900c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800900a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	68db      	ldr	r3, [r3, #12]
 8009010:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009014:	d94b      	bls.n	80090ae <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d002      	beq.n	8009024 <HAL_SPI_Transmit+0xfa>
 800901e:	8afb      	ldrh	r3, [r7, #22]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d13e      	bne.n	80090a2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009028:	881a      	ldrh	r2, [r3, #0]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009034:	1c9a      	adds	r2, r3, #2
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800903e:	b29b      	uxth	r3, r3
 8009040:	3b01      	subs	r3, #1
 8009042:	b29a      	uxth	r2, r3
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009048:	e02b      	b.n	80090a2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	f003 0302 	and.w	r3, r3, #2
 8009054:	2b02      	cmp	r3, #2
 8009056:	d112      	bne.n	800907e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800905c:	881a      	ldrh	r2, [r3, #0]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009068:	1c9a      	adds	r2, r3, #2
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009072:	b29b      	uxth	r3, r3
 8009074:	3b01      	subs	r3, #1
 8009076:	b29a      	uxth	r2, r3
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800907c:	e011      	b.n	80090a2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800907e:	f7fb fffd 	bl	800507c <HAL_GetTick>
 8009082:	4602      	mov	r2, r0
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	1ad3      	subs	r3, r2, r3
 8009088:	683a      	ldr	r2, [r7, #0]
 800908a:	429a      	cmp	r2, r3
 800908c:	d803      	bhi.n	8009096 <HAL_SPI_Transmit+0x16c>
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009094:	d102      	bne.n	800909c <HAL_SPI_Transmit+0x172>
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d102      	bne.n	80090a2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800909c:	2303      	movs	r3, #3
 800909e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80090a0:	e0a4      	b.n	80091ec <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d1ce      	bne.n	800904a <HAL_SPI_Transmit+0x120>
 80090ac:	e07c      	b.n	80091a8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d002      	beq.n	80090bc <HAL_SPI_Transmit+0x192>
 80090b6:	8afb      	ldrh	r3, [r7, #22]
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d170      	bne.n	800919e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d912      	bls.n	80090ec <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ca:	881a      	ldrh	r2, [r3, #0]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d6:	1c9a      	adds	r2, r3, #2
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	3b02      	subs	r3, #2
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80090ea:	e058      	b.n	800919e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	330c      	adds	r3, #12
 80090f6:	7812      	ldrb	r2, [r2, #0]
 80090f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090fe:	1c5a      	adds	r2, r3, #1
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009108:	b29b      	uxth	r3, r3
 800910a:	3b01      	subs	r3, #1
 800910c:	b29a      	uxth	r2, r3
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009112:	e044      	b.n	800919e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	f003 0302 	and.w	r3, r3, #2
 800911e:	2b02      	cmp	r3, #2
 8009120:	d12b      	bne.n	800917a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009126:	b29b      	uxth	r3, r3
 8009128:	2b01      	cmp	r3, #1
 800912a:	d912      	bls.n	8009152 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009130:	881a      	ldrh	r2, [r3, #0]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800913c:	1c9a      	adds	r2, r3, #2
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009146:	b29b      	uxth	r3, r3
 8009148:	3b02      	subs	r3, #2
 800914a:	b29a      	uxth	r2, r3
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009150:	e025      	b.n	800919e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	330c      	adds	r3, #12
 800915c:	7812      	ldrb	r2, [r2, #0]
 800915e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009164:	1c5a      	adds	r2, r3, #1
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800916e:	b29b      	uxth	r3, r3
 8009170:	3b01      	subs	r3, #1
 8009172:	b29a      	uxth	r2, r3
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009178:	e011      	b.n	800919e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800917a:	f7fb ff7f 	bl	800507c <HAL_GetTick>
 800917e:	4602      	mov	r2, r0
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	1ad3      	subs	r3, r2, r3
 8009184:	683a      	ldr	r2, [r7, #0]
 8009186:	429a      	cmp	r2, r3
 8009188:	d803      	bhi.n	8009192 <HAL_SPI_Transmit+0x268>
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009190:	d102      	bne.n	8009198 <HAL_SPI_Transmit+0x26e>
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d102      	bne.n	800919e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8009198:	2303      	movs	r3, #3
 800919a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800919c:	e026      	b.n	80091ec <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d1b5      	bne.n	8009114 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80091a8:	69ba      	ldr	r2, [r7, #24]
 80091aa:	6839      	ldr	r1, [r7, #0]
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	f000 fb5b 	bl	8009868 <SPI_EndRxTxTransaction>
 80091b2:	4603      	mov	r3, r0
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d002      	beq.n	80091be <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2220      	movs	r2, #32
 80091bc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d10a      	bne.n	80091dc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80091c6:	2300      	movs	r3, #0
 80091c8:	613b      	str	r3, [r7, #16]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	613b      	str	r3, [r7, #16]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	613b      	str	r3, [r7, #16]
 80091da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d002      	beq.n	80091ea <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80091e4:	2301      	movs	r3, #1
 80091e6:	77fb      	strb	r3, [r7, #31]
 80091e8:	e000      	b.n	80091ec <HAL_SPI_Transmit+0x2c2>
  }

error:
 80091ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2200      	movs	r2, #0
 80091f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80091fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3720      	adds	r7, #32
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b08a      	sub	sp, #40	; 0x28
 800920a:	af00      	add	r7, sp, #0
 800920c:	60f8      	str	r0, [r7, #12]
 800920e:	60b9      	str	r1, [r7, #8]
 8009210:	607a      	str	r2, [r7, #4]
 8009212:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009214:	2301      	movs	r3, #1
 8009216:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009218:	2300      	movs	r3, #0
 800921a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009224:	2b01      	cmp	r3, #1
 8009226:	d101      	bne.n	800922c <HAL_SPI_TransmitReceive+0x26>
 8009228:	2302      	movs	r3, #2
 800922a:	e1fb      	b.n	8009624 <HAL_SPI_TransmitReceive+0x41e>
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2201      	movs	r2, #1
 8009230:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009234:	f7fb ff22 	bl	800507c <HAL_GetTick>
 8009238:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009240:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009248:	887b      	ldrh	r3, [r7, #2]
 800924a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800924c:	887b      	ldrh	r3, [r7, #2]
 800924e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009250:	7efb      	ldrb	r3, [r7, #27]
 8009252:	2b01      	cmp	r3, #1
 8009254:	d00e      	beq.n	8009274 <HAL_SPI_TransmitReceive+0x6e>
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800925c:	d106      	bne.n	800926c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d102      	bne.n	800926c <HAL_SPI_TransmitReceive+0x66>
 8009266:	7efb      	ldrb	r3, [r7, #27]
 8009268:	2b04      	cmp	r3, #4
 800926a:	d003      	beq.n	8009274 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800926c:	2302      	movs	r3, #2
 800926e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009272:	e1cd      	b.n	8009610 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d005      	beq.n	8009286 <HAL_SPI_TransmitReceive+0x80>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d002      	beq.n	8009286 <HAL_SPI_TransmitReceive+0x80>
 8009280:	887b      	ldrh	r3, [r7, #2]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d103      	bne.n	800928e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8009286:	2301      	movs	r3, #1
 8009288:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800928c:	e1c0      	b.n	8009610 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009294:	b2db      	uxtb	r3, r3
 8009296:	2b04      	cmp	r3, #4
 8009298:	d003      	beq.n	80092a2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2205      	movs	r2, #5
 800929e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2200      	movs	r2, #0
 80092a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	887a      	ldrh	r2, [r7, #2]
 80092b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	887a      	ldrh	r2, [r7, #2]
 80092ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	68ba      	ldr	r2, [r7, #8]
 80092c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	887a      	ldrh	r2, [r7, #2]
 80092c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	887a      	ldrh	r2, [r7, #2]
 80092ce:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2200      	movs	r2, #0
 80092d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2200      	movs	r2, #0
 80092da:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80092e4:	d802      	bhi.n	80092ec <HAL_SPI_TransmitReceive+0xe6>
 80092e6:	8a3b      	ldrh	r3, [r7, #16]
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d908      	bls.n	80092fe <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	685a      	ldr	r2, [r3, #4]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80092fa:	605a      	str	r2, [r3, #4]
 80092fc:	e007      	b.n	800930e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	685a      	ldr	r2, [r3, #4]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800930c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009318:	2b40      	cmp	r3, #64	; 0x40
 800931a:	d007      	beq.n	800932c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800932a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009334:	d97c      	bls.n	8009430 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d002      	beq.n	8009344 <HAL_SPI_TransmitReceive+0x13e>
 800933e:	8a7b      	ldrh	r3, [r7, #18]
 8009340:	2b01      	cmp	r3, #1
 8009342:	d169      	bne.n	8009418 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009348:	881a      	ldrh	r2, [r3, #0]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009354:	1c9a      	adds	r2, r3, #2
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800935e:	b29b      	uxth	r3, r3
 8009360:	3b01      	subs	r3, #1
 8009362:	b29a      	uxth	r2, r3
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009368:	e056      	b.n	8009418 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	f003 0302 	and.w	r3, r3, #2
 8009374:	2b02      	cmp	r3, #2
 8009376:	d11b      	bne.n	80093b0 <HAL_SPI_TransmitReceive+0x1aa>
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800937c:	b29b      	uxth	r3, r3
 800937e:	2b00      	cmp	r3, #0
 8009380:	d016      	beq.n	80093b0 <HAL_SPI_TransmitReceive+0x1aa>
 8009382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009384:	2b01      	cmp	r3, #1
 8009386:	d113      	bne.n	80093b0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800938c:	881a      	ldrh	r2, [r3, #0]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009398:	1c9a      	adds	r2, r3, #2
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	3b01      	subs	r3, #1
 80093a6:	b29a      	uxth	r2, r3
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80093ac:	2300      	movs	r3, #0
 80093ae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	f003 0301 	and.w	r3, r3, #1
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d11c      	bne.n	80093f8 <HAL_SPI_TransmitReceive+0x1f2>
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d016      	beq.n	80093f8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	68da      	ldr	r2, [r3, #12]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d4:	b292      	uxth	r2, r2
 80093d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093dc:	1c9a      	adds	r2, r3, #2
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	3b01      	subs	r3, #1
 80093ec:	b29a      	uxth	r2, r3
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80093f4:	2301      	movs	r3, #1
 80093f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80093f8:	f7fb fe40 	bl	800507c <HAL_GetTick>
 80093fc:	4602      	mov	r2, r0
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	1ad3      	subs	r3, r2, r3
 8009402:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009404:	429a      	cmp	r2, r3
 8009406:	d807      	bhi.n	8009418 <HAL_SPI_TransmitReceive+0x212>
 8009408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800940e:	d003      	beq.n	8009418 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8009410:	2303      	movs	r3, #3
 8009412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009416:	e0fb      	b.n	8009610 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800941c:	b29b      	uxth	r3, r3
 800941e:	2b00      	cmp	r3, #0
 8009420:	d1a3      	bne.n	800936a <HAL_SPI_TransmitReceive+0x164>
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009428:	b29b      	uxth	r3, r3
 800942a:	2b00      	cmp	r3, #0
 800942c:	d19d      	bne.n	800936a <HAL_SPI_TransmitReceive+0x164>
 800942e:	e0df      	b.n	80095f0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d003      	beq.n	8009440 <HAL_SPI_TransmitReceive+0x23a>
 8009438:	8a7b      	ldrh	r3, [r7, #18]
 800943a:	2b01      	cmp	r3, #1
 800943c:	f040 80cb 	bne.w	80095d6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009444:	b29b      	uxth	r3, r3
 8009446:	2b01      	cmp	r3, #1
 8009448:	d912      	bls.n	8009470 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800944e:	881a      	ldrh	r2, [r3, #0]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800945a:	1c9a      	adds	r2, r3, #2
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009464:	b29b      	uxth	r3, r3
 8009466:	3b02      	subs	r3, #2
 8009468:	b29a      	uxth	r2, r3
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800946e:	e0b2      	b.n	80095d6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	330c      	adds	r3, #12
 800947a:	7812      	ldrb	r2, [r2, #0]
 800947c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009482:	1c5a      	adds	r2, r3, #1
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800948c:	b29b      	uxth	r3, r3
 800948e:	3b01      	subs	r3, #1
 8009490:	b29a      	uxth	r2, r3
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009496:	e09e      	b.n	80095d6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	f003 0302 	and.w	r3, r3, #2
 80094a2:	2b02      	cmp	r3, #2
 80094a4:	d134      	bne.n	8009510 <HAL_SPI_TransmitReceive+0x30a>
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d02f      	beq.n	8009510 <HAL_SPI_TransmitReceive+0x30a>
 80094b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d12c      	bne.n	8009510 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d912      	bls.n	80094e6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c4:	881a      	ldrh	r2, [r3, #0]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d0:	1c9a      	adds	r2, r3, #2
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094da:	b29b      	uxth	r3, r3
 80094dc:	3b02      	subs	r3, #2
 80094de:	b29a      	uxth	r2, r3
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80094e4:	e012      	b.n	800950c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	330c      	adds	r3, #12
 80094f0:	7812      	ldrb	r2, [r2, #0]
 80094f2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f8:	1c5a      	adds	r2, r3, #1
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009502:	b29b      	uxth	r3, r3
 8009504:	3b01      	subs	r3, #1
 8009506:	b29a      	uxth	r2, r3
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800950c:	2300      	movs	r3, #0
 800950e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	f003 0301 	and.w	r3, r3, #1
 800951a:	2b01      	cmp	r3, #1
 800951c:	d148      	bne.n	80095b0 <HAL_SPI_TransmitReceive+0x3aa>
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009524:	b29b      	uxth	r3, r3
 8009526:	2b00      	cmp	r3, #0
 8009528:	d042      	beq.n	80095b0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009530:	b29b      	uxth	r3, r3
 8009532:	2b01      	cmp	r3, #1
 8009534:	d923      	bls.n	800957e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68da      	ldr	r2, [r3, #12]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009540:	b292      	uxth	r2, r2
 8009542:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009548:	1c9a      	adds	r2, r3, #2
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009554:	b29b      	uxth	r3, r3
 8009556:	3b02      	subs	r3, #2
 8009558:	b29a      	uxth	r2, r3
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009566:	b29b      	uxth	r3, r3
 8009568:	2b01      	cmp	r3, #1
 800956a:	d81f      	bhi.n	80095ac <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	685a      	ldr	r2, [r3, #4]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800957a:	605a      	str	r2, [r3, #4]
 800957c:	e016      	b.n	80095ac <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f103 020c 	add.w	r2, r3, #12
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800958a:	7812      	ldrb	r2, [r2, #0]
 800958c:	b2d2      	uxtb	r2, r2
 800958e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009594:	1c5a      	adds	r2, r3, #1
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	3b01      	subs	r3, #1
 80095a4:	b29a      	uxth	r2, r3
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80095ac:	2301      	movs	r3, #1
 80095ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80095b0:	f7fb fd64 	bl	800507c <HAL_GetTick>
 80095b4:	4602      	mov	r2, r0
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	1ad3      	subs	r3, r2, r3
 80095ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095bc:	429a      	cmp	r2, r3
 80095be:	d803      	bhi.n	80095c8 <HAL_SPI_TransmitReceive+0x3c2>
 80095c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c6:	d102      	bne.n	80095ce <HAL_SPI_TransmitReceive+0x3c8>
 80095c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d103      	bne.n	80095d6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80095ce:	2303      	movs	r3, #3
 80095d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80095d4:	e01c      	b.n	8009610 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095da:	b29b      	uxth	r3, r3
 80095dc:	2b00      	cmp	r3, #0
 80095de:	f47f af5b 	bne.w	8009498 <HAL_SPI_TransmitReceive+0x292>
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	f47f af54 	bne.w	8009498 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80095f0:	69fa      	ldr	r2, [r7, #28]
 80095f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80095f4:	68f8      	ldr	r0, [r7, #12]
 80095f6:	f000 f937 	bl	8009868 <SPI_EndRxTxTransaction>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d006      	beq.n	800960e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2220      	movs	r2, #32
 800960a:	661a      	str	r2, [r3, #96]	; 0x60
 800960c:	e000      	b.n	8009610 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800960e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2201      	movs	r2, #1
 8009614:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2200      	movs	r2, #0
 800961c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009620:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8009624:	4618      	mov	r0, r3
 8009626:	3728      	adds	r7, #40	; 0x28
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b088      	sub	sp, #32
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	603b      	str	r3, [r7, #0]
 8009638:	4613      	mov	r3, r2
 800963a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800963c:	f7fb fd1e 	bl	800507c <HAL_GetTick>
 8009640:	4602      	mov	r2, r0
 8009642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009644:	1a9b      	subs	r3, r3, r2
 8009646:	683a      	ldr	r2, [r7, #0]
 8009648:	4413      	add	r3, r2
 800964a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800964c:	f7fb fd16 	bl	800507c <HAL_GetTick>
 8009650:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009652:	4b39      	ldr	r3, [pc, #228]	; (8009738 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	015b      	lsls	r3, r3, #5
 8009658:	0d1b      	lsrs	r3, r3, #20
 800965a:	69fa      	ldr	r2, [r7, #28]
 800965c:	fb02 f303 	mul.w	r3, r2, r3
 8009660:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009662:	e054      	b.n	800970e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800966a:	d050      	beq.n	800970e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800966c:	f7fb fd06 	bl	800507c <HAL_GetTick>
 8009670:	4602      	mov	r2, r0
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	1ad3      	subs	r3, r2, r3
 8009676:	69fa      	ldr	r2, [r7, #28]
 8009678:	429a      	cmp	r2, r3
 800967a:	d902      	bls.n	8009682 <SPI_WaitFlagStateUntilTimeout+0x56>
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d13d      	bne.n	80096fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	685a      	ldr	r2, [r3, #4]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009690:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800969a:	d111      	bne.n	80096c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096a4:	d004      	beq.n	80096b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096ae:	d107      	bne.n	80096c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	681a      	ldr	r2, [r3, #0]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096c8:	d10f      	bne.n	80096ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80096d8:	601a      	str	r2, [r3, #0]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	681a      	ldr	r2, [r3, #0]
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80096e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2201      	movs	r2, #1
 80096ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80096fa:	2303      	movs	r3, #3
 80096fc:	e017      	b.n	800972e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d101      	bne.n	8009708 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009704:	2300      	movs	r3, #0
 8009706:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	3b01      	subs	r3, #1
 800970c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	689a      	ldr	r2, [r3, #8]
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	4013      	ands	r3, r2
 8009718:	68ba      	ldr	r2, [r7, #8]
 800971a:	429a      	cmp	r2, r3
 800971c:	bf0c      	ite	eq
 800971e:	2301      	moveq	r3, #1
 8009720:	2300      	movne	r3, #0
 8009722:	b2db      	uxtb	r3, r3
 8009724:	461a      	mov	r2, r3
 8009726:	79fb      	ldrb	r3, [r7, #7]
 8009728:	429a      	cmp	r2, r3
 800972a:	d19b      	bne.n	8009664 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800972c:	2300      	movs	r3, #0
}
 800972e:	4618      	mov	r0, r3
 8009730:	3720      	adds	r7, #32
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	2000008c 	.word	0x2000008c

0800973c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b08a      	sub	sp, #40	; 0x28
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	607a      	str	r2, [r7, #4]
 8009748:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800974a:	2300      	movs	r3, #0
 800974c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800974e:	f7fb fc95 	bl	800507c <HAL_GetTick>
 8009752:	4602      	mov	r2, r0
 8009754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009756:	1a9b      	subs	r3, r3, r2
 8009758:	683a      	ldr	r2, [r7, #0]
 800975a:	4413      	add	r3, r2
 800975c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800975e:	f7fb fc8d 	bl	800507c <HAL_GetTick>
 8009762:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	330c      	adds	r3, #12
 800976a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800976c:	4b3d      	ldr	r3, [pc, #244]	; (8009864 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	4613      	mov	r3, r2
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	4413      	add	r3, r2
 8009776:	00da      	lsls	r2, r3, #3
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	0d1b      	lsrs	r3, r3, #20
 800977c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800977e:	fb02 f303 	mul.w	r3, r2, r3
 8009782:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009784:	e060      	b.n	8009848 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800978c:	d107      	bne.n	800979e <SPI_WaitFifoStateUntilTimeout+0x62>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d104      	bne.n	800979e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009794:	69fb      	ldr	r3, [r7, #28]
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	b2db      	uxtb	r3, r3
 800979a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800979c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097a4:	d050      	beq.n	8009848 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80097a6:	f7fb fc69 	bl	800507c <HAL_GetTick>
 80097aa:	4602      	mov	r2, r0
 80097ac:	6a3b      	ldr	r3, [r7, #32]
 80097ae:	1ad3      	subs	r3, r2, r3
 80097b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d902      	bls.n	80097bc <SPI_WaitFifoStateUntilTimeout+0x80>
 80097b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d13d      	bne.n	8009838 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	685a      	ldr	r2, [r3, #4]
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80097ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80097d4:	d111      	bne.n	80097fa <SPI_WaitFifoStateUntilTimeout+0xbe>
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097de:	d004      	beq.n	80097ea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097e8:	d107      	bne.n	80097fa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009802:	d10f      	bne.n	8009824 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009812:	601a      	str	r2, [r3, #0]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009822:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2201      	movs	r2, #1
 8009828:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2200      	movs	r2, #0
 8009830:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009834:	2303      	movs	r3, #3
 8009836:	e010      	b.n	800985a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009838:	69bb      	ldr	r3, [r7, #24]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d101      	bne.n	8009842 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800983e:	2300      	movs	r3, #0
 8009840:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	3b01      	subs	r3, #1
 8009846:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	689a      	ldr	r2, [r3, #8]
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	4013      	ands	r3, r2
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	429a      	cmp	r2, r3
 8009856:	d196      	bne.n	8009786 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009858:	2300      	movs	r3, #0
}
 800985a:	4618      	mov	r0, r3
 800985c:	3728      	adds	r7, #40	; 0x28
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	2000008c 	.word	0x2000008c

08009868 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b086      	sub	sp, #24
 800986c:	af02      	add	r7, sp, #8
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	9300      	str	r3, [sp, #0]
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	2200      	movs	r2, #0
 800987c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009880:	68f8      	ldr	r0, [r7, #12]
 8009882:	f7ff ff5b 	bl	800973c <SPI_WaitFifoStateUntilTimeout>
 8009886:	4603      	mov	r3, r0
 8009888:	2b00      	cmp	r3, #0
 800988a:	d007      	beq.n	800989c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009890:	f043 0220 	orr.w	r2, r3, #32
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009898:	2303      	movs	r3, #3
 800989a:	e027      	b.n	80098ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	9300      	str	r3, [sp, #0]
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	2200      	movs	r2, #0
 80098a4:	2180      	movs	r1, #128	; 0x80
 80098a6:	68f8      	ldr	r0, [r7, #12]
 80098a8:	f7ff fec0 	bl	800962c <SPI_WaitFlagStateUntilTimeout>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d007      	beq.n	80098c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098b6:	f043 0220 	orr.w	r2, r3, #32
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80098be:	2303      	movs	r3, #3
 80098c0:	e014      	b.n	80098ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	9300      	str	r3, [sp, #0]
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	2200      	movs	r2, #0
 80098ca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80098ce:	68f8      	ldr	r0, [r7, #12]
 80098d0:	f7ff ff34 	bl	800973c <SPI_WaitFifoStateUntilTimeout>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d007      	beq.n	80098ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098de:	f043 0220 	orr.w	r2, r3, #32
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80098e6:	2303      	movs	r3, #3
 80098e8:	e000      	b.n	80098ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3710      	adds	r7, #16
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d101      	bne.n	8009906 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	e049      	b.n	800999a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800990c:	b2db      	uxtb	r3, r3
 800990e:	2b00      	cmp	r3, #0
 8009910:	d106      	bne.n	8009920 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f7fb f842 	bl	80049a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2202      	movs	r2, #2
 8009924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	3304      	adds	r3, #4
 8009930:	4619      	mov	r1, r3
 8009932:	4610      	mov	r0, r2
 8009934:	f000 fa96 	bl	8009e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2201      	movs	r2, #1
 800993c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2201      	movs	r2, #1
 8009954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2201      	movs	r2, #1
 800997c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009998:	2300      	movs	r3, #0
}
 800999a:	4618      	mov	r0, r3
 800999c:	3708      	adds	r7, #8
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
	...

080099a4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80099ae:	2300      	movs	r3, #0
 80099b0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d109      	bne.n	80099cc <HAL_TIM_PWM_Start_IT+0x28>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	bf14      	ite	ne
 80099c4:	2301      	movne	r3, #1
 80099c6:	2300      	moveq	r3, #0
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	e03c      	b.n	8009a46 <HAL_TIM_PWM_Start_IT+0xa2>
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	2b04      	cmp	r3, #4
 80099d0:	d109      	bne.n	80099e6 <HAL_TIM_PWM_Start_IT+0x42>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	2b01      	cmp	r3, #1
 80099dc:	bf14      	ite	ne
 80099de:	2301      	movne	r3, #1
 80099e0:	2300      	moveq	r3, #0
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	e02f      	b.n	8009a46 <HAL_TIM_PWM_Start_IT+0xa2>
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	2b08      	cmp	r3, #8
 80099ea:	d109      	bne.n	8009a00 <HAL_TIM_PWM_Start_IT+0x5c>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	bf14      	ite	ne
 80099f8:	2301      	movne	r3, #1
 80099fa:	2300      	moveq	r3, #0
 80099fc:	b2db      	uxtb	r3, r3
 80099fe:	e022      	b.n	8009a46 <HAL_TIM_PWM_Start_IT+0xa2>
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	2b0c      	cmp	r3, #12
 8009a04:	d109      	bne.n	8009a1a <HAL_TIM_PWM_Start_IT+0x76>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	bf14      	ite	ne
 8009a12:	2301      	movne	r3, #1
 8009a14:	2300      	moveq	r3, #0
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	e015      	b.n	8009a46 <HAL_TIM_PWM_Start_IT+0xa2>
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	2b10      	cmp	r3, #16
 8009a1e:	d109      	bne.n	8009a34 <HAL_TIM_PWM_Start_IT+0x90>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	bf14      	ite	ne
 8009a2c:	2301      	movne	r3, #1
 8009a2e:	2300      	moveq	r3, #0
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	e008      	b.n	8009a46 <HAL_TIM_PWM_Start_IT+0xa2>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	bf14      	ite	ne
 8009a40:	2301      	movne	r3, #1
 8009a42:	2300      	moveq	r3, #0
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d001      	beq.n	8009a4e <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e0e2      	b.n	8009c14 <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d104      	bne.n	8009a5e <HAL_TIM_PWM_Start_IT+0xba>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2202      	movs	r2, #2
 8009a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a5c:	e023      	b.n	8009aa6 <HAL_TIM_PWM_Start_IT+0x102>
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	2b04      	cmp	r3, #4
 8009a62:	d104      	bne.n	8009a6e <HAL_TIM_PWM_Start_IT+0xca>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2202      	movs	r2, #2
 8009a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a6c:	e01b      	b.n	8009aa6 <HAL_TIM_PWM_Start_IT+0x102>
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	2b08      	cmp	r3, #8
 8009a72:	d104      	bne.n	8009a7e <HAL_TIM_PWM_Start_IT+0xda>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2202      	movs	r2, #2
 8009a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a7c:	e013      	b.n	8009aa6 <HAL_TIM_PWM_Start_IT+0x102>
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	2b0c      	cmp	r3, #12
 8009a82:	d104      	bne.n	8009a8e <HAL_TIM_PWM_Start_IT+0xea>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2202      	movs	r2, #2
 8009a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009a8c:	e00b      	b.n	8009aa6 <HAL_TIM_PWM_Start_IT+0x102>
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	2b10      	cmp	r3, #16
 8009a92:	d104      	bne.n	8009a9e <HAL_TIM_PWM_Start_IT+0xfa>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2202      	movs	r2, #2
 8009a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a9c:	e003      	b.n	8009aa6 <HAL_TIM_PWM_Start_IT+0x102>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2202      	movs	r2, #2
 8009aa2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	2b0c      	cmp	r3, #12
 8009aaa:	d841      	bhi.n	8009b30 <HAL_TIM_PWM_Start_IT+0x18c>
 8009aac:	a201      	add	r2, pc, #4	; (adr r2, 8009ab4 <HAL_TIM_PWM_Start_IT+0x110>)
 8009aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab2:	bf00      	nop
 8009ab4:	08009ae9 	.word	0x08009ae9
 8009ab8:	08009b31 	.word	0x08009b31
 8009abc:	08009b31 	.word	0x08009b31
 8009ac0:	08009b31 	.word	0x08009b31
 8009ac4:	08009afb 	.word	0x08009afb
 8009ac8:	08009b31 	.word	0x08009b31
 8009acc:	08009b31 	.word	0x08009b31
 8009ad0:	08009b31 	.word	0x08009b31
 8009ad4:	08009b0d 	.word	0x08009b0d
 8009ad8:	08009b31 	.word	0x08009b31
 8009adc:	08009b31 	.word	0x08009b31
 8009ae0:	08009b31 	.word	0x08009b31
 8009ae4:	08009b1f 	.word	0x08009b1f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	68da      	ldr	r2, [r3, #12]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f042 0202 	orr.w	r2, r2, #2
 8009af6:	60da      	str	r2, [r3, #12]
      break;
 8009af8:	e01d      	b.n	8009b36 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	68da      	ldr	r2, [r3, #12]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f042 0204 	orr.w	r2, r2, #4
 8009b08:	60da      	str	r2, [r3, #12]
      break;
 8009b0a:	e014      	b.n	8009b36 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	68da      	ldr	r2, [r3, #12]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f042 0208 	orr.w	r2, r2, #8
 8009b1a:	60da      	str	r2, [r3, #12]
      break;
 8009b1c:	e00b      	b.n	8009b36 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	68da      	ldr	r2, [r3, #12]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f042 0210 	orr.w	r2, r2, #16
 8009b2c:	60da      	str	r2, [r3, #12]
      break;
 8009b2e:	e002      	b.n	8009b36 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8009b30:	2301      	movs	r3, #1
 8009b32:	73fb      	strb	r3, [r7, #15]
      break;
 8009b34:	bf00      	nop
  }

  if (status == HAL_OK)
 8009b36:	7bfb      	ldrb	r3, [r7, #15]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d16a      	bne.n	8009c12 <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2201      	movs	r2, #1
 8009b42:	6839      	ldr	r1, [r7, #0]
 8009b44:	4618      	mov	r0, r3
 8009b46:	f000 fcf3 	bl	800a530 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a33      	ldr	r2, [pc, #204]	; (8009c1c <HAL_TIM_PWM_Start_IT+0x278>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d013      	beq.n	8009b7c <HAL_TIM_PWM_Start_IT+0x1d8>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a31      	ldr	r2, [pc, #196]	; (8009c20 <HAL_TIM_PWM_Start_IT+0x27c>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d00e      	beq.n	8009b7c <HAL_TIM_PWM_Start_IT+0x1d8>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a30      	ldr	r2, [pc, #192]	; (8009c24 <HAL_TIM_PWM_Start_IT+0x280>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d009      	beq.n	8009b7c <HAL_TIM_PWM_Start_IT+0x1d8>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a2e      	ldr	r2, [pc, #184]	; (8009c28 <HAL_TIM_PWM_Start_IT+0x284>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d004      	beq.n	8009b7c <HAL_TIM_PWM_Start_IT+0x1d8>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a2d      	ldr	r2, [pc, #180]	; (8009c2c <HAL_TIM_PWM_Start_IT+0x288>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d101      	bne.n	8009b80 <HAL_TIM_PWM_Start_IT+0x1dc>
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	e000      	b.n	8009b82 <HAL_TIM_PWM_Start_IT+0x1de>
 8009b80:	2300      	movs	r3, #0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d007      	beq.n	8009b96 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a20      	ldr	r2, [pc, #128]	; (8009c1c <HAL_TIM_PWM_Start_IT+0x278>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d018      	beq.n	8009bd2 <HAL_TIM_PWM_Start_IT+0x22e>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ba8:	d013      	beq.n	8009bd2 <HAL_TIM_PWM_Start_IT+0x22e>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a20      	ldr	r2, [pc, #128]	; (8009c30 <HAL_TIM_PWM_Start_IT+0x28c>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d00e      	beq.n	8009bd2 <HAL_TIM_PWM_Start_IT+0x22e>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a1e      	ldr	r2, [pc, #120]	; (8009c34 <HAL_TIM_PWM_Start_IT+0x290>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d009      	beq.n	8009bd2 <HAL_TIM_PWM_Start_IT+0x22e>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4a17      	ldr	r2, [pc, #92]	; (8009c20 <HAL_TIM_PWM_Start_IT+0x27c>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d004      	beq.n	8009bd2 <HAL_TIM_PWM_Start_IT+0x22e>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a15      	ldr	r2, [pc, #84]	; (8009c24 <HAL_TIM_PWM_Start_IT+0x280>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d115      	bne.n	8009bfe <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	689a      	ldr	r2, [r3, #8]
 8009bd8:	4b17      	ldr	r3, [pc, #92]	; (8009c38 <HAL_TIM_PWM_Start_IT+0x294>)
 8009bda:	4013      	ands	r3, r2
 8009bdc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	2b06      	cmp	r3, #6
 8009be2:	d015      	beq.n	8009c10 <HAL_TIM_PWM_Start_IT+0x26c>
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bea:	d011      	beq.n	8009c10 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f042 0201 	orr.w	r2, r2, #1
 8009bfa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bfc:	e008      	b.n	8009c10 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f042 0201 	orr.w	r2, r2, #1
 8009c0c:	601a      	str	r2, [r3, #0]
 8009c0e:	e000      	b.n	8009c12 <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c10:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3710      	adds	r7, #16
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	40012c00 	.word	0x40012c00
 8009c20:	40013400 	.word	0x40013400
 8009c24:	40014000 	.word	0x40014000
 8009c28:	40014400 	.word	0x40014400
 8009c2c:	40014800 	.word	0x40014800
 8009c30:	40000400 	.word	0x40000400
 8009c34:	40000800 	.word	0x40000800
 8009c38:	00010007 	.word	0x00010007

08009c3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b086      	sub	sp, #24
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d101      	bne.n	8009c5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009c56:	2302      	movs	r3, #2
 8009c58:	e0ff      	b.n	8009e5a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2b14      	cmp	r3, #20
 8009c66:	f200 80f0 	bhi.w	8009e4a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009c6a:	a201      	add	r2, pc, #4	; (adr r2, 8009c70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c70:	08009cc5 	.word	0x08009cc5
 8009c74:	08009e4b 	.word	0x08009e4b
 8009c78:	08009e4b 	.word	0x08009e4b
 8009c7c:	08009e4b 	.word	0x08009e4b
 8009c80:	08009d05 	.word	0x08009d05
 8009c84:	08009e4b 	.word	0x08009e4b
 8009c88:	08009e4b 	.word	0x08009e4b
 8009c8c:	08009e4b 	.word	0x08009e4b
 8009c90:	08009d47 	.word	0x08009d47
 8009c94:	08009e4b 	.word	0x08009e4b
 8009c98:	08009e4b 	.word	0x08009e4b
 8009c9c:	08009e4b 	.word	0x08009e4b
 8009ca0:	08009d87 	.word	0x08009d87
 8009ca4:	08009e4b 	.word	0x08009e4b
 8009ca8:	08009e4b 	.word	0x08009e4b
 8009cac:	08009e4b 	.word	0x08009e4b
 8009cb0:	08009dc9 	.word	0x08009dc9
 8009cb4:	08009e4b 	.word	0x08009e4b
 8009cb8:	08009e4b 	.word	0x08009e4b
 8009cbc:	08009e4b 	.word	0x08009e4b
 8009cc0:	08009e09 	.word	0x08009e09
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	68b9      	ldr	r1, [r7, #8]
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f000 f95a 	bl	8009f84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	699a      	ldr	r2, [r3, #24]
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f042 0208 	orr.w	r2, r2, #8
 8009cde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	699a      	ldr	r2, [r3, #24]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f022 0204 	bic.w	r2, r2, #4
 8009cee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	6999      	ldr	r1, [r3, #24]
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	691a      	ldr	r2, [r3, #16]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	430a      	orrs	r2, r1
 8009d00:	619a      	str	r2, [r3, #24]
      break;
 8009d02:	e0a5      	b.n	8009e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	68b9      	ldr	r1, [r7, #8]
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f000 f9ca 	bl	800a0a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	699a      	ldr	r2, [r3, #24]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	699a      	ldr	r2, [r3, #24]
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	6999      	ldr	r1, [r3, #24]
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	691b      	ldr	r3, [r3, #16]
 8009d3a:	021a      	lsls	r2, r3, #8
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	430a      	orrs	r2, r1
 8009d42:	619a      	str	r2, [r3, #24]
      break;
 8009d44:	e084      	b.n	8009e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	68b9      	ldr	r1, [r7, #8]
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f000 fa33 	bl	800a1b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	69da      	ldr	r2, [r3, #28]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f042 0208 	orr.w	r2, r2, #8
 8009d60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	69da      	ldr	r2, [r3, #28]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f022 0204 	bic.w	r2, r2, #4
 8009d70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	69d9      	ldr	r1, [r3, #28]
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	691a      	ldr	r2, [r3, #16]
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	430a      	orrs	r2, r1
 8009d82:	61da      	str	r2, [r3, #28]
      break;
 8009d84:	e064      	b.n	8009e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	68b9      	ldr	r1, [r7, #8]
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f000 fa9b 	bl	800a2c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	69da      	ldr	r2, [r3, #28]
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009da0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	69da      	ldr	r2, [r3, #28]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009db0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	69d9      	ldr	r1, [r3, #28]
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	691b      	ldr	r3, [r3, #16]
 8009dbc:	021a      	lsls	r2, r3, #8
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	430a      	orrs	r2, r1
 8009dc4:	61da      	str	r2, [r3, #28]
      break;
 8009dc6:	e043      	b.n	8009e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	68b9      	ldr	r1, [r7, #8]
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f000 fae4 	bl	800a39c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f042 0208 	orr.w	r2, r2, #8
 8009de2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f022 0204 	bic.w	r2, r2, #4
 8009df2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	691a      	ldr	r2, [r3, #16]
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	430a      	orrs	r2, r1
 8009e04:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009e06:	e023      	b.n	8009e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	68b9      	ldr	r1, [r7, #8]
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f000 fb28 	bl	800a464 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	691b      	ldr	r3, [r3, #16]
 8009e3e:	021a      	lsls	r2, r3, #8
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	430a      	orrs	r2, r1
 8009e46:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009e48:	e002      	b.n	8009e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	75fb      	strb	r3, [r7, #23]
      break;
 8009e4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3718      	adds	r7, #24
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop

08009e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b085      	sub	sp, #20
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	4a3c      	ldr	r2, [pc, #240]	; (8009f68 <TIM_Base_SetConfig+0x104>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d00f      	beq.n	8009e9c <TIM_Base_SetConfig+0x38>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e82:	d00b      	beq.n	8009e9c <TIM_Base_SetConfig+0x38>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	4a39      	ldr	r2, [pc, #228]	; (8009f6c <TIM_Base_SetConfig+0x108>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d007      	beq.n	8009e9c <TIM_Base_SetConfig+0x38>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	4a38      	ldr	r2, [pc, #224]	; (8009f70 <TIM_Base_SetConfig+0x10c>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d003      	beq.n	8009e9c <TIM_Base_SetConfig+0x38>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	4a37      	ldr	r2, [pc, #220]	; (8009f74 <TIM_Base_SetConfig+0x110>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d108      	bne.n	8009eae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	4a2d      	ldr	r2, [pc, #180]	; (8009f68 <TIM_Base_SetConfig+0x104>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d01b      	beq.n	8009eee <TIM_Base_SetConfig+0x8a>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ebc:	d017      	beq.n	8009eee <TIM_Base_SetConfig+0x8a>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	4a2a      	ldr	r2, [pc, #168]	; (8009f6c <TIM_Base_SetConfig+0x108>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d013      	beq.n	8009eee <TIM_Base_SetConfig+0x8a>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	4a29      	ldr	r2, [pc, #164]	; (8009f70 <TIM_Base_SetConfig+0x10c>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d00f      	beq.n	8009eee <TIM_Base_SetConfig+0x8a>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	4a28      	ldr	r2, [pc, #160]	; (8009f74 <TIM_Base_SetConfig+0x110>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d00b      	beq.n	8009eee <TIM_Base_SetConfig+0x8a>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	4a27      	ldr	r2, [pc, #156]	; (8009f78 <TIM_Base_SetConfig+0x114>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d007      	beq.n	8009eee <TIM_Base_SetConfig+0x8a>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	4a26      	ldr	r2, [pc, #152]	; (8009f7c <TIM_Base_SetConfig+0x118>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d003      	beq.n	8009eee <TIM_Base_SetConfig+0x8a>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	4a25      	ldr	r2, [pc, #148]	; (8009f80 <TIM_Base_SetConfig+0x11c>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d108      	bne.n	8009f00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	68db      	ldr	r3, [r3, #12]
 8009efa:	68fa      	ldr	r2, [r7, #12]
 8009efc:	4313      	orrs	r3, r2
 8009efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	695b      	ldr	r3, [r3, #20]
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	689a      	ldr	r2, [r3, #8]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	4a10      	ldr	r2, [pc, #64]	; (8009f68 <TIM_Base_SetConfig+0x104>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d00f      	beq.n	8009f4c <TIM_Base_SetConfig+0xe8>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	4a11      	ldr	r2, [pc, #68]	; (8009f74 <TIM_Base_SetConfig+0x110>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d00b      	beq.n	8009f4c <TIM_Base_SetConfig+0xe8>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	4a10      	ldr	r2, [pc, #64]	; (8009f78 <TIM_Base_SetConfig+0x114>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d007      	beq.n	8009f4c <TIM_Base_SetConfig+0xe8>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	4a0f      	ldr	r2, [pc, #60]	; (8009f7c <TIM_Base_SetConfig+0x118>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d003      	beq.n	8009f4c <TIM_Base_SetConfig+0xe8>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	4a0e      	ldr	r2, [pc, #56]	; (8009f80 <TIM_Base_SetConfig+0x11c>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d103      	bne.n	8009f54 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	691a      	ldr	r2, [r3, #16]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2201      	movs	r2, #1
 8009f58:	615a      	str	r2, [r3, #20]
}
 8009f5a:	bf00      	nop
 8009f5c:	3714      	adds	r7, #20
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f64:	4770      	bx	lr
 8009f66:	bf00      	nop
 8009f68:	40012c00 	.word	0x40012c00
 8009f6c:	40000400 	.word	0x40000400
 8009f70:	40000800 	.word	0x40000800
 8009f74:	40013400 	.word	0x40013400
 8009f78:	40014000 	.word	0x40014000
 8009f7c:	40014400 	.word	0x40014400
 8009f80:	40014800 	.word	0x40014800

08009f84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b087      	sub	sp, #28
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6a1b      	ldr	r3, [r3, #32]
 8009f92:	f023 0201 	bic.w	r2, r3, #1
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6a1b      	ldr	r3, [r3, #32]
 8009f9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	699b      	ldr	r3, [r3, #24]
 8009faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f023 0303 	bic.w	r3, r3, #3
 8009fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	f023 0302 	bic.w	r3, r3, #2
 8009fd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	697a      	ldr	r2, [r7, #20]
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4a2c      	ldr	r2, [pc, #176]	; (800a090 <TIM_OC1_SetConfig+0x10c>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d00f      	beq.n	800a004 <TIM_OC1_SetConfig+0x80>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4a2b      	ldr	r2, [pc, #172]	; (800a094 <TIM_OC1_SetConfig+0x110>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d00b      	beq.n	800a004 <TIM_OC1_SetConfig+0x80>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4a2a      	ldr	r2, [pc, #168]	; (800a098 <TIM_OC1_SetConfig+0x114>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d007      	beq.n	800a004 <TIM_OC1_SetConfig+0x80>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	4a29      	ldr	r2, [pc, #164]	; (800a09c <TIM_OC1_SetConfig+0x118>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d003      	beq.n	800a004 <TIM_OC1_SetConfig+0x80>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a28      	ldr	r2, [pc, #160]	; (800a0a0 <TIM_OC1_SetConfig+0x11c>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d10c      	bne.n	800a01e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	f023 0308 	bic.w	r3, r3, #8
 800a00a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	68db      	ldr	r3, [r3, #12]
 800a010:	697a      	ldr	r2, [r7, #20]
 800a012:	4313      	orrs	r3, r2
 800a014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	f023 0304 	bic.w	r3, r3, #4
 800a01c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	4a1b      	ldr	r2, [pc, #108]	; (800a090 <TIM_OC1_SetConfig+0x10c>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d00f      	beq.n	800a046 <TIM_OC1_SetConfig+0xc2>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4a1a      	ldr	r2, [pc, #104]	; (800a094 <TIM_OC1_SetConfig+0x110>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d00b      	beq.n	800a046 <TIM_OC1_SetConfig+0xc2>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	4a19      	ldr	r2, [pc, #100]	; (800a098 <TIM_OC1_SetConfig+0x114>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d007      	beq.n	800a046 <TIM_OC1_SetConfig+0xc2>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	4a18      	ldr	r2, [pc, #96]	; (800a09c <TIM_OC1_SetConfig+0x118>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d003      	beq.n	800a046 <TIM_OC1_SetConfig+0xc2>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4a17      	ldr	r2, [pc, #92]	; (800a0a0 <TIM_OC1_SetConfig+0x11c>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d111      	bne.n	800a06a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a04c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	695b      	ldr	r3, [r3, #20]
 800a05a:	693a      	ldr	r2, [r7, #16]
 800a05c:	4313      	orrs	r3, r2
 800a05e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	699b      	ldr	r3, [r3, #24]
 800a064:	693a      	ldr	r2, [r7, #16]
 800a066:	4313      	orrs	r3, r2
 800a068:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	693a      	ldr	r2, [r7, #16]
 800a06e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	68fa      	ldr	r2, [r7, #12]
 800a074:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	685a      	ldr	r2, [r3, #4]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	697a      	ldr	r2, [r7, #20]
 800a082:	621a      	str	r2, [r3, #32]
}
 800a084:	bf00      	nop
 800a086:	371c      	adds	r7, #28
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr
 800a090:	40012c00 	.word	0x40012c00
 800a094:	40013400 	.word	0x40013400
 800a098:	40014000 	.word	0x40014000
 800a09c:	40014400 	.word	0x40014400
 800a0a0:	40014800 	.word	0x40014800

0800a0a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b087      	sub	sp, #28
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6a1b      	ldr	r3, [r3, #32]
 800a0b2:	f023 0210 	bic.w	r2, r3, #16
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a1b      	ldr	r3, [r3, #32]
 800a0be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	699b      	ldr	r3, [r3, #24]
 800a0ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a0d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	021b      	lsls	r3, r3, #8
 800a0e6:	68fa      	ldr	r2, [r7, #12]
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	f023 0320 	bic.w	r3, r3, #32
 800a0f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	011b      	lsls	r3, r3, #4
 800a0fa:	697a      	ldr	r2, [r7, #20]
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4a28      	ldr	r2, [pc, #160]	; (800a1a4 <TIM_OC2_SetConfig+0x100>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d003      	beq.n	800a110 <TIM_OC2_SetConfig+0x6c>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	4a27      	ldr	r2, [pc, #156]	; (800a1a8 <TIM_OC2_SetConfig+0x104>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d10d      	bne.n	800a12c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a116:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	011b      	lsls	r3, r3, #4
 800a11e:	697a      	ldr	r2, [r7, #20]
 800a120:	4313      	orrs	r3, r2
 800a122:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a12a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4a1d      	ldr	r2, [pc, #116]	; (800a1a4 <TIM_OC2_SetConfig+0x100>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d00f      	beq.n	800a154 <TIM_OC2_SetConfig+0xb0>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	4a1c      	ldr	r2, [pc, #112]	; (800a1a8 <TIM_OC2_SetConfig+0x104>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d00b      	beq.n	800a154 <TIM_OC2_SetConfig+0xb0>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4a1b      	ldr	r2, [pc, #108]	; (800a1ac <TIM_OC2_SetConfig+0x108>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d007      	beq.n	800a154 <TIM_OC2_SetConfig+0xb0>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	4a1a      	ldr	r2, [pc, #104]	; (800a1b0 <TIM_OC2_SetConfig+0x10c>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d003      	beq.n	800a154 <TIM_OC2_SetConfig+0xb0>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	4a19      	ldr	r2, [pc, #100]	; (800a1b4 <TIM_OC2_SetConfig+0x110>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d113      	bne.n	800a17c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a15a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a162:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	695b      	ldr	r3, [r3, #20]
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	693a      	ldr	r2, [r7, #16]
 800a16c:	4313      	orrs	r3, r2
 800a16e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	699b      	ldr	r3, [r3, #24]
 800a174:	009b      	lsls	r3, r3, #2
 800a176:	693a      	ldr	r2, [r7, #16]
 800a178:	4313      	orrs	r3, r2
 800a17a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	693a      	ldr	r2, [r7, #16]
 800a180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	68fa      	ldr	r2, [r7, #12]
 800a186:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	685a      	ldr	r2, [r3, #4]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	697a      	ldr	r2, [r7, #20]
 800a194:	621a      	str	r2, [r3, #32]
}
 800a196:	bf00      	nop
 800a198:	371c      	adds	r7, #28
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr
 800a1a2:	bf00      	nop
 800a1a4:	40012c00 	.word	0x40012c00
 800a1a8:	40013400 	.word	0x40013400
 800a1ac:	40014000 	.word	0x40014000
 800a1b0:	40014400 	.word	0x40014400
 800a1b4:	40014800 	.word	0x40014800

0800a1b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b087      	sub	sp, #28
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a1b      	ldr	r3, [r3, #32]
 800a1c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6a1b      	ldr	r3, [r3, #32]
 800a1d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	69db      	ldr	r3, [r3, #28]
 800a1de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f023 0303 	bic.w	r3, r3, #3
 800a1f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	68fa      	ldr	r2, [r7, #12]
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a204:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	021b      	lsls	r3, r3, #8
 800a20c:	697a      	ldr	r2, [r7, #20]
 800a20e:	4313      	orrs	r3, r2
 800a210:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	4a27      	ldr	r2, [pc, #156]	; (800a2b4 <TIM_OC3_SetConfig+0xfc>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d003      	beq.n	800a222 <TIM_OC3_SetConfig+0x6a>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	4a26      	ldr	r2, [pc, #152]	; (800a2b8 <TIM_OC3_SetConfig+0x100>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d10d      	bne.n	800a23e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a228:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	68db      	ldr	r3, [r3, #12]
 800a22e:	021b      	lsls	r3, r3, #8
 800a230:	697a      	ldr	r2, [r7, #20]
 800a232:	4313      	orrs	r3, r2
 800a234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a23c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4a1c      	ldr	r2, [pc, #112]	; (800a2b4 <TIM_OC3_SetConfig+0xfc>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d00f      	beq.n	800a266 <TIM_OC3_SetConfig+0xae>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	4a1b      	ldr	r2, [pc, #108]	; (800a2b8 <TIM_OC3_SetConfig+0x100>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d00b      	beq.n	800a266 <TIM_OC3_SetConfig+0xae>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	4a1a      	ldr	r2, [pc, #104]	; (800a2bc <TIM_OC3_SetConfig+0x104>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d007      	beq.n	800a266 <TIM_OC3_SetConfig+0xae>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	4a19      	ldr	r2, [pc, #100]	; (800a2c0 <TIM_OC3_SetConfig+0x108>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d003      	beq.n	800a266 <TIM_OC3_SetConfig+0xae>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	4a18      	ldr	r2, [pc, #96]	; (800a2c4 <TIM_OC3_SetConfig+0x10c>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d113      	bne.n	800a28e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a26c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a274:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	695b      	ldr	r3, [r3, #20]
 800a27a:	011b      	lsls	r3, r3, #4
 800a27c:	693a      	ldr	r2, [r7, #16]
 800a27e:	4313      	orrs	r3, r2
 800a280:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	699b      	ldr	r3, [r3, #24]
 800a286:	011b      	lsls	r3, r3, #4
 800a288:	693a      	ldr	r2, [r7, #16]
 800a28a:	4313      	orrs	r3, r2
 800a28c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	693a      	ldr	r2, [r7, #16]
 800a292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	68fa      	ldr	r2, [r7, #12]
 800a298:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	685a      	ldr	r2, [r3, #4]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	697a      	ldr	r2, [r7, #20]
 800a2a6:	621a      	str	r2, [r3, #32]
}
 800a2a8:	bf00      	nop
 800a2aa:	371c      	adds	r7, #28
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr
 800a2b4:	40012c00 	.word	0x40012c00
 800a2b8:	40013400 	.word	0x40013400
 800a2bc:	40014000 	.word	0x40014000
 800a2c0:	40014400 	.word	0x40014400
 800a2c4:	40014800 	.word	0x40014800

0800a2c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b087      	sub	sp, #28
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6a1b      	ldr	r3, [r3, #32]
 800a2d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6a1b      	ldr	r3, [r3, #32]
 800a2e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	69db      	ldr	r3, [r3, #28]
 800a2ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a2f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a302:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	021b      	lsls	r3, r3, #8
 800a30a:	68fa      	ldr	r2, [r7, #12]
 800a30c:	4313      	orrs	r3, r2
 800a30e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a316:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	031b      	lsls	r3, r3, #12
 800a31e:	693a      	ldr	r2, [r7, #16]
 800a320:	4313      	orrs	r3, r2
 800a322:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	4a18      	ldr	r2, [pc, #96]	; (800a388 <TIM_OC4_SetConfig+0xc0>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d00f      	beq.n	800a34c <TIM_OC4_SetConfig+0x84>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	4a17      	ldr	r2, [pc, #92]	; (800a38c <TIM_OC4_SetConfig+0xc4>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d00b      	beq.n	800a34c <TIM_OC4_SetConfig+0x84>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	4a16      	ldr	r2, [pc, #88]	; (800a390 <TIM_OC4_SetConfig+0xc8>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d007      	beq.n	800a34c <TIM_OC4_SetConfig+0x84>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4a15      	ldr	r2, [pc, #84]	; (800a394 <TIM_OC4_SetConfig+0xcc>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d003      	beq.n	800a34c <TIM_OC4_SetConfig+0x84>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	4a14      	ldr	r2, [pc, #80]	; (800a398 <TIM_OC4_SetConfig+0xd0>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d109      	bne.n	800a360 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a352:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	695b      	ldr	r3, [r3, #20]
 800a358:	019b      	lsls	r3, r3, #6
 800a35a:	697a      	ldr	r2, [r7, #20]
 800a35c:	4313      	orrs	r3, r2
 800a35e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	697a      	ldr	r2, [r7, #20]
 800a364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	685a      	ldr	r2, [r3, #4]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	693a      	ldr	r2, [r7, #16]
 800a378:	621a      	str	r2, [r3, #32]
}
 800a37a:	bf00      	nop
 800a37c:	371c      	adds	r7, #28
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr
 800a386:	bf00      	nop
 800a388:	40012c00 	.word	0x40012c00
 800a38c:	40013400 	.word	0x40013400
 800a390:	40014000 	.word	0x40014000
 800a394:	40014400 	.word	0x40014400
 800a398:	40014800 	.word	0x40014800

0800a39c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b087      	sub	sp, #28
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6a1b      	ldr	r3, [r3, #32]
 800a3aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6a1b      	ldr	r3, [r3, #32]
 800a3b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	68fa      	ldr	r2, [r7, #12]
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a3e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	689b      	ldr	r3, [r3, #8]
 800a3e6:	041b      	lsls	r3, r3, #16
 800a3e8:	693a      	ldr	r2, [r7, #16]
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	4a17      	ldr	r2, [pc, #92]	; (800a450 <TIM_OC5_SetConfig+0xb4>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d00f      	beq.n	800a416 <TIM_OC5_SetConfig+0x7a>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4a16      	ldr	r2, [pc, #88]	; (800a454 <TIM_OC5_SetConfig+0xb8>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d00b      	beq.n	800a416 <TIM_OC5_SetConfig+0x7a>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4a15      	ldr	r2, [pc, #84]	; (800a458 <TIM_OC5_SetConfig+0xbc>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d007      	beq.n	800a416 <TIM_OC5_SetConfig+0x7a>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	4a14      	ldr	r2, [pc, #80]	; (800a45c <TIM_OC5_SetConfig+0xc0>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d003      	beq.n	800a416 <TIM_OC5_SetConfig+0x7a>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4a13      	ldr	r2, [pc, #76]	; (800a460 <TIM_OC5_SetConfig+0xc4>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d109      	bne.n	800a42a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a41c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	695b      	ldr	r3, [r3, #20]
 800a422:	021b      	lsls	r3, r3, #8
 800a424:	697a      	ldr	r2, [r7, #20]
 800a426:	4313      	orrs	r3, r2
 800a428:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	697a      	ldr	r2, [r7, #20]
 800a42e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	68fa      	ldr	r2, [r7, #12]
 800a434:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	685a      	ldr	r2, [r3, #4]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	693a      	ldr	r2, [r7, #16]
 800a442:	621a      	str	r2, [r3, #32]
}
 800a444:	bf00      	nop
 800a446:	371c      	adds	r7, #28
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr
 800a450:	40012c00 	.word	0x40012c00
 800a454:	40013400 	.word	0x40013400
 800a458:	40014000 	.word	0x40014000
 800a45c:	40014400 	.word	0x40014400
 800a460:	40014800 	.word	0x40014800

0800a464 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a464:	b480      	push	{r7}
 800a466:	b087      	sub	sp, #28
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6a1b      	ldr	r3, [r3, #32]
 800a472:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6a1b      	ldr	r3, [r3, #32]
 800a47e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a48a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	021b      	lsls	r3, r3, #8
 800a49e:	68fa      	ldr	r2, [r7, #12]
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a4aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	689b      	ldr	r3, [r3, #8]
 800a4b0:	051b      	lsls	r3, r3, #20
 800a4b2:	693a      	ldr	r2, [r7, #16]
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4a18      	ldr	r2, [pc, #96]	; (800a51c <TIM_OC6_SetConfig+0xb8>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d00f      	beq.n	800a4e0 <TIM_OC6_SetConfig+0x7c>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	4a17      	ldr	r2, [pc, #92]	; (800a520 <TIM_OC6_SetConfig+0xbc>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d00b      	beq.n	800a4e0 <TIM_OC6_SetConfig+0x7c>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	4a16      	ldr	r2, [pc, #88]	; (800a524 <TIM_OC6_SetConfig+0xc0>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d007      	beq.n	800a4e0 <TIM_OC6_SetConfig+0x7c>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	4a15      	ldr	r2, [pc, #84]	; (800a528 <TIM_OC6_SetConfig+0xc4>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d003      	beq.n	800a4e0 <TIM_OC6_SetConfig+0x7c>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	4a14      	ldr	r2, [pc, #80]	; (800a52c <TIM_OC6_SetConfig+0xc8>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d109      	bne.n	800a4f4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a4e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	695b      	ldr	r3, [r3, #20]
 800a4ec:	029b      	lsls	r3, r3, #10
 800a4ee:	697a      	ldr	r2, [r7, #20]
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	697a      	ldr	r2, [r7, #20]
 800a4f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	68fa      	ldr	r2, [r7, #12]
 800a4fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	685a      	ldr	r2, [r3, #4]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	693a      	ldr	r2, [r7, #16]
 800a50c:	621a      	str	r2, [r3, #32]
}
 800a50e:	bf00      	nop
 800a510:	371c      	adds	r7, #28
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr
 800a51a:	bf00      	nop
 800a51c:	40012c00 	.word	0x40012c00
 800a520:	40013400 	.word	0x40013400
 800a524:	40014000 	.word	0x40014000
 800a528:	40014400 	.word	0x40014400
 800a52c:	40014800 	.word	0x40014800

0800a530 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a530:	b480      	push	{r7}
 800a532:	b087      	sub	sp, #28
 800a534:	af00      	add	r7, sp, #0
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	60b9      	str	r1, [r7, #8]
 800a53a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	f003 031f 	and.w	r3, r3, #31
 800a542:	2201      	movs	r2, #1
 800a544:	fa02 f303 	lsl.w	r3, r2, r3
 800a548:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	6a1a      	ldr	r2, [r3, #32]
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	43db      	mvns	r3, r3
 800a552:	401a      	ands	r2, r3
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	6a1a      	ldr	r2, [r3, #32]
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	f003 031f 	and.w	r3, r3, #31
 800a562:	6879      	ldr	r1, [r7, #4]
 800a564:	fa01 f303 	lsl.w	r3, r1, r3
 800a568:	431a      	orrs	r2, r3
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	621a      	str	r2, [r3, #32]
}
 800a56e:	bf00      	nop
 800a570:	371c      	adds	r7, #28
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr
	...

0800a57c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b085      	sub	sp, #20
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d101      	bne.n	800a594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a590:	2302      	movs	r3, #2
 800a592:	e063      	b.n	800a65c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2201      	movs	r2, #1
 800a598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2202      	movs	r2, #2
 800a5a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a2b      	ldr	r2, [pc, #172]	; (800a668 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d004      	beq.n	800a5c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a2a      	ldr	r2, [pc, #168]	; (800a66c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d108      	bne.n	800a5da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a5ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	68fa      	ldr	r2, [r7, #12]
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	68fa      	ldr	r2, [r7, #12]
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	68fa      	ldr	r2, [r7, #12]
 800a5f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4a1b      	ldr	r2, [pc, #108]	; (800a668 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d018      	beq.n	800a630 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a606:	d013      	beq.n	800a630 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a18      	ldr	r2, [pc, #96]	; (800a670 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d00e      	beq.n	800a630 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4a17      	ldr	r2, [pc, #92]	; (800a674 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d009      	beq.n	800a630 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	4a12      	ldr	r2, [pc, #72]	; (800a66c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d004      	beq.n	800a630 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4a13      	ldr	r2, [pc, #76]	; (800a678 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d10c      	bne.n	800a64a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a636:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	68ba      	ldr	r2, [r7, #8]
 800a63e:	4313      	orrs	r3, r2
 800a640:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	68ba      	ldr	r2, [r7, #8]
 800a648:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2201      	movs	r2, #1
 800a64e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2200      	movs	r2, #0
 800a656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a65a:	2300      	movs	r3, #0
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3714      	adds	r7, #20
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr
 800a668:	40012c00 	.word	0x40012c00
 800a66c:	40013400 	.word	0x40013400
 800a670:	40000400 	.word	0x40000400
 800a674:	40000800 	.word	0x40000800
 800a678:	40014000 	.word	0x40014000

0800a67c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b085      	sub	sp, #20
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a686:	2300      	movs	r3, #0
 800a688:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a690:	2b01      	cmp	r3, #1
 800a692:	d101      	bne.n	800a698 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a694:	2302      	movs	r3, #2
 800a696:	e065      	b.n	800a764 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2201      	movs	r2, #1
 800a69c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	68db      	ldr	r3, [r3, #12]
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	689b      	ldr	r3, [r3, #8]
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	691b      	ldr	r3, [r3, #16]
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	695b      	ldr	r3, [r3, #20]
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6fe:	4313      	orrs	r3, r2
 800a700:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	699b      	ldr	r3, [r3, #24]
 800a70c:	041b      	lsls	r3, r3, #16
 800a70e:	4313      	orrs	r3, r2
 800a710:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4a16      	ldr	r2, [pc, #88]	; (800a770 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d004      	beq.n	800a726 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4a14      	ldr	r2, [pc, #80]	; (800a774 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d115      	bne.n	800a752 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a730:	051b      	lsls	r3, r3, #20
 800a732:	4313      	orrs	r3, r2
 800a734:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	69db      	ldr	r3, [r3, #28]
 800a740:	4313      	orrs	r3, r2
 800a742:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	6a1b      	ldr	r3, [r3, #32]
 800a74e:	4313      	orrs	r3, r2
 800a750:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	68fa      	ldr	r2, [r7, #12]
 800a758:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2200      	movs	r2, #0
 800a75e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a762:	2300      	movs	r3, #0
}
 800a764:	4618      	mov	r0, r3
 800a766:	3714      	adds	r7, #20
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr
 800a770:	40012c00 	.word	0x40012c00
 800a774:	40013400 	.word	0x40013400

0800a778 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d101      	bne.n	800a78a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a786:	2301      	movs	r3, #1
 800a788:	e040      	b.n	800a80c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d106      	bne.n	800a7a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2200      	movs	r2, #0
 800a796:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f7fa fa20 	bl	8004be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2224      	movs	r2, #36	; 0x24
 800a7a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f022 0201 	bic.w	r2, r2, #1
 800a7b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 f8ea 	bl	800a990 <UART_SetConfig>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	2b01      	cmp	r3, #1
 800a7c0:	d101      	bne.n	800a7c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	e022      	b.n	800a80c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d002      	beq.n	800a7d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f000 fab2 	bl	800ad38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	685a      	ldr	r2, [r3, #4]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a7e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	689a      	ldr	r2, [r3, #8]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a7f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f042 0201 	orr.w	r2, r2, #1
 800a802:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f000 fb39 	bl	800ae7c <UART_CheckIdleState>
 800a80a:	4603      	mov	r3, r0
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3708      	adds	r7, #8
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b08a      	sub	sp, #40	; 0x28
 800a818:	af02      	add	r7, sp, #8
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	603b      	str	r3, [r7, #0]
 800a820:	4613      	mov	r3, r2
 800a822:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a828:	2b20      	cmp	r3, #32
 800a82a:	f040 80ac 	bne.w	800a986 <HAL_UART_Receive+0x172>
  {
    if ((pData == NULL) || (Size == 0U))
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d002      	beq.n	800a83a <HAL_UART_Receive+0x26>
 800a834:	88fb      	ldrh	r3, [r7, #6]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d101      	bne.n	800a83e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800a83a:	2301      	movs	r3, #1
 800a83c:	e0a4      	b.n	800a988 <HAL_UART_Receive+0x174>
    }

    __HAL_LOCK(huart);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a844:	2b01      	cmp	r3, #1
 800a846:	d101      	bne.n	800a84c <HAL_UART_Receive+0x38>
 800a848:	2302      	movs	r3, #2
 800a84a:	e09d      	b.n	800a988 <HAL_UART_Receive+0x174>
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2201      	movs	r2, #1
 800a850:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2200      	movs	r2, #0
 800a858:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2222      	movs	r2, #34	; 0x22
 800a860:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2200      	movs	r2, #0
 800a866:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a868:	f7fa fc08 	bl	800507c <HAL_GetTick>
 800a86c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	88fa      	ldrh	r2, [r7, #6]
 800a872:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	88fa      	ldrh	r2, [r7, #6]
 800a87a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	689b      	ldr	r3, [r3, #8]
 800a882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a886:	d10e      	bne.n	800a8a6 <HAL_UART_Receive+0x92>
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	691b      	ldr	r3, [r3, #16]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d105      	bne.n	800a89c <HAL_UART_Receive+0x88>
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a896:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a89a:	e01a      	b.n	800a8d2 <HAL_UART_Receive+0xbe>
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	22ff      	movs	r2, #255	; 0xff
 800a8a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a8a4:	e015      	b.n	800a8d2 <HAL_UART_Receive+0xbe>
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	689b      	ldr	r3, [r3, #8]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d10d      	bne.n	800a8ca <HAL_UART_Receive+0xb6>
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	691b      	ldr	r3, [r3, #16]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d104      	bne.n	800a8c0 <HAL_UART_Receive+0xac>
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	22ff      	movs	r2, #255	; 0xff
 800a8ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a8be:	e008      	b.n	800a8d2 <HAL_UART_Receive+0xbe>
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	227f      	movs	r2, #127	; 0x7f
 800a8c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a8c8:	e003      	b.n	800a8d2 <HAL_UART_Receive+0xbe>
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a8d8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8e2:	d108      	bne.n	800a8f6 <HAL_UART_Receive+0xe2>
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	691b      	ldr	r3, [r3, #16]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d104      	bne.n	800a8f6 <HAL_UART_Receive+0xe2>
    {
      pdata8bits  = NULL;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	61bb      	str	r3, [r7, #24]
 800a8f4:	e003      	b.n	800a8fe <HAL_UART_Receive+0xea>
    }
    else
    {
      pdata8bits  = pData;
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2200      	movs	r2, #0
 800a902:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a906:	e033      	b.n	800a970 <HAL_UART_Receive+0x15c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	9300      	str	r3, [sp, #0]
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	2200      	movs	r2, #0
 800a910:	2120      	movs	r1, #32
 800a912:	68f8      	ldr	r0, [r7, #12]
 800a914:	f000 fafb 	bl	800af0e <UART_WaitOnFlagUntilTimeout>
 800a918:	4603      	mov	r3, r0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d001      	beq.n	800a922 <HAL_UART_Receive+0x10e>
      {
        return HAL_TIMEOUT;
 800a91e:	2303      	movs	r3, #3
 800a920:	e032      	b.n	800a988 <HAL_UART_Receive+0x174>
      }
      if (pdata8bits == NULL)
 800a922:	69fb      	ldr	r3, [r7, #28]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d10c      	bne.n	800a942 <HAL_UART_Receive+0x12e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a92e:	b29a      	uxth	r2, r3
 800a930:	8a7b      	ldrh	r3, [r7, #18]
 800a932:	4013      	ands	r3, r2
 800a934:	b29a      	uxth	r2, r3
 800a936:	69bb      	ldr	r3, [r7, #24]
 800a938:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a93a:	69bb      	ldr	r3, [r7, #24]
 800a93c:	3302      	adds	r3, #2
 800a93e:	61bb      	str	r3, [r7, #24]
 800a940:	e00d      	b.n	800a95e <HAL_UART_Receive+0x14a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a948:	b29b      	uxth	r3, r3
 800a94a:	b2da      	uxtb	r2, r3
 800a94c:	8a7b      	ldrh	r3, [r7, #18]
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	4013      	ands	r3, r2
 800a952:	b2da      	uxtb	r2, r3
 800a954:	69fb      	ldr	r3, [r7, #28]
 800a956:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a958:	69fb      	ldr	r3, [r7, #28]
 800a95a:	3301      	adds	r3, #1
 800a95c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a964:	b29b      	uxth	r3, r3
 800a966:	3b01      	subs	r3, #1
 800a968:	b29a      	uxth	r2, r3
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a976:	b29b      	uxth	r3, r3
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d1c5      	bne.n	800a908 <HAL_UART_Receive+0xf4>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2220      	movs	r2, #32
 800a980:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800a982:	2300      	movs	r3, #0
 800a984:	e000      	b.n	800a988 <HAL_UART_Receive+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a986:	2302      	movs	r3, #2
  }
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3720      	adds	r7, #32
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b088      	sub	sp, #32
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a998:	2300      	movs	r3, #0
 800a99a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	689a      	ldr	r2, [r3, #8]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	691b      	ldr	r3, [r3, #16]
 800a9a4:	431a      	orrs	r2, r3
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	695b      	ldr	r3, [r3, #20]
 800a9aa:	431a      	orrs	r2, r3
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	69db      	ldr	r3, [r3, #28]
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a9be:	f023 030c 	bic.w	r3, r3, #12
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	6812      	ldr	r2, [r2, #0]
 800a9c6:	6979      	ldr	r1, [r7, #20]
 800a9c8:	430b      	orrs	r3, r1
 800a9ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	68da      	ldr	r2, [r3, #12]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	430a      	orrs	r2, r1
 800a9e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	699b      	ldr	r3, [r3, #24]
 800a9e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6a1b      	ldr	r3, [r3, #32]
 800a9ec:	697a      	ldr	r2, [r7, #20]
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	697a      	ldr	r2, [r7, #20]
 800aa02:	430a      	orrs	r2, r1
 800aa04:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4aae      	ldr	r2, [pc, #696]	; (800acc4 <UART_SetConfig+0x334>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d120      	bne.n	800aa52 <UART_SetConfig+0xc2>
 800aa10:	4bad      	ldr	r3, [pc, #692]	; (800acc8 <UART_SetConfig+0x338>)
 800aa12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa14:	f003 0303 	and.w	r3, r3, #3
 800aa18:	2b03      	cmp	r3, #3
 800aa1a:	d817      	bhi.n	800aa4c <UART_SetConfig+0xbc>
 800aa1c:	a201      	add	r2, pc, #4	; (adr r2, 800aa24 <UART_SetConfig+0x94>)
 800aa1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa22:	bf00      	nop
 800aa24:	0800aa35 	.word	0x0800aa35
 800aa28:	0800aa41 	.word	0x0800aa41
 800aa2c:	0800aa47 	.word	0x0800aa47
 800aa30:	0800aa3b 	.word	0x0800aa3b
 800aa34:	2301      	movs	r3, #1
 800aa36:	77fb      	strb	r3, [r7, #31]
 800aa38:	e0b5      	b.n	800aba6 <UART_SetConfig+0x216>
 800aa3a:	2302      	movs	r3, #2
 800aa3c:	77fb      	strb	r3, [r7, #31]
 800aa3e:	e0b2      	b.n	800aba6 <UART_SetConfig+0x216>
 800aa40:	2304      	movs	r3, #4
 800aa42:	77fb      	strb	r3, [r7, #31]
 800aa44:	e0af      	b.n	800aba6 <UART_SetConfig+0x216>
 800aa46:	2308      	movs	r3, #8
 800aa48:	77fb      	strb	r3, [r7, #31]
 800aa4a:	e0ac      	b.n	800aba6 <UART_SetConfig+0x216>
 800aa4c:	2310      	movs	r3, #16
 800aa4e:	77fb      	strb	r3, [r7, #31]
 800aa50:	e0a9      	b.n	800aba6 <UART_SetConfig+0x216>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a9d      	ldr	r2, [pc, #628]	; (800accc <UART_SetConfig+0x33c>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d124      	bne.n	800aaa6 <UART_SetConfig+0x116>
 800aa5c:	4b9a      	ldr	r3, [pc, #616]	; (800acc8 <UART_SetConfig+0x338>)
 800aa5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800aa64:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aa68:	d011      	beq.n	800aa8e <UART_SetConfig+0xfe>
 800aa6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aa6e:	d817      	bhi.n	800aaa0 <UART_SetConfig+0x110>
 800aa70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa74:	d011      	beq.n	800aa9a <UART_SetConfig+0x10a>
 800aa76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa7a:	d811      	bhi.n	800aaa0 <UART_SetConfig+0x110>
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d003      	beq.n	800aa88 <UART_SetConfig+0xf8>
 800aa80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa84:	d006      	beq.n	800aa94 <UART_SetConfig+0x104>
 800aa86:	e00b      	b.n	800aaa0 <UART_SetConfig+0x110>
 800aa88:	2300      	movs	r3, #0
 800aa8a:	77fb      	strb	r3, [r7, #31]
 800aa8c:	e08b      	b.n	800aba6 <UART_SetConfig+0x216>
 800aa8e:	2302      	movs	r3, #2
 800aa90:	77fb      	strb	r3, [r7, #31]
 800aa92:	e088      	b.n	800aba6 <UART_SetConfig+0x216>
 800aa94:	2304      	movs	r3, #4
 800aa96:	77fb      	strb	r3, [r7, #31]
 800aa98:	e085      	b.n	800aba6 <UART_SetConfig+0x216>
 800aa9a:	2308      	movs	r3, #8
 800aa9c:	77fb      	strb	r3, [r7, #31]
 800aa9e:	e082      	b.n	800aba6 <UART_SetConfig+0x216>
 800aaa0:	2310      	movs	r3, #16
 800aaa2:	77fb      	strb	r3, [r7, #31]
 800aaa4:	e07f      	b.n	800aba6 <UART_SetConfig+0x216>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a89      	ldr	r2, [pc, #548]	; (800acd0 <UART_SetConfig+0x340>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d124      	bne.n	800aafa <UART_SetConfig+0x16a>
 800aab0:	4b85      	ldr	r3, [pc, #532]	; (800acc8 <UART_SetConfig+0x338>)
 800aab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aab4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800aab8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800aabc:	d011      	beq.n	800aae2 <UART_SetConfig+0x152>
 800aabe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800aac2:	d817      	bhi.n	800aaf4 <UART_SetConfig+0x164>
 800aac4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800aac8:	d011      	beq.n	800aaee <UART_SetConfig+0x15e>
 800aaca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800aace:	d811      	bhi.n	800aaf4 <UART_SetConfig+0x164>
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d003      	beq.n	800aadc <UART_SetConfig+0x14c>
 800aad4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aad8:	d006      	beq.n	800aae8 <UART_SetConfig+0x158>
 800aada:	e00b      	b.n	800aaf4 <UART_SetConfig+0x164>
 800aadc:	2300      	movs	r3, #0
 800aade:	77fb      	strb	r3, [r7, #31]
 800aae0:	e061      	b.n	800aba6 <UART_SetConfig+0x216>
 800aae2:	2302      	movs	r3, #2
 800aae4:	77fb      	strb	r3, [r7, #31]
 800aae6:	e05e      	b.n	800aba6 <UART_SetConfig+0x216>
 800aae8:	2304      	movs	r3, #4
 800aaea:	77fb      	strb	r3, [r7, #31]
 800aaec:	e05b      	b.n	800aba6 <UART_SetConfig+0x216>
 800aaee:	2308      	movs	r3, #8
 800aaf0:	77fb      	strb	r3, [r7, #31]
 800aaf2:	e058      	b.n	800aba6 <UART_SetConfig+0x216>
 800aaf4:	2310      	movs	r3, #16
 800aaf6:	77fb      	strb	r3, [r7, #31]
 800aaf8:	e055      	b.n	800aba6 <UART_SetConfig+0x216>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	4a75      	ldr	r2, [pc, #468]	; (800acd4 <UART_SetConfig+0x344>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d124      	bne.n	800ab4e <UART_SetConfig+0x1be>
 800ab04:	4b70      	ldr	r3, [pc, #448]	; (800acc8 <UART_SetConfig+0x338>)
 800ab06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab08:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800ab0c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ab10:	d011      	beq.n	800ab36 <UART_SetConfig+0x1a6>
 800ab12:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ab16:	d817      	bhi.n	800ab48 <UART_SetConfig+0x1b8>
 800ab18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab1c:	d011      	beq.n	800ab42 <UART_SetConfig+0x1b2>
 800ab1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab22:	d811      	bhi.n	800ab48 <UART_SetConfig+0x1b8>
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d003      	beq.n	800ab30 <UART_SetConfig+0x1a0>
 800ab28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab2c:	d006      	beq.n	800ab3c <UART_SetConfig+0x1ac>
 800ab2e:	e00b      	b.n	800ab48 <UART_SetConfig+0x1b8>
 800ab30:	2300      	movs	r3, #0
 800ab32:	77fb      	strb	r3, [r7, #31]
 800ab34:	e037      	b.n	800aba6 <UART_SetConfig+0x216>
 800ab36:	2302      	movs	r3, #2
 800ab38:	77fb      	strb	r3, [r7, #31]
 800ab3a:	e034      	b.n	800aba6 <UART_SetConfig+0x216>
 800ab3c:	2304      	movs	r3, #4
 800ab3e:	77fb      	strb	r3, [r7, #31]
 800ab40:	e031      	b.n	800aba6 <UART_SetConfig+0x216>
 800ab42:	2308      	movs	r3, #8
 800ab44:	77fb      	strb	r3, [r7, #31]
 800ab46:	e02e      	b.n	800aba6 <UART_SetConfig+0x216>
 800ab48:	2310      	movs	r3, #16
 800ab4a:	77fb      	strb	r3, [r7, #31]
 800ab4c:	e02b      	b.n	800aba6 <UART_SetConfig+0x216>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	4a61      	ldr	r2, [pc, #388]	; (800acd8 <UART_SetConfig+0x348>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d124      	bne.n	800aba2 <UART_SetConfig+0x212>
 800ab58:	4b5b      	ldr	r3, [pc, #364]	; (800acc8 <UART_SetConfig+0x338>)
 800ab5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab5c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800ab60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ab64:	d011      	beq.n	800ab8a <UART_SetConfig+0x1fa>
 800ab66:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ab6a:	d817      	bhi.n	800ab9c <UART_SetConfig+0x20c>
 800ab6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ab70:	d011      	beq.n	800ab96 <UART_SetConfig+0x206>
 800ab72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ab76:	d811      	bhi.n	800ab9c <UART_SetConfig+0x20c>
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d003      	beq.n	800ab84 <UART_SetConfig+0x1f4>
 800ab7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab80:	d006      	beq.n	800ab90 <UART_SetConfig+0x200>
 800ab82:	e00b      	b.n	800ab9c <UART_SetConfig+0x20c>
 800ab84:	2300      	movs	r3, #0
 800ab86:	77fb      	strb	r3, [r7, #31]
 800ab88:	e00d      	b.n	800aba6 <UART_SetConfig+0x216>
 800ab8a:	2302      	movs	r3, #2
 800ab8c:	77fb      	strb	r3, [r7, #31]
 800ab8e:	e00a      	b.n	800aba6 <UART_SetConfig+0x216>
 800ab90:	2304      	movs	r3, #4
 800ab92:	77fb      	strb	r3, [r7, #31]
 800ab94:	e007      	b.n	800aba6 <UART_SetConfig+0x216>
 800ab96:	2308      	movs	r3, #8
 800ab98:	77fb      	strb	r3, [r7, #31]
 800ab9a:	e004      	b.n	800aba6 <UART_SetConfig+0x216>
 800ab9c:	2310      	movs	r3, #16
 800ab9e:	77fb      	strb	r3, [r7, #31]
 800aba0:	e001      	b.n	800aba6 <UART_SetConfig+0x216>
 800aba2:	2310      	movs	r3, #16
 800aba4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	69db      	ldr	r3, [r3, #28]
 800abaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abae:	d15c      	bne.n	800ac6a <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 800abb0:	7ffb      	ldrb	r3, [r7, #31]
 800abb2:	2b08      	cmp	r3, #8
 800abb4:	d827      	bhi.n	800ac06 <UART_SetConfig+0x276>
 800abb6:	a201      	add	r2, pc, #4	; (adr r2, 800abbc <UART_SetConfig+0x22c>)
 800abb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abbc:	0800abe1 	.word	0x0800abe1
 800abc0:	0800abe9 	.word	0x0800abe9
 800abc4:	0800abf1 	.word	0x0800abf1
 800abc8:	0800ac07 	.word	0x0800ac07
 800abcc:	0800abf7 	.word	0x0800abf7
 800abd0:	0800ac07 	.word	0x0800ac07
 800abd4:	0800ac07 	.word	0x0800ac07
 800abd8:	0800ac07 	.word	0x0800ac07
 800abdc:	0800abff 	.word	0x0800abff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abe0:	f7fd ff04 	bl	80089ec <HAL_RCC_GetPCLK1Freq>
 800abe4:	61b8      	str	r0, [r7, #24]
        break;
 800abe6:	e013      	b.n	800ac10 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abe8:	f7fd ff22 	bl	8008a30 <HAL_RCC_GetPCLK2Freq>
 800abec:	61b8      	str	r0, [r7, #24]
        break;
 800abee:	e00f      	b.n	800ac10 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800abf0:	4b3a      	ldr	r3, [pc, #232]	; (800acdc <UART_SetConfig+0x34c>)
 800abf2:	61bb      	str	r3, [r7, #24]
        break;
 800abf4:	e00c      	b.n	800ac10 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800abf6:	f7fd fe83 	bl	8008900 <HAL_RCC_GetSysClockFreq>
 800abfa:	61b8      	str	r0, [r7, #24]
        break;
 800abfc:	e008      	b.n	800ac10 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac02:	61bb      	str	r3, [r7, #24]
        break;
 800ac04:	e004      	b.n	800ac10 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800ac06:	2300      	movs	r3, #0
 800ac08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	77bb      	strb	r3, [r7, #30]
        break;
 800ac0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ac10:	69bb      	ldr	r3, [r7, #24]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	f000 8085 	beq.w	800ad22 <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ac18:	69bb      	ldr	r3, [r7, #24]
 800ac1a:	005a      	lsls	r2, r3, #1
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	085b      	lsrs	r3, r3, #1
 800ac22:	441a      	add	r2, r3
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	2b0f      	cmp	r3, #15
 800ac34:	d916      	bls.n	800ac64 <UART_SetConfig+0x2d4>
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac3c:	d212      	bcs.n	800ac64 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	b29b      	uxth	r3, r3
 800ac42:	f023 030f 	bic.w	r3, r3, #15
 800ac46:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	085b      	lsrs	r3, r3, #1
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	f003 0307 	and.w	r3, r3, #7
 800ac52:	b29a      	uxth	r2, r3
 800ac54:	89fb      	ldrh	r3, [r7, #14]
 800ac56:	4313      	orrs	r3, r2
 800ac58:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	89fa      	ldrh	r2, [r7, #14]
 800ac60:	60da      	str	r2, [r3, #12]
 800ac62:	e05e      	b.n	800ad22 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 800ac64:	2301      	movs	r3, #1
 800ac66:	77bb      	strb	r3, [r7, #30]
 800ac68:	e05b      	b.n	800ad22 <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ac6a:	7ffb      	ldrb	r3, [r7, #31]
 800ac6c:	2b08      	cmp	r3, #8
 800ac6e:	d837      	bhi.n	800ace0 <UART_SetConfig+0x350>
 800ac70:	a201      	add	r2, pc, #4	; (adr r2, 800ac78 <UART_SetConfig+0x2e8>)
 800ac72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac76:	bf00      	nop
 800ac78:	0800ac9d 	.word	0x0800ac9d
 800ac7c:	0800aca5 	.word	0x0800aca5
 800ac80:	0800acad 	.word	0x0800acad
 800ac84:	0800ace1 	.word	0x0800ace1
 800ac88:	0800acb3 	.word	0x0800acb3
 800ac8c:	0800ace1 	.word	0x0800ace1
 800ac90:	0800ace1 	.word	0x0800ace1
 800ac94:	0800ace1 	.word	0x0800ace1
 800ac98:	0800acbb 	.word	0x0800acbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac9c:	f7fd fea6 	bl	80089ec <HAL_RCC_GetPCLK1Freq>
 800aca0:	61b8      	str	r0, [r7, #24]
        break;
 800aca2:	e022      	b.n	800acea <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aca4:	f7fd fec4 	bl	8008a30 <HAL_RCC_GetPCLK2Freq>
 800aca8:	61b8      	str	r0, [r7, #24]
        break;
 800acaa:	e01e      	b.n	800acea <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800acac:	4b0b      	ldr	r3, [pc, #44]	; (800acdc <UART_SetConfig+0x34c>)
 800acae:	61bb      	str	r3, [r7, #24]
        break;
 800acb0:	e01b      	b.n	800acea <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800acb2:	f7fd fe25 	bl	8008900 <HAL_RCC_GetSysClockFreq>
 800acb6:	61b8      	str	r0, [r7, #24]
        break;
 800acb8:	e017      	b.n	800acea <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800acba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800acbe:	61bb      	str	r3, [r7, #24]
        break;
 800acc0:	e013      	b.n	800acea <UART_SetConfig+0x35a>
 800acc2:	bf00      	nop
 800acc4:	40013800 	.word	0x40013800
 800acc8:	40021000 	.word	0x40021000
 800accc:	40004400 	.word	0x40004400
 800acd0:	40004800 	.word	0x40004800
 800acd4:	40004c00 	.word	0x40004c00
 800acd8:	40005000 	.word	0x40005000
 800acdc:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800ace0:	2300      	movs	r3, #0
 800ace2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ace4:	2301      	movs	r3, #1
 800ace6:	77bb      	strb	r3, [r7, #30]
        break;
 800ace8:	bf00      	nop
    }

    if (pclk != 0U)
 800acea:	69bb      	ldr	r3, [r7, #24]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d018      	beq.n	800ad22 <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	085a      	lsrs	r2, r3, #1
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	441a      	add	r2, r3
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	2b0f      	cmp	r3, #15
 800ad0a:	d908      	bls.n	800ad1e <UART_SetConfig+0x38e>
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad12:	d204      	bcs.n	800ad1e <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	693a      	ldr	r2, [r7, #16]
 800ad1a:	60da      	str	r2, [r3, #12]
 800ad1c:	e001      	b.n	800ad22 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2200      	movs	r2, #0
 800ad26:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800ad2e:	7fbb      	ldrb	r3, [r7, #30]
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3720      	adds	r7, #32
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad44:	f003 0301 	and.w	r3, r3, #1
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d00a      	beq.n	800ad62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	430a      	orrs	r2, r1
 800ad60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad66:	f003 0302 	and.w	r3, r3, #2
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d00a      	beq.n	800ad84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	430a      	orrs	r2, r1
 800ad82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad88:	f003 0304 	and.w	r3, r3, #4
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d00a      	beq.n	800ada6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	430a      	orrs	r2, r1
 800ada4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adaa:	f003 0308 	and.w	r3, r3, #8
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d00a      	beq.n	800adc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	685b      	ldr	r3, [r3, #4]
 800adb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	430a      	orrs	r2, r1
 800adc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adcc:	f003 0310 	and.w	r3, r3, #16
 800add0:	2b00      	cmp	r3, #0
 800add2:	d00a      	beq.n	800adea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	430a      	orrs	r2, r1
 800ade8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adee:	f003 0320 	and.w	r3, r3, #32
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d00a      	beq.n	800ae0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	689b      	ldr	r3, [r3, #8]
 800adfc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	430a      	orrs	r2, r1
 800ae0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d01a      	beq.n	800ae4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	430a      	orrs	r2, r1
 800ae2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae36:	d10a      	bne.n	800ae4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	430a      	orrs	r2, r1
 800ae4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d00a      	beq.n	800ae70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	430a      	orrs	r2, r1
 800ae6e:	605a      	str	r2, [r3, #4]
  }
}
 800ae70:	bf00      	nop
 800ae72:	370c      	adds	r7, #12
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr

0800ae7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b086      	sub	sp, #24
 800ae80:	af02      	add	r7, sp, #8
 800ae82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2200      	movs	r2, #0
 800ae88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ae8c:	f7fa f8f6 	bl	800507c <HAL_GetTick>
 800ae90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f003 0308 	and.w	r3, r3, #8
 800ae9c:	2b08      	cmp	r3, #8
 800ae9e:	d10e      	bne.n	800aebe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aea0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aea4:	9300      	str	r3, [sp, #0]
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 f82d 	bl	800af0e <UART_WaitOnFlagUntilTimeout>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d001      	beq.n	800aebe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aeba:	2303      	movs	r3, #3
 800aebc:	e023      	b.n	800af06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f003 0304 	and.w	r3, r3, #4
 800aec8:	2b04      	cmp	r3, #4
 800aeca:	d10e      	bne.n	800aeea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aecc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aed0:	9300      	str	r3, [sp, #0]
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2200      	movs	r2, #0
 800aed6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 f817 	bl	800af0e <UART_WaitOnFlagUntilTimeout>
 800aee0:	4603      	mov	r3, r0
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d001      	beq.n	800aeea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aee6:	2303      	movs	r3, #3
 800aee8:	e00d      	b.n	800af06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2220      	movs	r2, #32
 800aeee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2220      	movs	r2, #32
 800aef4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2200      	movs	r2, #0
 800aefa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800af04:	2300      	movs	r3, #0
}
 800af06:	4618      	mov	r0, r3
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800af0e:	b580      	push	{r7, lr}
 800af10:	b09c      	sub	sp, #112	; 0x70
 800af12:	af00      	add	r7, sp, #0
 800af14:	60f8      	str	r0, [r7, #12]
 800af16:	60b9      	str	r1, [r7, #8]
 800af18:	603b      	str	r3, [r7, #0]
 800af1a:	4613      	mov	r3, r2
 800af1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af1e:	e0a5      	b.n	800b06c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af26:	f000 80a1 	beq.w	800b06c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af2a:	f7fa f8a7 	bl	800507c <HAL_GetTick>
 800af2e:	4602      	mov	r2, r0
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	1ad3      	subs	r3, r2, r3
 800af34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800af36:	429a      	cmp	r2, r3
 800af38:	d302      	bcc.n	800af40 <UART_WaitOnFlagUntilTimeout+0x32>
 800af3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d13e      	bne.n	800afbe <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af48:	e853 3f00 	ldrex	r3, [r3]
 800af4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800af4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800af54:	667b      	str	r3, [r7, #100]	; 0x64
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	461a      	mov	r2, r3
 800af5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800af60:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800af64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800af66:	e841 2300 	strex	r3, r2, [r1]
 800af6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800af6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d1e6      	bne.n	800af40 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	3308      	adds	r3, #8
 800af78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af7c:	e853 3f00 	ldrex	r3, [r3]
 800af80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800af82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af84:	f023 0301 	bic.w	r3, r3, #1
 800af88:	663b      	str	r3, [r7, #96]	; 0x60
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	3308      	adds	r3, #8
 800af90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800af92:	64ba      	str	r2, [r7, #72]	; 0x48
 800af94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800af98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af9a:	e841 2300 	strex	r3, r2, [r1]
 800af9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800afa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d1e5      	bne.n	800af72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2220      	movs	r2, #32
 800afaa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2220      	movs	r2, #32
 800afb0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2200      	movs	r2, #0
 800afb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800afba:	2303      	movs	r3, #3
 800afbc:	e067      	b.n	800b08e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f003 0304 	and.w	r3, r3, #4
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d04f      	beq.n	800b06c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	69db      	ldr	r3, [r3, #28]
 800afd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800afd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800afda:	d147      	bne.n	800b06c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800afe4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afee:	e853 3f00 	ldrex	r3, [r3]
 800aff2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800affa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	461a      	mov	r2, r3
 800b002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b004:	637b      	str	r3, [r7, #52]	; 0x34
 800b006:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b008:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b00a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b00c:	e841 2300 	strex	r3, r2, [r1]
 800b010:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b014:	2b00      	cmp	r3, #0
 800b016:	d1e6      	bne.n	800afe6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	3308      	adds	r3, #8
 800b01e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	e853 3f00 	ldrex	r3, [r3]
 800b026:	613b      	str	r3, [r7, #16]
   return(result);
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	f023 0301 	bic.w	r3, r3, #1
 800b02e:	66bb      	str	r3, [r7, #104]	; 0x68
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	3308      	adds	r3, #8
 800b036:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b038:	623a      	str	r2, [r7, #32]
 800b03a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b03c:	69f9      	ldr	r1, [r7, #28]
 800b03e:	6a3a      	ldr	r2, [r7, #32]
 800b040:	e841 2300 	strex	r3, r2, [r1]
 800b044:	61bb      	str	r3, [r7, #24]
   return(result);
 800b046:	69bb      	ldr	r3, [r7, #24]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d1e5      	bne.n	800b018 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2220      	movs	r2, #32
 800b050:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2220      	movs	r2, #32
 800b056:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2220      	movs	r2, #32
 800b05c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2200      	movs	r2, #0
 800b064:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b068:	2303      	movs	r3, #3
 800b06a:	e010      	b.n	800b08e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	69da      	ldr	r2, [r3, #28]
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	4013      	ands	r3, r2
 800b076:	68ba      	ldr	r2, [r7, #8]
 800b078:	429a      	cmp	r2, r3
 800b07a:	bf0c      	ite	eq
 800b07c:	2301      	moveq	r3, #1
 800b07e:	2300      	movne	r3, #0
 800b080:	b2db      	uxtb	r3, r3
 800b082:	461a      	mov	r2, r3
 800b084:	79fb      	ldrb	r3, [r7, #7]
 800b086:	429a      	cmp	r2, r3
 800b088:	f43f af4a 	beq.w	800af20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b08c:	2300      	movs	r3, #0
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3770      	adds	r7, #112	; 0x70
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}

0800b096 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800b096:	b580      	push	{r7, lr}
 800b098:	b086      	sub	sp, #24
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	60f8      	str	r0, [r7, #12]
 800b09e:	60b9      	str	r1, [r7, #8]
 800b0a0:	607a      	str	r2, [r7, #4]
 800b0a2:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d101      	bne.n	800b0ae <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	e056      	b.n	800b15c <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d106      	bne.n	800b0c4 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800b0be:	68f8      	ldr	r0, [r7, #12]
 800b0c0:	f7f9 fd8e 	bl	8004be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2224      	movs	r2, #36	; 0x24
 800b0c8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	681a      	ldr	r2, [r3, #0]
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f022 0201 	bic.w	r2, r2, #1
 800b0d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b0da:	68f8      	ldr	r0, [r7, #12]
 800b0dc:	f7ff fc58 	bl	800a990 <UART_SetConfig>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d101      	bne.n	800b0ea <HAL_RS485Ex_Init+0x54>
  {
    return HAL_ERROR;
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	e038      	b.n	800b15c <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d002      	beq.n	800b0f8 <HAL_RS485Ex_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800b0f2:	68f8      	ldr	r0, [r7, #12]
 800b0f4:	f7ff fe20 	bl	800ad38 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	689a      	ldr	r2, [r3, #8]
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b106:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	689b      	ldr	r3, [r3, #8]
 800b10e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	68ba      	ldr	r2, [r7, #8]
 800b118:	430a      	orrs	r2, r1
 800b11a:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	055b      	lsls	r3, r3, #21
 800b120:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	041b      	lsls	r3, r3, #16
 800b126:	697a      	ldr	r2, [r7, #20]
 800b128:	4313      	orrs	r3, r2
 800b12a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 800b136:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800b13a:	68fa      	ldr	r2, [r7, #12]
 800b13c:	6812      	ldr	r2, [r2, #0]
 800b13e:	6979      	ldr	r1, [r7, #20]
 800b140:	430b      	orrs	r3, r1
 800b142:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	681a      	ldr	r2, [r3, #0]
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f042 0201 	orr.w	r2, r2, #1
 800b152:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b154:	68f8      	ldr	r0, [r7, #12]
 800b156:	f7ff fe91 	bl	800ae7c <UART_CheckIdleState>
 800b15a:	4603      	mov	r3, r0
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3718      	adds	r7, #24
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}

0800b164 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b164:	b480      	push	{r7}
 800b166:	b085      	sub	sp, #20
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b16c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800b170:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b178:	b29a      	uxth	r2, r3
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	43db      	mvns	r3, r3
 800b180:	b29b      	uxth	r3, r3
 800b182:	4013      	ands	r3, r2
 800b184:	b29a      	uxth	r2, r3
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b18c:	2300      	movs	r3, #0
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3714      	adds	r7, #20
 800b192:	46bd      	mov	sp, r7
 800b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b198:	4770      	bx	lr

0800b19a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b19a:	b084      	sub	sp, #16
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	f107 0014 	add.w	r0, r7, #20
 800b1a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800b1cc:	2300      	movs	r3, #0
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	370c      	adds	r7, #12
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	b004      	add	sp, #16
 800b1da:	4770      	bx	lr

0800b1dc <__errno>:
 800b1dc:	4b01      	ldr	r3, [pc, #4]	; (800b1e4 <__errno+0x8>)
 800b1de:	6818      	ldr	r0, [r3, #0]
 800b1e0:	4770      	bx	lr
 800b1e2:	bf00      	nop
 800b1e4:	20000098 	.word	0x20000098

0800b1e8 <__libc_init_array>:
 800b1e8:	b570      	push	{r4, r5, r6, lr}
 800b1ea:	4d0d      	ldr	r5, [pc, #52]	; (800b220 <__libc_init_array+0x38>)
 800b1ec:	4c0d      	ldr	r4, [pc, #52]	; (800b224 <__libc_init_array+0x3c>)
 800b1ee:	1b64      	subs	r4, r4, r5
 800b1f0:	10a4      	asrs	r4, r4, #2
 800b1f2:	2600      	movs	r6, #0
 800b1f4:	42a6      	cmp	r6, r4
 800b1f6:	d109      	bne.n	800b20c <__libc_init_array+0x24>
 800b1f8:	4d0b      	ldr	r5, [pc, #44]	; (800b228 <__libc_init_array+0x40>)
 800b1fa:	4c0c      	ldr	r4, [pc, #48]	; (800b22c <__libc_init_array+0x44>)
 800b1fc:	f001 f94e 	bl	800c49c <_init>
 800b200:	1b64      	subs	r4, r4, r5
 800b202:	10a4      	asrs	r4, r4, #2
 800b204:	2600      	movs	r6, #0
 800b206:	42a6      	cmp	r6, r4
 800b208:	d105      	bne.n	800b216 <__libc_init_array+0x2e>
 800b20a:	bd70      	pop	{r4, r5, r6, pc}
 800b20c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b210:	4798      	blx	r3
 800b212:	3601      	adds	r6, #1
 800b214:	e7ee      	b.n	800b1f4 <__libc_init_array+0xc>
 800b216:	f855 3b04 	ldr.w	r3, [r5], #4
 800b21a:	4798      	blx	r3
 800b21c:	3601      	adds	r6, #1
 800b21e:	e7f2      	b.n	800b206 <__libc_init_array+0x1e>
 800b220:	0800c680 	.word	0x0800c680
 800b224:	0800c680 	.word	0x0800c680
 800b228:	0800c680 	.word	0x0800c680
 800b22c:	0800c684 	.word	0x0800c684

0800b230 <memset>:
 800b230:	4402      	add	r2, r0
 800b232:	4603      	mov	r3, r0
 800b234:	4293      	cmp	r3, r2
 800b236:	d100      	bne.n	800b23a <memset+0xa>
 800b238:	4770      	bx	lr
 800b23a:	f803 1b01 	strb.w	r1, [r3], #1
 800b23e:	e7f9      	b.n	800b234 <memset+0x4>

0800b240 <swapfunc>:
 800b240:	2b02      	cmp	r3, #2
 800b242:	b510      	push	{r4, lr}
 800b244:	d00a      	beq.n	800b25c <swapfunc+0x1c>
 800b246:	0892      	lsrs	r2, r2, #2
 800b248:	3a01      	subs	r2, #1
 800b24a:	6803      	ldr	r3, [r0, #0]
 800b24c:	680c      	ldr	r4, [r1, #0]
 800b24e:	f840 4b04 	str.w	r4, [r0], #4
 800b252:	2a00      	cmp	r2, #0
 800b254:	f841 3b04 	str.w	r3, [r1], #4
 800b258:	dcf6      	bgt.n	800b248 <swapfunc+0x8>
 800b25a:	bd10      	pop	{r4, pc}
 800b25c:	4402      	add	r2, r0
 800b25e:	780c      	ldrb	r4, [r1, #0]
 800b260:	7803      	ldrb	r3, [r0, #0]
 800b262:	f800 4b01 	strb.w	r4, [r0], #1
 800b266:	f801 3b01 	strb.w	r3, [r1], #1
 800b26a:	1a13      	subs	r3, r2, r0
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	dcf6      	bgt.n	800b25e <swapfunc+0x1e>
 800b270:	e7f3      	b.n	800b25a <swapfunc+0x1a>

0800b272 <med3.isra.0>:
 800b272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b274:	460f      	mov	r7, r1
 800b276:	4614      	mov	r4, r2
 800b278:	4606      	mov	r6, r0
 800b27a:	461d      	mov	r5, r3
 800b27c:	4798      	blx	r3
 800b27e:	2800      	cmp	r0, #0
 800b280:	4621      	mov	r1, r4
 800b282:	4638      	mov	r0, r7
 800b284:	da0c      	bge.n	800b2a0 <med3.isra.0+0x2e>
 800b286:	47a8      	blx	r5
 800b288:	2800      	cmp	r0, #0
 800b28a:	da02      	bge.n	800b292 <med3.isra.0+0x20>
 800b28c:	463c      	mov	r4, r7
 800b28e:	4620      	mov	r0, r4
 800b290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b292:	4621      	mov	r1, r4
 800b294:	4630      	mov	r0, r6
 800b296:	47a8      	blx	r5
 800b298:	2800      	cmp	r0, #0
 800b29a:	dbf8      	blt.n	800b28e <med3.isra.0+0x1c>
 800b29c:	4634      	mov	r4, r6
 800b29e:	e7f6      	b.n	800b28e <med3.isra.0+0x1c>
 800b2a0:	47a8      	blx	r5
 800b2a2:	2800      	cmp	r0, #0
 800b2a4:	dcf2      	bgt.n	800b28c <med3.isra.0+0x1a>
 800b2a6:	4621      	mov	r1, r4
 800b2a8:	4630      	mov	r0, r6
 800b2aa:	47a8      	blx	r5
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	daee      	bge.n	800b28e <med3.isra.0+0x1c>
 800b2b0:	e7f4      	b.n	800b29c <med3.isra.0+0x2a>

0800b2b2 <qsort>:
 800b2b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b6:	469a      	mov	sl, r3
 800b2b8:	ea40 0302 	orr.w	r3, r0, r2
 800b2bc:	079b      	lsls	r3, r3, #30
 800b2be:	b097      	sub	sp, #92	; 0x5c
 800b2c0:	4606      	mov	r6, r0
 800b2c2:	4614      	mov	r4, r2
 800b2c4:	d11a      	bne.n	800b2fc <qsort+0x4a>
 800b2c6:	f1b2 0804 	subs.w	r8, r2, #4
 800b2ca:	bf18      	it	ne
 800b2cc:	f04f 0801 	movne.w	r8, #1
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	9302      	str	r3, [sp, #8]
 800b2d4:	1933      	adds	r3, r6, r4
 800b2d6:	fb04 f701 	mul.w	r7, r4, r1
 800b2da:	9301      	str	r3, [sp, #4]
 800b2dc:	2906      	cmp	r1, #6
 800b2de:	eb06 0307 	add.w	r3, r6, r7
 800b2e2:	9303      	str	r3, [sp, #12]
 800b2e4:	d82a      	bhi.n	800b33c <qsort+0x8a>
 800b2e6:	9b01      	ldr	r3, [sp, #4]
 800b2e8:	9a03      	ldr	r2, [sp, #12]
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d310      	bcc.n	800b310 <qsort+0x5e>
 800b2ee:	9b02      	ldr	r3, [sp, #8]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	f040 811f 	bne.w	800b534 <qsort+0x282>
 800b2f6:	b017      	add	sp, #92	; 0x5c
 800b2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2fc:	f04f 0802 	mov.w	r8, #2
 800b300:	e7e6      	b.n	800b2d0 <qsort+0x1e>
 800b302:	4643      	mov	r3, r8
 800b304:	4622      	mov	r2, r4
 800b306:	4639      	mov	r1, r7
 800b308:	4628      	mov	r0, r5
 800b30a:	f7ff ff99 	bl	800b240 <swapfunc>
 800b30e:	e00e      	b.n	800b32e <qsort+0x7c>
 800b310:	9d01      	ldr	r5, [sp, #4]
 800b312:	e00d      	b.n	800b330 <qsort+0x7e>
 800b314:	1b2f      	subs	r7, r5, r4
 800b316:	4629      	mov	r1, r5
 800b318:	4638      	mov	r0, r7
 800b31a:	47d0      	blx	sl
 800b31c:	2800      	cmp	r0, #0
 800b31e:	dd09      	ble.n	800b334 <qsort+0x82>
 800b320:	f1b8 0f00 	cmp.w	r8, #0
 800b324:	d1ed      	bne.n	800b302 <qsort+0x50>
 800b326:	682b      	ldr	r3, [r5, #0]
 800b328:	683a      	ldr	r2, [r7, #0]
 800b32a:	602a      	str	r2, [r5, #0]
 800b32c:	603b      	str	r3, [r7, #0]
 800b32e:	463d      	mov	r5, r7
 800b330:	42ae      	cmp	r6, r5
 800b332:	d3ef      	bcc.n	800b314 <qsort+0x62>
 800b334:	9b01      	ldr	r3, [sp, #4]
 800b336:	4423      	add	r3, r4
 800b338:	9301      	str	r3, [sp, #4]
 800b33a:	e7d4      	b.n	800b2e6 <qsort+0x34>
 800b33c:	ea4f 0951 	mov.w	r9, r1, lsr #1
 800b340:	1b3f      	subs	r7, r7, r4
 800b342:	2907      	cmp	r1, #7
 800b344:	fb04 6909 	mla	r9, r4, r9, r6
 800b348:	4437      	add	r7, r6
 800b34a:	d022      	beq.n	800b392 <qsort+0xe0>
 800b34c:	2928      	cmp	r1, #40	; 0x28
 800b34e:	d945      	bls.n	800b3dc <qsort+0x12a>
 800b350:	08c9      	lsrs	r1, r1, #3
 800b352:	fb04 f501 	mul.w	r5, r4, r1
 800b356:	4653      	mov	r3, sl
 800b358:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 800b35c:	1971      	adds	r1, r6, r5
 800b35e:	4630      	mov	r0, r6
 800b360:	f7ff ff87 	bl	800b272 <med3.isra.0>
 800b364:	4649      	mov	r1, r9
 800b366:	eb09 0205 	add.w	r2, r9, r5
 800b36a:	4653      	mov	r3, sl
 800b36c:	4683      	mov	fp, r0
 800b36e:	1b48      	subs	r0, r1, r5
 800b370:	f7ff ff7f 	bl	800b272 <med3.isra.0>
 800b374:	463a      	mov	r2, r7
 800b376:	4681      	mov	r9, r0
 800b378:	4653      	mov	r3, sl
 800b37a:	1b79      	subs	r1, r7, r5
 800b37c:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 800b380:	f7ff ff77 	bl	800b272 <med3.isra.0>
 800b384:	4602      	mov	r2, r0
 800b386:	4649      	mov	r1, r9
 800b388:	4653      	mov	r3, sl
 800b38a:	4658      	mov	r0, fp
 800b38c:	f7ff ff71 	bl	800b272 <med3.isra.0>
 800b390:	4681      	mov	r9, r0
 800b392:	f1b8 0f00 	cmp.w	r8, #0
 800b396:	d124      	bne.n	800b3e2 <qsort+0x130>
 800b398:	6833      	ldr	r3, [r6, #0]
 800b39a:	f8d9 2000 	ldr.w	r2, [r9]
 800b39e:	6032      	str	r2, [r6, #0]
 800b3a0:	f8c9 3000 	str.w	r3, [r9]
 800b3a4:	eb06 0b04 	add.w	fp, r6, r4
 800b3a8:	46b9      	mov	r9, r7
 800b3aa:	465d      	mov	r5, fp
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	45bb      	cmp	fp, r7
 800b3b0:	d835      	bhi.n	800b41e <qsort+0x16c>
 800b3b2:	4631      	mov	r1, r6
 800b3b4:	4658      	mov	r0, fp
 800b3b6:	9304      	str	r3, [sp, #16]
 800b3b8:	47d0      	blx	sl
 800b3ba:	2800      	cmp	r0, #0
 800b3bc:	9b04      	ldr	r3, [sp, #16]
 800b3be:	dc3e      	bgt.n	800b43e <qsort+0x18c>
 800b3c0:	d10a      	bne.n	800b3d8 <qsort+0x126>
 800b3c2:	f1b8 0f00 	cmp.w	r8, #0
 800b3c6:	d113      	bne.n	800b3f0 <qsort+0x13e>
 800b3c8:	682b      	ldr	r3, [r5, #0]
 800b3ca:	f8db 2000 	ldr.w	r2, [fp]
 800b3ce:	602a      	str	r2, [r5, #0]
 800b3d0:	f8cb 3000 	str.w	r3, [fp]
 800b3d4:	4425      	add	r5, r4
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	44a3      	add	fp, r4
 800b3da:	e7e8      	b.n	800b3ae <qsort+0xfc>
 800b3dc:	463a      	mov	r2, r7
 800b3de:	46b3      	mov	fp, r6
 800b3e0:	e7d1      	b.n	800b386 <qsort+0xd4>
 800b3e2:	4643      	mov	r3, r8
 800b3e4:	4622      	mov	r2, r4
 800b3e6:	4649      	mov	r1, r9
 800b3e8:	4630      	mov	r0, r6
 800b3ea:	f7ff ff29 	bl	800b240 <swapfunc>
 800b3ee:	e7d9      	b.n	800b3a4 <qsort+0xf2>
 800b3f0:	4643      	mov	r3, r8
 800b3f2:	4622      	mov	r2, r4
 800b3f4:	4659      	mov	r1, fp
 800b3f6:	4628      	mov	r0, r5
 800b3f8:	f7ff ff22 	bl	800b240 <swapfunc>
 800b3fc:	e7ea      	b.n	800b3d4 <qsort+0x122>
 800b3fe:	d10b      	bne.n	800b418 <qsort+0x166>
 800b400:	f1b8 0f00 	cmp.w	r8, #0
 800b404:	d114      	bne.n	800b430 <qsort+0x17e>
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	f8d9 2000 	ldr.w	r2, [r9]
 800b40c:	603a      	str	r2, [r7, #0]
 800b40e:	f8c9 3000 	str.w	r3, [r9]
 800b412:	eba9 0904 	sub.w	r9, r9, r4
 800b416:	2301      	movs	r3, #1
 800b418:	9f04      	ldr	r7, [sp, #16]
 800b41a:	45bb      	cmp	fp, r7
 800b41c:	d90f      	bls.n	800b43e <qsort+0x18c>
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d143      	bne.n	800b4aa <qsort+0x1f8>
 800b422:	9b01      	ldr	r3, [sp, #4]
 800b424:	9a03      	ldr	r2, [sp, #12]
 800b426:	4293      	cmp	r3, r2
 800b428:	f4bf af61 	bcs.w	800b2ee <qsort+0x3c>
 800b42c:	9d01      	ldr	r5, [sp, #4]
 800b42e:	e036      	b.n	800b49e <qsort+0x1ec>
 800b430:	4643      	mov	r3, r8
 800b432:	4622      	mov	r2, r4
 800b434:	4649      	mov	r1, r9
 800b436:	4638      	mov	r0, r7
 800b438:	f7ff ff02 	bl	800b240 <swapfunc>
 800b43c:	e7e9      	b.n	800b412 <qsort+0x160>
 800b43e:	4631      	mov	r1, r6
 800b440:	4638      	mov	r0, r7
 800b442:	9305      	str	r3, [sp, #20]
 800b444:	47d0      	blx	sl
 800b446:	1b3b      	subs	r3, r7, r4
 800b448:	2800      	cmp	r0, #0
 800b44a:	9304      	str	r3, [sp, #16]
 800b44c:	9b05      	ldr	r3, [sp, #20]
 800b44e:	dad6      	bge.n	800b3fe <qsort+0x14c>
 800b450:	f1b8 0f00 	cmp.w	r8, #0
 800b454:	d006      	beq.n	800b464 <qsort+0x1b2>
 800b456:	4643      	mov	r3, r8
 800b458:	4622      	mov	r2, r4
 800b45a:	4639      	mov	r1, r7
 800b45c:	4658      	mov	r0, fp
 800b45e:	f7ff feef 	bl	800b240 <swapfunc>
 800b462:	e005      	b.n	800b470 <qsort+0x1be>
 800b464:	f8db 3000 	ldr.w	r3, [fp]
 800b468:	683a      	ldr	r2, [r7, #0]
 800b46a:	f8cb 2000 	str.w	r2, [fp]
 800b46e:	603b      	str	r3, [r7, #0]
 800b470:	9f04      	ldr	r7, [sp, #16]
 800b472:	e7b0      	b.n	800b3d6 <qsort+0x124>
 800b474:	4643      	mov	r3, r8
 800b476:	4622      	mov	r2, r4
 800b478:	4639      	mov	r1, r7
 800b47a:	4628      	mov	r0, r5
 800b47c:	f7ff fee0 	bl	800b240 <swapfunc>
 800b480:	e00c      	b.n	800b49c <qsort+0x1ea>
 800b482:	1b2f      	subs	r7, r5, r4
 800b484:	4629      	mov	r1, r5
 800b486:	4638      	mov	r0, r7
 800b488:	47d0      	blx	sl
 800b48a:	2800      	cmp	r0, #0
 800b48c:	dd09      	ble.n	800b4a2 <qsort+0x1f0>
 800b48e:	f1b8 0f00 	cmp.w	r8, #0
 800b492:	d1ef      	bne.n	800b474 <qsort+0x1c2>
 800b494:	682b      	ldr	r3, [r5, #0]
 800b496:	683a      	ldr	r2, [r7, #0]
 800b498:	602a      	str	r2, [r5, #0]
 800b49a:	603b      	str	r3, [r7, #0]
 800b49c:	463d      	mov	r5, r7
 800b49e:	42ae      	cmp	r6, r5
 800b4a0:	d3ef      	bcc.n	800b482 <qsort+0x1d0>
 800b4a2:	9b01      	ldr	r3, [sp, #4]
 800b4a4:	4423      	add	r3, r4
 800b4a6:	9301      	str	r3, [sp, #4]
 800b4a8:	e7bb      	b.n	800b422 <qsort+0x170>
 800b4aa:	ebab 0305 	sub.w	r3, fp, r5
 800b4ae:	1baa      	subs	r2, r5, r6
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	bfa8      	it	ge
 800b4b4:	461a      	movge	r2, r3
 800b4b6:	9301      	str	r3, [sp, #4]
 800b4b8:	b12a      	cbz	r2, 800b4c6 <qsort+0x214>
 800b4ba:	4643      	mov	r3, r8
 800b4bc:	ebab 0102 	sub.w	r1, fp, r2
 800b4c0:	4630      	mov	r0, r6
 800b4c2:	f7ff febd 	bl	800b240 <swapfunc>
 800b4c6:	9b03      	ldr	r3, [sp, #12]
 800b4c8:	eba3 0209 	sub.w	r2, r3, r9
 800b4cc:	eba9 0707 	sub.w	r7, r9, r7
 800b4d0:	1b12      	subs	r2, r2, r4
 800b4d2:	42ba      	cmp	r2, r7
 800b4d4:	bf28      	it	cs
 800b4d6:	463a      	movcs	r2, r7
 800b4d8:	b12a      	cbz	r2, 800b4e6 <qsort+0x234>
 800b4da:	9903      	ldr	r1, [sp, #12]
 800b4dc:	4643      	mov	r3, r8
 800b4de:	1a89      	subs	r1, r1, r2
 800b4e0:	4658      	mov	r0, fp
 800b4e2:	f7ff fead 	bl	800b240 <swapfunc>
 800b4e6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b4ea:	9b03      	ldr	r3, [sp, #12]
 800b4ec:	454f      	cmp	r7, r9
 800b4ee:	eba3 0007 	sub.w	r0, r3, r7
 800b4f2:	d904      	bls.n	800b4fe <qsort+0x24c>
 800b4f4:	4633      	mov	r3, r6
 800b4f6:	46b9      	mov	r9, r7
 800b4f8:	9f01      	ldr	r7, [sp, #4]
 800b4fa:	4606      	mov	r6, r0
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	42a7      	cmp	r7, r4
 800b500:	d921      	bls.n	800b546 <qsort+0x294>
 800b502:	fbb7 f1f4 	udiv	r1, r7, r4
 800b506:	9b02      	ldr	r3, [sp, #8]
 800b508:	2b07      	cmp	r3, #7
 800b50a:	d80d      	bhi.n	800b528 <qsort+0x276>
 800b50c:	fbb9 f7f4 	udiv	r7, r9, r4
 800b510:	aa16      	add	r2, sp, #88	; 0x58
 800b512:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b516:	f843 6c40 	str.w	r6, [r3, #-64]
 800b51a:	f843 7c3c 	str.w	r7, [r3, #-60]
 800b51e:	9b02      	ldr	r3, [sp, #8]
 800b520:	3301      	adds	r3, #1
 800b522:	9302      	str	r3, [sp, #8]
 800b524:	4606      	mov	r6, r0
 800b526:	e6d5      	b.n	800b2d4 <qsort+0x22>
 800b528:	4653      	mov	r3, sl
 800b52a:	4622      	mov	r2, r4
 800b52c:	f7ff fec1 	bl	800b2b2 <qsort>
 800b530:	45a1      	cmp	r9, r4
 800b532:	d80b      	bhi.n	800b54c <qsort+0x29a>
 800b534:	9b02      	ldr	r3, [sp, #8]
 800b536:	aa16      	add	r2, sp, #88	; 0x58
 800b538:	3b01      	subs	r3, #1
 800b53a:	9302      	str	r3, [sp, #8]
 800b53c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b540:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 800b544:	e7ee      	b.n	800b524 <qsort+0x272>
 800b546:	45a1      	cmp	r9, r4
 800b548:	f67f aed1 	bls.w	800b2ee <qsort+0x3c>
 800b54c:	fbb9 f1f4 	udiv	r1, r9, r4
 800b550:	4630      	mov	r0, r6
 800b552:	e7e7      	b.n	800b524 <qsort+0x272>

0800b554 <sniprintf>:
 800b554:	b40c      	push	{r2, r3}
 800b556:	b530      	push	{r4, r5, lr}
 800b558:	4b17      	ldr	r3, [pc, #92]	; (800b5b8 <sniprintf+0x64>)
 800b55a:	1e0c      	subs	r4, r1, #0
 800b55c:	681d      	ldr	r5, [r3, #0]
 800b55e:	b09d      	sub	sp, #116	; 0x74
 800b560:	da08      	bge.n	800b574 <sniprintf+0x20>
 800b562:	238b      	movs	r3, #139	; 0x8b
 800b564:	602b      	str	r3, [r5, #0]
 800b566:	f04f 30ff 	mov.w	r0, #4294967295
 800b56a:	b01d      	add	sp, #116	; 0x74
 800b56c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b570:	b002      	add	sp, #8
 800b572:	4770      	bx	lr
 800b574:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b578:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b57c:	bf14      	ite	ne
 800b57e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b582:	4623      	moveq	r3, r4
 800b584:	9304      	str	r3, [sp, #16]
 800b586:	9307      	str	r3, [sp, #28]
 800b588:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b58c:	9002      	str	r0, [sp, #8]
 800b58e:	9006      	str	r0, [sp, #24]
 800b590:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b594:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b596:	ab21      	add	r3, sp, #132	; 0x84
 800b598:	a902      	add	r1, sp, #8
 800b59a:	4628      	mov	r0, r5
 800b59c:	9301      	str	r3, [sp, #4]
 800b59e:	f000 f869 	bl	800b674 <_svfiprintf_r>
 800b5a2:	1c43      	adds	r3, r0, #1
 800b5a4:	bfbc      	itt	lt
 800b5a6:	238b      	movlt	r3, #139	; 0x8b
 800b5a8:	602b      	strlt	r3, [r5, #0]
 800b5aa:	2c00      	cmp	r4, #0
 800b5ac:	d0dd      	beq.n	800b56a <sniprintf+0x16>
 800b5ae:	9b02      	ldr	r3, [sp, #8]
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	701a      	strb	r2, [r3, #0]
 800b5b4:	e7d9      	b.n	800b56a <sniprintf+0x16>
 800b5b6:	bf00      	nop
 800b5b8:	20000098 	.word	0x20000098

0800b5bc <__ssputs_r>:
 800b5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5c0:	688e      	ldr	r6, [r1, #8]
 800b5c2:	429e      	cmp	r6, r3
 800b5c4:	4682      	mov	sl, r0
 800b5c6:	460c      	mov	r4, r1
 800b5c8:	4690      	mov	r8, r2
 800b5ca:	461f      	mov	r7, r3
 800b5cc:	d838      	bhi.n	800b640 <__ssputs_r+0x84>
 800b5ce:	898a      	ldrh	r2, [r1, #12]
 800b5d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b5d4:	d032      	beq.n	800b63c <__ssputs_r+0x80>
 800b5d6:	6825      	ldr	r5, [r4, #0]
 800b5d8:	6909      	ldr	r1, [r1, #16]
 800b5da:	eba5 0901 	sub.w	r9, r5, r1
 800b5de:	6965      	ldr	r5, [r4, #20]
 800b5e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b5e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b5e8:	3301      	adds	r3, #1
 800b5ea:	444b      	add	r3, r9
 800b5ec:	106d      	asrs	r5, r5, #1
 800b5ee:	429d      	cmp	r5, r3
 800b5f0:	bf38      	it	cc
 800b5f2:	461d      	movcc	r5, r3
 800b5f4:	0553      	lsls	r3, r2, #21
 800b5f6:	d531      	bpl.n	800b65c <__ssputs_r+0xa0>
 800b5f8:	4629      	mov	r1, r5
 800b5fa:	f000 fb47 	bl	800bc8c <_malloc_r>
 800b5fe:	4606      	mov	r6, r0
 800b600:	b950      	cbnz	r0, 800b618 <__ssputs_r+0x5c>
 800b602:	230c      	movs	r3, #12
 800b604:	f8ca 3000 	str.w	r3, [sl]
 800b608:	89a3      	ldrh	r3, [r4, #12]
 800b60a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b60e:	81a3      	strh	r3, [r4, #12]
 800b610:	f04f 30ff 	mov.w	r0, #4294967295
 800b614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b618:	6921      	ldr	r1, [r4, #16]
 800b61a:	464a      	mov	r2, r9
 800b61c:	f000 fabe 	bl	800bb9c <memcpy>
 800b620:	89a3      	ldrh	r3, [r4, #12]
 800b622:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b62a:	81a3      	strh	r3, [r4, #12]
 800b62c:	6126      	str	r6, [r4, #16]
 800b62e:	6165      	str	r5, [r4, #20]
 800b630:	444e      	add	r6, r9
 800b632:	eba5 0509 	sub.w	r5, r5, r9
 800b636:	6026      	str	r6, [r4, #0]
 800b638:	60a5      	str	r5, [r4, #8]
 800b63a:	463e      	mov	r6, r7
 800b63c:	42be      	cmp	r6, r7
 800b63e:	d900      	bls.n	800b642 <__ssputs_r+0x86>
 800b640:	463e      	mov	r6, r7
 800b642:	4632      	mov	r2, r6
 800b644:	6820      	ldr	r0, [r4, #0]
 800b646:	4641      	mov	r1, r8
 800b648:	f000 fab6 	bl	800bbb8 <memmove>
 800b64c:	68a3      	ldr	r3, [r4, #8]
 800b64e:	6822      	ldr	r2, [r4, #0]
 800b650:	1b9b      	subs	r3, r3, r6
 800b652:	4432      	add	r2, r6
 800b654:	60a3      	str	r3, [r4, #8]
 800b656:	6022      	str	r2, [r4, #0]
 800b658:	2000      	movs	r0, #0
 800b65a:	e7db      	b.n	800b614 <__ssputs_r+0x58>
 800b65c:	462a      	mov	r2, r5
 800b65e:	f000 fb6f 	bl	800bd40 <_realloc_r>
 800b662:	4606      	mov	r6, r0
 800b664:	2800      	cmp	r0, #0
 800b666:	d1e1      	bne.n	800b62c <__ssputs_r+0x70>
 800b668:	6921      	ldr	r1, [r4, #16]
 800b66a:	4650      	mov	r0, sl
 800b66c:	f000 fabe 	bl	800bbec <_free_r>
 800b670:	e7c7      	b.n	800b602 <__ssputs_r+0x46>
	...

0800b674 <_svfiprintf_r>:
 800b674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b678:	4698      	mov	r8, r3
 800b67a:	898b      	ldrh	r3, [r1, #12]
 800b67c:	061b      	lsls	r3, r3, #24
 800b67e:	b09d      	sub	sp, #116	; 0x74
 800b680:	4607      	mov	r7, r0
 800b682:	460d      	mov	r5, r1
 800b684:	4614      	mov	r4, r2
 800b686:	d50e      	bpl.n	800b6a6 <_svfiprintf_r+0x32>
 800b688:	690b      	ldr	r3, [r1, #16]
 800b68a:	b963      	cbnz	r3, 800b6a6 <_svfiprintf_r+0x32>
 800b68c:	2140      	movs	r1, #64	; 0x40
 800b68e:	f000 fafd 	bl	800bc8c <_malloc_r>
 800b692:	6028      	str	r0, [r5, #0]
 800b694:	6128      	str	r0, [r5, #16]
 800b696:	b920      	cbnz	r0, 800b6a2 <_svfiprintf_r+0x2e>
 800b698:	230c      	movs	r3, #12
 800b69a:	603b      	str	r3, [r7, #0]
 800b69c:	f04f 30ff 	mov.w	r0, #4294967295
 800b6a0:	e0d1      	b.n	800b846 <_svfiprintf_r+0x1d2>
 800b6a2:	2340      	movs	r3, #64	; 0x40
 800b6a4:	616b      	str	r3, [r5, #20]
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	9309      	str	r3, [sp, #36]	; 0x24
 800b6aa:	2320      	movs	r3, #32
 800b6ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b6b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6b4:	2330      	movs	r3, #48	; 0x30
 800b6b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b860 <_svfiprintf_r+0x1ec>
 800b6ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6be:	f04f 0901 	mov.w	r9, #1
 800b6c2:	4623      	mov	r3, r4
 800b6c4:	469a      	mov	sl, r3
 800b6c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6ca:	b10a      	cbz	r2, 800b6d0 <_svfiprintf_r+0x5c>
 800b6cc:	2a25      	cmp	r2, #37	; 0x25
 800b6ce:	d1f9      	bne.n	800b6c4 <_svfiprintf_r+0x50>
 800b6d0:	ebba 0b04 	subs.w	fp, sl, r4
 800b6d4:	d00b      	beq.n	800b6ee <_svfiprintf_r+0x7a>
 800b6d6:	465b      	mov	r3, fp
 800b6d8:	4622      	mov	r2, r4
 800b6da:	4629      	mov	r1, r5
 800b6dc:	4638      	mov	r0, r7
 800b6de:	f7ff ff6d 	bl	800b5bc <__ssputs_r>
 800b6e2:	3001      	adds	r0, #1
 800b6e4:	f000 80aa 	beq.w	800b83c <_svfiprintf_r+0x1c8>
 800b6e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6ea:	445a      	add	r2, fp
 800b6ec:	9209      	str	r2, [sp, #36]	; 0x24
 800b6ee:	f89a 3000 	ldrb.w	r3, [sl]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	f000 80a2 	beq.w	800b83c <_svfiprintf_r+0x1c8>
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b6fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b702:	f10a 0a01 	add.w	sl, sl, #1
 800b706:	9304      	str	r3, [sp, #16]
 800b708:	9307      	str	r3, [sp, #28]
 800b70a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b70e:	931a      	str	r3, [sp, #104]	; 0x68
 800b710:	4654      	mov	r4, sl
 800b712:	2205      	movs	r2, #5
 800b714:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b718:	4851      	ldr	r0, [pc, #324]	; (800b860 <_svfiprintf_r+0x1ec>)
 800b71a:	f7f4 fd61 	bl	80001e0 <memchr>
 800b71e:	9a04      	ldr	r2, [sp, #16]
 800b720:	b9d8      	cbnz	r0, 800b75a <_svfiprintf_r+0xe6>
 800b722:	06d0      	lsls	r0, r2, #27
 800b724:	bf44      	itt	mi
 800b726:	2320      	movmi	r3, #32
 800b728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b72c:	0711      	lsls	r1, r2, #28
 800b72e:	bf44      	itt	mi
 800b730:	232b      	movmi	r3, #43	; 0x2b
 800b732:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b736:	f89a 3000 	ldrb.w	r3, [sl]
 800b73a:	2b2a      	cmp	r3, #42	; 0x2a
 800b73c:	d015      	beq.n	800b76a <_svfiprintf_r+0xf6>
 800b73e:	9a07      	ldr	r2, [sp, #28]
 800b740:	4654      	mov	r4, sl
 800b742:	2000      	movs	r0, #0
 800b744:	f04f 0c0a 	mov.w	ip, #10
 800b748:	4621      	mov	r1, r4
 800b74a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b74e:	3b30      	subs	r3, #48	; 0x30
 800b750:	2b09      	cmp	r3, #9
 800b752:	d94e      	bls.n	800b7f2 <_svfiprintf_r+0x17e>
 800b754:	b1b0      	cbz	r0, 800b784 <_svfiprintf_r+0x110>
 800b756:	9207      	str	r2, [sp, #28]
 800b758:	e014      	b.n	800b784 <_svfiprintf_r+0x110>
 800b75a:	eba0 0308 	sub.w	r3, r0, r8
 800b75e:	fa09 f303 	lsl.w	r3, r9, r3
 800b762:	4313      	orrs	r3, r2
 800b764:	9304      	str	r3, [sp, #16]
 800b766:	46a2      	mov	sl, r4
 800b768:	e7d2      	b.n	800b710 <_svfiprintf_r+0x9c>
 800b76a:	9b03      	ldr	r3, [sp, #12]
 800b76c:	1d19      	adds	r1, r3, #4
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	9103      	str	r1, [sp, #12]
 800b772:	2b00      	cmp	r3, #0
 800b774:	bfbb      	ittet	lt
 800b776:	425b      	neglt	r3, r3
 800b778:	f042 0202 	orrlt.w	r2, r2, #2
 800b77c:	9307      	strge	r3, [sp, #28]
 800b77e:	9307      	strlt	r3, [sp, #28]
 800b780:	bfb8      	it	lt
 800b782:	9204      	strlt	r2, [sp, #16]
 800b784:	7823      	ldrb	r3, [r4, #0]
 800b786:	2b2e      	cmp	r3, #46	; 0x2e
 800b788:	d10c      	bne.n	800b7a4 <_svfiprintf_r+0x130>
 800b78a:	7863      	ldrb	r3, [r4, #1]
 800b78c:	2b2a      	cmp	r3, #42	; 0x2a
 800b78e:	d135      	bne.n	800b7fc <_svfiprintf_r+0x188>
 800b790:	9b03      	ldr	r3, [sp, #12]
 800b792:	1d1a      	adds	r2, r3, #4
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	9203      	str	r2, [sp, #12]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	bfb8      	it	lt
 800b79c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b7a0:	3402      	adds	r4, #2
 800b7a2:	9305      	str	r3, [sp, #20]
 800b7a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b870 <_svfiprintf_r+0x1fc>
 800b7a8:	7821      	ldrb	r1, [r4, #0]
 800b7aa:	2203      	movs	r2, #3
 800b7ac:	4650      	mov	r0, sl
 800b7ae:	f7f4 fd17 	bl	80001e0 <memchr>
 800b7b2:	b140      	cbz	r0, 800b7c6 <_svfiprintf_r+0x152>
 800b7b4:	2340      	movs	r3, #64	; 0x40
 800b7b6:	eba0 000a 	sub.w	r0, r0, sl
 800b7ba:	fa03 f000 	lsl.w	r0, r3, r0
 800b7be:	9b04      	ldr	r3, [sp, #16]
 800b7c0:	4303      	orrs	r3, r0
 800b7c2:	3401      	adds	r4, #1
 800b7c4:	9304      	str	r3, [sp, #16]
 800b7c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7ca:	4826      	ldr	r0, [pc, #152]	; (800b864 <_svfiprintf_r+0x1f0>)
 800b7cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7d0:	2206      	movs	r2, #6
 800b7d2:	f7f4 fd05 	bl	80001e0 <memchr>
 800b7d6:	2800      	cmp	r0, #0
 800b7d8:	d038      	beq.n	800b84c <_svfiprintf_r+0x1d8>
 800b7da:	4b23      	ldr	r3, [pc, #140]	; (800b868 <_svfiprintf_r+0x1f4>)
 800b7dc:	bb1b      	cbnz	r3, 800b826 <_svfiprintf_r+0x1b2>
 800b7de:	9b03      	ldr	r3, [sp, #12]
 800b7e0:	3307      	adds	r3, #7
 800b7e2:	f023 0307 	bic.w	r3, r3, #7
 800b7e6:	3308      	adds	r3, #8
 800b7e8:	9303      	str	r3, [sp, #12]
 800b7ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7ec:	4433      	add	r3, r6
 800b7ee:	9309      	str	r3, [sp, #36]	; 0x24
 800b7f0:	e767      	b.n	800b6c2 <_svfiprintf_r+0x4e>
 800b7f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7f6:	460c      	mov	r4, r1
 800b7f8:	2001      	movs	r0, #1
 800b7fa:	e7a5      	b.n	800b748 <_svfiprintf_r+0xd4>
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	3401      	adds	r4, #1
 800b800:	9305      	str	r3, [sp, #20]
 800b802:	4619      	mov	r1, r3
 800b804:	f04f 0c0a 	mov.w	ip, #10
 800b808:	4620      	mov	r0, r4
 800b80a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b80e:	3a30      	subs	r2, #48	; 0x30
 800b810:	2a09      	cmp	r2, #9
 800b812:	d903      	bls.n	800b81c <_svfiprintf_r+0x1a8>
 800b814:	2b00      	cmp	r3, #0
 800b816:	d0c5      	beq.n	800b7a4 <_svfiprintf_r+0x130>
 800b818:	9105      	str	r1, [sp, #20]
 800b81a:	e7c3      	b.n	800b7a4 <_svfiprintf_r+0x130>
 800b81c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b820:	4604      	mov	r4, r0
 800b822:	2301      	movs	r3, #1
 800b824:	e7f0      	b.n	800b808 <_svfiprintf_r+0x194>
 800b826:	ab03      	add	r3, sp, #12
 800b828:	9300      	str	r3, [sp, #0]
 800b82a:	462a      	mov	r2, r5
 800b82c:	4b0f      	ldr	r3, [pc, #60]	; (800b86c <_svfiprintf_r+0x1f8>)
 800b82e:	a904      	add	r1, sp, #16
 800b830:	4638      	mov	r0, r7
 800b832:	f3af 8000 	nop.w
 800b836:	1c42      	adds	r2, r0, #1
 800b838:	4606      	mov	r6, r0
 800b83a:	d1d6      	bne.n	800b7ea <_svfiprintf_r+0x176>
 800b83c:	89ab      	ldrh	r3, [r5, #12]
 800b83e:	065b      	lsls	r3, r3, #25
 800b840:	f53f af2c 	bmi.w	800b69c <_svfiprintf_r+0x28>
 800b844:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b846:	b01d      	add	sp, #116	; 0x74
 800b848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b84c:	ab03      	add	r3, sp, #12
 800b84e:	9300      	str	r3, [sp, #0]
 800b850:	462a      	mov	r2, r5
 800b852:	4b06      	ldr	r3, [pc, #24]	; (800b86c <_svfiprintf_r+0x1f8>)
 800b854:	a904      	add	r1, sp, #16
 800b856:	4638      	mov	r0, r7
 800b858:	f000 f87a 	bl	800b950 <_printf_i>
 800b85c:	e7eb      	b.n	800b836 <_svfiprintf_r+0x1c2>
 800b85e:	bf00      	nop
 800b860:	0800c5d0 	.word	0x0800c5d0
 800b864:	0800c5da 	.word	0x0800c5da
 800b868:	00000000 	.word	0x00000000
 800b86c:	0800b5bd 	.word	0x0800b5bd
 800b870:	0800c5d6 	.word	0x0800c5d6

0800b874 <_printf_common>:
 800b874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b878:	4616      	mov	r6, r2
 800b87a:	4699      	mov	r9, r3
 800b87c:	688a      	ldr	r2, [r1, #8]
 800b87e:	690b      	ldr	r3, [r1, #16]
 800b880:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b884:	4293      	cmp	r3, r2
 800b886:	bfb8      	it	lt
 800b888:	4613      	movlt	r3, r2
 800b88a:	6033      	str	r3, [r6, #0]
 800b88c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b890:	4607      	mov	r7, r0
 800b892:	460c      	mov	r4, r1
 800b894:	b10a      	cbz	r2, 800b89a <_printf_common+0x26>
 800b896:	3301      	adds	r3, #1
 800b898:	6033      	str	r3, [r6, #0]
 800b89a:	6823      	ldr	r3, [r4, #0]
 800b89c:	0699      	lsls	r1, r3, #26
 800b89e:	bf42      	ittt	mi
 800b8a0:	6833      	ldrmi	r3, [r6, #0]
 800b8a2:	3302      	addmi	r3, #2
 800b8a4:	6033      	strmi	r3, [r6, #0]
 800b8a6:	6825      	ldr	r5, [r4, #0]
 800b8a8:	f015 0506 	ands.w	r5, r5, #6
 800b8ac:	d106      	bne.n	800b8bc <_printf_common+0x48>
 800b8ae:	f104 0a19 	add.w	sl, r4, #25
 800b8b2:	68e3      	ldr	r3, [r4, #12]
 800b8b4:	6832      	ldr	r2, [r6, #0]
 800b8b6:	1a9b      	subs	r3, r3, r2
 800b8b8:	42ab      	cmp	r3, r5
 800b8ba:	dc26      	bgt.n	800b90a <_printf_common+0x96>
 800b8bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b8c0:	1e13      	subs	r3, r2, #0
 800b8c2:	6822      	ldr	r2, [r4, #0]
 800b8c4:	bf18      	it	ne
 800b8c6:	2301      	movne	r3, #1
 800b8c8:	0692      	lsls	r2, r2, #26
 800b8ca:	d42b      	bmi.n	800b924 <_printf_common+0xb0>
 800b8cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b8d0:	4649      	mov	r1, r9
 800b8d2:	4638      	mov	r0, r7
 800b8d4:	47c0      	blx	r8
 800b8d6:	3001      	adds	r0, #1
 800b8d8:	d01e      	beq.n	800b918 <_printf_common+0xa4>
 800b8da:	6823      	ldr	r3, [r4, #0]
 800b8dc:	68e5      	ldr	r5, [r4, #12]
 800b8de:	6832      	ldr	r2, [r6, #0]
 800b8e0:	f003 0306 	and.w	r3, r3, #6
 800b8e4:	2b04      	cmp	r3, #4
 800b8e6:	bf08      	it	eq
 800b8e8:	1aad      	subeq	r5, r5, r2
 800b8ea:	68a3      	ldr	r3, [r4, #8]
 800b8ec:	6922      	ldr	r2, [r4, #16]
 800b8ee:	bf0c      	ite	eq
 800b8f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b8f4:	2500      	movne	r5, #0
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	bfc4      	itt	gt
 800b8fa:	1a9b      	subgt	r3, r3, r2
 800b8fc:	18ed      	addgt	r5, r5, r3
 800b8fe:	2600      	movs	r6, #0
 800b900:	341a      	adds	r4, #26
 800b902:	42b5      	cmp	r5, r6
 800b904:	d11a      	bne.n	800b93c <_printf_common+0xc8>
 800b906:	2000      	movs	r0, #0
 800b908:	e008      	b.n	800b91c <_printf_common+0xa8>
 800b90a:	2301      	movs	r3, #1
 800b90c:	4652      	mov	r2, sl
 800b90e:	4649      	mov	r1, r9
 800b910:	4638      	mov	r0, r7
 800b912:	47c0      	blx	r8
 800b914:	3001      	adds	r0, #1
 800b916:	d103      	bne.n	800b920 <_printf_common+0xac>
 800b918:	f04f 30ff 	mov.w	r0, #4294967295
 800b91c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b920:	3501      	adds	r5, #1
 800b922:	e7c6      	b.n	800b8b2 <_printf_common+0x3e>
 800b924:	18e1      	adds	r1, r4, r3
 800b926:	1c5a      	adds	r2, r3, #1
 800b928:	2030      	movs	r0, #48	; 0x30
 800b92a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b92e:	4422      	add	r2, r4
 800b930:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b934:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b938:	3302      	adds	r3, #2
 800b93a:	e7c7      	b.n	800b8cc <_printf_common+0x58>
 800b93c:	2301      	movs	r3, #1
 800b93e:	4622      	mov	r2, r4
 800b940:	4649      	mov	r1, r9
 800b942:	4638      	mov	r0, r7
 800b944:	47c0      	blx	r8
 800b946:	3001      	adds	r0, #1
 800b948:	d0e6      	beq.n	800b918 <_printf_common+0xa4>
 800b94a:	3601      	adds	r6, #1
 800b94c:	e7d9      	b.n	800b902 <_printf_common+0x8e>
	...

0800b950 <_printf_i>:
 800b950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b954:	460c      	mov	r4, r1
 800b956:	4691      	mov	r9, r2
 800b958:	7e27      	ldrb	r7, [r4, #24]
 800b95a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b95c:	2f78      	cmp	r7, #120	; 0x78
 800b95e:	4680      	mov	r8, r0
 800b960:	469a      	mov	sl, r3
 800b962:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b966:	d807      	bhi.n	800b978 <_printf_i+0x28>
 800b968:	2f62      	cmp	r7, #98	; 0x62
 800b96a:	d80a      	bhi.n	800b982 <_printf_i+0x32>
 800b96c:	2f00      	cmp	r7, #0
 800b96e:	f000 80d8 	beq.w	800bb22 <_printf_i+0x1d2>
 800b972:	2f58      	cmp	r7, #88	; 0x58
 800b974:	f000 80a3 	beq.w	800babe <_printf_i+0x16e>
 800b978:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b97c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b980:	e03a      	b.n	800b9f8 <_printf_i+0xa8>
 800b982:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b986:	2b15      	cmp	r3, #21
 800b988:	d8f6      	bhi.n	800b978 <_printf_i+0x28>
 800b98a:	a001      	add	r0, pc, #4	; (adr r0, 800b990 <_printf_i+0x40>)
 800b98c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b990:	0800b9e9 	.word	0x0800b9e9
 800b994:	0800b9fd 	.word	0x0800b9fd
 800b998:	0800b979 	.word	0x0800b979
 800b99c:	0800b979 	.word	0x0800b979
 800b9a0:	0800b979 	.word	0x0800b979
 800b9a4:	0800b979 	.word	0x0800b979
 800b9a8:	0800b9fd 	.word	0x0800b9fd
 800b9ac:	0800b979 	.word	0x0800b979
 800b9b0:	0800b979 	.word	0x0800b979
 800b9b4:	0800b979 	.word	0x0800b979
 800b9b8:	0800b979 	.word	0x0800b979
 800b9bc:	0800bb09 	.word	0x0800bb09
 800b9c0:	0800ba2d 	.word	0x0800ba2d
 800b9c4:	0800baeb 	.word	0x0800baeb
 800b9c8:	0800b979 	.word	0x0800b979
 800b9cc:	0800b979 	.word	0x0800b979
 800b9d0:	0800bb2b 	.word	0x0800bb2b
 800b9d4:	0800b979 	.word	0x0800b979
 800b9d8:	0800ba2d 	.word	0x0800ba2d
 800b9dc:	0800b979 	.word	0x0800b979
 800b9e0:	0800b979 	.word	0x0800b979
 800b9e4:	0800baf3 	.word	0x0800baf3
 800b9e8:	680b      	ldr	r3, [r1, #0]
 800b9ea:	1d1a      	adds	r2, r3, #4
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	600a      	str	r2, [r1, #0]
 800b9f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b9f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	e0a3      	b.n	800bb44 <_printf_i+0x1f4>
 800b9fc:	6825      	ldr	r5, [r4, #0]
 800b9fe:	6808      	ldr	r0, [r1, #0]
 800ba00:	062e      	lsls	r6, r5, #24
 800ba02:	f100 0304 	add.w	r3, r0, #4
 800ba06:	d50a      	bpl.n	800ba1e <_printf_i+0xce>
 800ba08:	6805      	ldr	r5, [r0, #0]
 800ba0a:	600b      	str	r3, [r1, #0]
 800ba0c:	2d00      	cmp	r5, #0
 800ba0e:	da03      	bge.n	800ba18 <_printf_i+0xc8>
 800ba10:	232d      	movs	r3, #45	; 0x2d
 800ba12:	426d      	negs	r5, r5
 800ba14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba18:	485e      	ldr	r0, [pc, #376]	; (800bb94 <_printf_i+0x244>)
 800ba1a:	230a      	movs	r3, #10
 800ba1c:	e019      	b.n	800ba52 <_printf_i+0x102>
 800ba1e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ba22:	6805      	ldr	r5, [r0, #0]
 800ba24:	600b      	str	r3, [r1, #0]
 800ba26:	bf18      	it	ne
 800ba28:	b22d      	sxthne	r5, r5
 800ba2a:	e7ef      	b.n	800ba0c <_printf_i+0xbc>
 800ba2c:	680b      	ldr	r3, [r1, #0]
 800ba2e:	6825      	ldr	r5, [r4, #0]
 800ba30:	1d18      	adds	r0, r3, #4
 800ba32:	6008      	str	r0, [r1, #0]
 800ba34:	0628      	lsls	r0, r5, #24
 800ba36:	d501      	bpl.n	800ba3c <_printf_i+0xec>
 800ba38:	681d      	ldr	r5, [r3, #0]
 800ba3a:	e002      	b.n	800ba42 <_printf_i+0xf2>
 800ba3c:	0669      	lsls	r1, r5, #25
 800ba3e:	d5fb      	bpl.n	800ba38 <_printf_i+0xe8>
 800ba40:	881d      	ldrh	r5, [r3, #0]
 800ba42:	4854      	ldr	r0, [pc, #336]	; (800bb94 <_printf_i+0x244>)
 800ba44:	2f6f      	cmp	r7, #111	; 0x6f
 800ba46:	bf0c      	ite	eq
 800ba48:	2308      	moveq	r3, #8
 800ba4a:	230a      	movne	r3, #10
 800ba4c:	2100      	movs	r1, #0
 800ba4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ba52:	6866      	ldr	r6, [r4, #4]
 800ba54:	60a6      	str	r6, [r4, #8]
 800ba56:	2e00      	cmp	r6, #0
 800ba58:	bfa2      	ittt	ge
 800ba5a:	6821      	ldrge	r1, [r4, #0]
 800ba5c:	f021 0104 	bicge.w	r1, r1, #4
 800ba60:	6021      	strge	r1, [r4, #0]
 800ba62:	b90d      	cbnz	r5, 800ba68 <_printf_i+0x118>
 800ba64:	2e00      	cmp	r6, #0
 800ba66:	d04d      	beq.n	800bb04 <_printf_i+0x1b4>
 800ba68:	4616      	mov	r6, r2
 800ba6a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ba6e:	fb03 5711 	mls	r7, r3, r1, r5
 800ba72:	5dc7      	ldrb	r7, [r0, r7]
 800ba74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ba78:	462f      	mov	r7, r5
 800ba7a:	42bb      	cmp	r3, r7
 800ba7c:	460d      	mov	r5, r1
 800ba7e:	d9f4      	bls.n	800ba6a <_printf_i+0x11a>
 800ba80:	2b08      	cmp	r3, #8
 800ba82:	d10b      	bne.n	800ba9c <_printf_i+0x14c>
 800ba84:	6823      	ldr	r3, [r4, #0]
 800ba86:	07df      	lsls	r7, r3, #31
 800ba88:	d508      	bpl.n	800ba9c <_printf_i+0x14c>
 800ba8a:	6923      	ldr	r3, [r4, #16]
 800ba8c:	6861      	ldr	r1, [r4, #4]
 800ba8e:	4299      	cmp	r1, r3
 800ba90:	bfde      	ittt	le
 800ba92:	2330      	movle	r3, #48	; 0x30
 800ba94:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ba98:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ba9c:	1b92      	subs	r2, r2, r6
 800ba9e:	6122      	str	r2, [r4, #16]
 800baa0:	f8cd a000 	str.w	sl, [sp]
 800baa4:	464b      	mov	r3, r9
 800baa6:	aa03      	add	r2, sp, #12
 800baa8:	4621      	mov	r1, r4
 800baaa:	4640      	mov	r0, r8
 800baac:	f7ff fee2 	bl	800b874 <_printf_common>
 800bab0:	3001      	adds	r0, #1
 800bab2:	d14c      	bne.n	800bb4e <_printf_i+0x1fe>
 800bab4:	f04f 30ff 	mov.w	r0, #4294967295
 800bab8:	b004      	add	sp, #16
 800baba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800babe:	4835      	ldr	r0, [pc, #212]	; (800bb94 <_printf_i+0x244>)
 800bac0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bac4:	6823      	ldr	r3, [r4, #0]
 800bac6:	680e      	ldr	r6, [r1, #0]
 800bac8:	061f      	lsls	r7, r3, #24
 800baca:	f856 5b04 	ldr.w	r5, [r6], #4
 800bace:	600e      	str	r6, [r1, #0]
 800bad0:	d514      	bpl.n	800bafc <_printf_i+0x1ac>
 800bad2:	07d9      	lsls	r1, r3, #31
 800bad4:	bf44      	itt	mi
 800bad6:	f043 0320 	orrmi.w	r3, r3, #32
 800bada:	6023      	strmi	r3, [r4, #0]
 800badc:	b91d      	cbnz	r5, 800bae6 <_printf_i+0x196>
 800bade:	6823      	ldr	r3, [r4, #0]
 800bae0:	f023 0320 	bic.w	r3, r3, #32
 800bae4:	6023      	str	r3, [r4, #0]
 800bae6:	2310      	movs	r3, #16
 800bae8:	e7b0      	b.n	800ba4c <_printf_i+0xfc>
 800baea:	6823      	ldr	r3, [r4, #0]
 800baec:	f043 0320 	orr.w	r3, r3, #32
 800baf0:	6023      	str	r3, [r4, #0]
 800baf2:	2378      	movs	r3, #120	; 0x78
 800baf4:	4828      	ldr	r0, [pc, #160]	; (800bb98 <_printf_i+0x248>)
 800baf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bafa:	e7e3      	b.n	800bac4 <_printf_i+0x174>
 800bafc:	065e      	lsls	r6, r3, #25
 800bafe:	bf48      	it	mi
 800bb00:	b2ad      	uxthmi	r5, r5
 800bb02:	e7e6      	b.n	800bad2 <_printf_i+0x182>
 800bb04:	4616      	mov	r6, r2
 800bb06:	e7bb      	b.n	800ba80 <_printf_i+0x130>
 800bb08:	680b      	ldr	r3, [r1, #0]
 800bb0a:	6826      	ldr	r6, [r4, #0]
 800bb0c:	6960      	ldr	r0, [r4, #20]
 800bb0e:	1d1d      	adds	r5, r3, #4
 800bb10:	600d      	str	r5, [r1, #0]
 800bb12:	0635      	lsls	r5, r6, #24
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	d501      	bpl.n	800bb1c <_printf_i+0x1cc>
 800bb18:	6018      	str	r0, [r3, #0]
 800bb1a:	e002      	b.n	800bb22 <_printf_i+0x1d2>
 800bb1c:	0671      	lsls	r1, r6, #25
 800bb1e:	d5fb      	bpl.n	800bb18 <_printf_i+0x1c8>
 800bb20:	8018      	strh	r0, [r3, #0]
 800bb22:	2300      	movs	r3, #0
 800bb24:	6123      	str	r3, [r4, #16]
 800bb26:	4616      	mov	r6, r2
 800bb28:	e7ba      	b.n	800baa0 <_printf_i+0x150>
 800bb2a:	680b      	ldr	r3, [r1, #0]
 800bb2c:	1d1a      	adds	r2, r3, #4
 800bb2e:	600a      	str	r2, [r1, #0]
 800bb30:	681e      	ldr	r6, [r3, #0]
 800bb32:	6862      	ldr	r2, [r4, #4]
 800bb34:	2100      	movs	r1, #0
 800bb36:	4630      	mov	r0, r6
 800bb38:	f7f4 fb52 	bl	80001e0 <memchr>
 800bb3c:	b108      	cbz	r0, 800bb42 <_printf_i+0x1f2>
 800bb3e:	1b80      	subs	r0, r0, r6
 800bb40:	6060      	str	r0, [r4, #4]
 800bb42:	6863      	ldr	r3, [r4, #4]
 800bb44:	6123      	str	r3, [r4, #16]
 800bb46:	2300      	movs	r3, #0
 800bb48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb4c:	e7a8      	b.n	800baa0 <_printf_i+0x150>
 800bb4e:	6923      	ldr	r3, [r4, #16]
 800bb50:	4632      	mov	r2, r6
 800bb52:	4649      	mov	r1, r9
 800bb54:	4640      	mov	r0, r8
 800bb56:	47d0      	blx	sl
 800bb58:	3001      	adds	r0, #1
 800bb5a:	d0ab      	beq.n	800bab4 <_printf_i+0x164>
 800bb5c:	6823      	ldr	r3, [r4, #0]
 800bb5e:	079b      	lsls	r3, r3, #30
 800bb60:	d413      	bmi.n	800bb8a <_printf_i+0x23a>
 800bb62:	68e0      	ldr	r0, [r4, #12]
 800bb64:	9b03      	ldr	r3, [sp, #12]
 800bb66:	4298      	cmp	r0, r3
 800bb68:	bfb8      	it	lt
 800bb6a:	4618      	movlt	r0, r3
 800bb6c:	e7a4      	b.n	800bab8 <_printf_i+0x168>
 800bb6e:	2301      	movs	r3, #1
 800bb70:	4632      	mov	r2, r6
 800bb72:	4649      	mov	r1, r9
 800bb74:	4640      	mov	r0, r8
 800bb76:	47d0      	blx	sl
 800bb78:	3001      	adds	r0, #1
 800bb7a:	d09b      	beq.n	800bab4 <_printf_i+0x164>
 800bb7c:	3501      	adds	r5, #1
 800bb7e:	68e3      	ldr	r3, [r4, #12]
 800bb80:	9903      	ldr	r1, [sp, #12]
 800bb82:	1a5b      	subs	r3, r3, r1
 800bb84:	42ab      	cmp	r3, r5
 800bb86:	dcf2      	bgt.n	800bb6e <_printf_i+0x21e>
 800bb88:	e7eb      	b.n	800bb62 <_printf_i+0x212>
 800bb8a:	2500      	movs	r5, #0
 800bb8c:	f104 0619 	add.w	r6, r4, #25
 800bb90:	e7f5      	b.n	800bb7e <_printf_i+0x22e>
 800bb92:	bf00      	nop
 800bb94:	0800c5e1 	.word	0x0800c5e1
 800bb98:	0800c5f2 	.word	0x0800c5f2

0800bb9c <memcpy>:
 800bb9c:	440a      	add	r2, r1
 800bb9e:	4291      	cmp	r1, r2
 800bba0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bba4:	d100      	bne.n	800bba8 <memcpy+0xc>
 800bba6:	4770      	bx	lr
 800bba8:	b510      	push	{r4, lr}
 800bbaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbb2:	4291      	cmp	r1, r2
 800bbb4:	d1f9      	bne.n	800bbaa <memcpy+0xe>
 800bbb6:	bd10      	pop	{r4, pc}

0800bbb8 <memmove>:
 800bbb8:	4288      	cmp	r0, r1
 800bbba:	b510      	push	{r4, lr}
 800bbbc:	eb01 0402 	add.w	r4, r1, r2
 800bbc0:	d902      	bls.n	800bbc8 <memmove+0x10>
 800bbc2:	4284      	cmp	r4, r0
 800bbc4:	4623      	mov	r3, r4
 800bbc6:	d807      	bhi.n	800bbd8 <memmove+0x20>
 800bbc8:	1e43      	subs	r3, r0, #1
 800bbca:	42a1      	cmp	r1, r4
 800bbcc:	d008      	beq.n	800bbe0 <memmove+0x28>
 800bbce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bbd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bbd6:	e7f8      	b.n	800bbca <memmove+0x12>
 800bbd8:	4402      	add	r2, r0
 800bbda:	4601      	mov	r1, r0
 800bbdc:	428a      	cmp	r2, r1
 800bbde:	d100      	bne.n	800bbe2 <memmove+0x2a>
 800bbe0:	bd10      	pop	{r4, pc}
 800bbe2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bbe6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bbea:	e7f7      	b.n	800bbdc <memmove+0x24>

0800bbec <_free_r>:
 800bbec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbee:	2900      	cmp	r1, #0
 800bbf0:	d048      	beq.n	800bc84 <_free_r+0x98>
 800bbf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbf6:	9001      	str	r0, [sp, #4]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	f1a1 0404 	sub.w	r4, r1, #4
 800bbfe:	bfb8      	it	lt
 800bc00:	18e4      	addlt	r4, r4, r3
 800bc02:	f000 f8d3 	bl	800bdac <__malloc_lock>
 800bc06:	4a20      	ldr	r2, [pc, #128]	; (800bc88 <_free_r+0x9c>)
 800bc08:	9801      	ldr	r0, [sp, #4]
 800bc0a:	6813      	ldr	r3, [r2, #0]
 800bc0c:	4615      	mov	r5, r2
 800bc0e:	b933      	cbnz	r3, 800bc1e <_free_r+0x32>
 800bc10:	6063      	str	r3, [r4, #4]
 800bc12:	6014      	str	r4, [r2, #0]
 800bc14:	b003      	add	sp, #12
 800bc16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc1a:	f000 b8cd 	b.w	800bdb8 <__malloc_unlock>
 800bc1e:	42a3      	cmp	r3, r4
 800bc20:	d90b      	bls.n	800bc3a <_free_r+0x4e>
 800bc22:	6821      	ldr	r1, [r4, #0]
 800bc24:	1862      	adds	r2, r4, r1
 800bc26:	4293      	cmp	r3, r2
 800bc28:	bf04      	itt	eq
 800bc2a:	681a      	ldreq	r2, [r3, #0]
 800bc2c:	685b      	ldreq	r3, [r3, #4]
 800bc2e:	6063      	str	r3, [r4, #4]
 800bc30:	bf04      	itt	eq
 800bc32:	1852      	addeq	r2, r2, r1
 800bc34:	6022      	streq	r2, [r4, #0]
 800bc36:	602c      	str	r4, [r5, #0]
 800bc38:	e7ec      	b.n	800bc14 <_free_r+0x28>
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	b10b      	cbz	r3, 800bc44 <_free_r+0x58>
 800bc40:	42a3      	cmp	r3, r4
 800bc42:	d9fa      	bls.n	800bc3a <_free_r+0x4e>
 800bc44:	6811      	ldr	r1, [r2, #0]
 800bc46:	1855      	adds	r5, r2, r1
 800bc48:	42a5      	cmp	r5, r4
 800bc4a:	d10b      	bne.n	800bc64 <_free_r+0x78>
 800bc4c:	6824      	ldr	r4, [r4, #0]
 800bc4e:	4421      	add	r1, r4
 800bc50:	1854      	adds	r4, r2, r1
 800bc52:	42a3      	cmp	r3, r4
 800bc54:	6011      	str	r1, [r2, #0]
 800bc56:	d1dd      	bne.n	800bc14 <_free_r+0x28>
 800bc58:	681c      	ldr	r4, [r3, #0]
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	6053      	str	r3, [r2, #4]
 800bc5e:	4421      	add	r1, r4
 800bc60:	6011      	str	r1, [r2, #0]
 800bc62:	e7d7      	b.n	800bc14 <_free_r+0x28>
 800bc64:	d902      	bls.n	800bc6c <_free_r+0x80>
 800bc66:	230c      	movs	r3, #12
 800bc68:	6003      	str	r3, [r0, #0]
 800bc6a:	e7d3      	b.n	800bc14 <_free_r+0x28>
 800bc6c:	6825      	ldr	r5, [r4, #0]
 800bc6e:	1961      	adds	r1, r4, r5
 800bc70:	428b      	cmp	r3, r1
 800bc72:	bf04      	itt	eq
 800bc74:	6819      	ldreq	r1, [r3, #0]
 800bc76:	685b      	ldreq	r3, [r3, #4]
 800bc78:	6063      	str	r3, [r4, #4]
 800bc7a:	bf04      	itt	eq
 800bc7c:	1949      	addeq	r1, r1, r5
 800bc7e:	6021      	streq	r1, [r4, #0]
 800bc80:	6054      	str	r4, [r2, #4]
 800bc82:	e7c7      	b.n	800bc14 <_free_r+0x28>
 800bc84:	b003      	add	sp, #12
 800bc86:	bd30      	pop	{r4, r5, pc}
 800bc88:	200001fc 	.word	0x200001fc

0800bc8c <_malloc_r>:
 800bc8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc8e:	1ccd      	adds	r5, r1, #3
 800bc90:	f025 0503 	bic.w	r5, r5, #3
 800bc94:	3508      	adds	r5, #8
 800bc96:	2d0c      	cmp	r5, #12
 800bc98:	bf38      	it	cc
 800bc9a:	250c      	movcc	r5, #12
 800bc9c:	2d00      	cmp	r5, #0
 800bc9e:	4606      	mov	r6, r0
 800bca0:	db01      	blt.n	800bca6 <_malloc_r+0x1a>
 800bca2:	42a9      	cmp	r1, r5
 800bca4:	d903      	bls.n	800bcae <_malloc_r+0x22>
 800bca6:	230c      	movs	r3, #12
 800bca8:	6033      	str	r3, [r6, #0]
 800bcaa:	2000      	movs	r0, #0
 800bcac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcae:	f000 f87d 	bl	800bdac <__malloc_lock>
 800bcb2:	4921      	ldr	r1, [pc, #132]	; (800bd38 <_malloc_r+0xac>)
 800bcb4:	680a      	ldr	r2, [r1, #0]
 800bcb6:	4614      	mov	r4, r2
 800bcb8:	b99c      	cbnz	r4, 800bce2 <_malloc_r+0x56>
 800bcba:	4f20      	ldr	r7, [pc, #128]	; (800bd3c <_malloc_r+0xb0>)
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	b923      	cbnz	r3, 800bcca <_malloc_r+0x3e>
 800bcc0:	4621      	mov	r1, r4
 800bcc2:	4630      	mov	r0, r6
 800bcc4:	f000 f862 	bl	800bd8c <_sbrk_r>
 800bcc8:	6038      	str	r0, [r7, #0]
 800bcca:	4629      	mov	r1, r5
 800bccc:	4630      	mov	r0, r6
 800bcce:	f000 f85d 	bl	800bd8c <_sbrk_r>
 800bcd2:	1c43      	adds	r3, r0, #1
 800bcd4:	d123      	bne.n	800bd1e <_malloc_r+0x92>
 800bcd6:	230c      	movs	r3, #12
 800bcd8:	6033      	str	r3, [r6, #0]
 800bcda:	4630      	mov	r0, r6
 800bcdc:	f000 f86c 	bl	800bdb8 <__malloc_unlock>
 800bce0:	e7e3      	b.n	800bcaa <_malloc_r+0x1e>
 800bce2:	6823      	ldr	r3, [r4, #0]
 800bce4:	1b5b      	subs	r3, r3, r5
 800bce6:	d417      	bmi.n	800bd18 <_malloc_r+0x8c>
 800bce8:	2b0b      	cmp	r3, #11
 800bcea:	d903      	bls.n	800bcf4 <_malloc_r+0x68>
 800bcec:	6023      	str	r3, [r4, #0]
 800bcee:	441c      	add	r4, r3
 800bcf0:	6025      	str	r5, [r4, #0]
 800bcf2:	e004      	b.n	800bcfe <_malloc_r+0x72>
 800bcf4:	6863      	ldr	r3, [r4, #4]
 800bcf6:	42a2      	cmp	r2, r4
 800bcf8:	bf0c      	ite	eq
 800bcfa:	600b      	streq	r3, [r1, #0]
 800bcfc:	6053      	strne	r3, [r2, #4]
 800bcfe:	4630      	mov	r0, r6
 800bd00:	f000 f85a 	bl	800bdb8 <__malloc_unlock>
 800bd04:	f104 000b 	add.w	r0, r4, #11
 800bd08:	1d23      	adds	r3, r4, #4
 800bd0a:	f020 0007 	bic.w	r0, r0, #7
 800bd0e:	1ac2      	subs	r2, r0, r3
 800bd10:	d0cc      	beq.n	800bcac <_malloc_r+0x20>
 800bd12:	1a1b      	subs	r3, r3, r0
 800bd14:	50a3      	str	r3, [r4, r2]
 800bd16:	e7c9      	b.n	800bcac <_malloc_r+0x20>
 800bd18:	4622      	mov	r2, r4
 800bd1a:	6864      	ldr	r4, [r4, #4]
 800bd1c:	e7cc      	b.n	800bcb8 <_malloc_r+0x2c>
 800bd1e:	1cc4      	adds	r4, r0, #3
 800bd20:	f024 0403 	bic.w	r4, r4, #3
 800bd24:	42a0      	cmp	r0, r4
 800bd26:	d0e3      	beq.n	800bcf0 <_malloc_r+0x64>
 800bd28:	1a21      	subs	r1, r4, r0
 800bd2a:	4630      	mov	r0, r6
 800bd2c:	f000 f82e 	bl	800bd8c <_sbrk_r>
 800bd30:	3001      	adds	r0, #1
 800bd32:	d1dd      	bne.n	800bcf0 <_malloc_r+0x64>
 800bd34:	e7cf      	b.n	800bcd6 <_malloc_r+0x4a>
 800bd36:	bf00      	nop
 800bd38:	200001fc 	.word	0x200001fc
 800bd3c:	20000200 	.word	0x20000200

0800bd40 <_realloc_r>:
 800bd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd42:	4607      	mov	r7, r0
 800bd44:	4614      	mov	r4, r2
 800bd46:	460e      	mov	r6, r1
 800bd48:	b921      	cbnz	r1, 800bd54 <_realloc_r+0x14>
 800bd4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bd4e:	4611      	mov	r1, r2
 800bd50:	f7ff bf9c 	b.w	800bc8c <_malloc_r>
 800bd54:	b922      	cbnz	r2, 800bd60 <_realloc_r+0x20>
 800bd56:	f7ff ff49 	bl	800bbec <_free_r>
 800bd5a:	4625      	mov	r5, r4
 800bd5c:	4628      	mov	r0, r5
 800bd5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd60:	f000 f830 	bl	800bdc4 <_malloc_usable_size_r>
 800bd64:	42a0      	cmp	r0, r4
 800bd66:	d20f      	bcs.n	800bd88 <_realloc_r+0x48>
 800bd68:	4621      	mov	r1, r4
 800bd6a:	4638      	mov	r0, r7
 800bd6c:	f7ff ff8e 	bl	800bc8c <_malloc_r>
 800bd70:	4605      	mov	r5, r0
 800bd72:	2800      	cmp	r0, #0
 800bd74:	d0f2      	beq.n	800bd5c <_realloc_r+0x1c>
 800bd76:	4631      	mov	r1, r6
 800bd78:	4622      	mov	r2, r4
 800bd7a:	f7ff ff0f 	bl	800bb9c <memcpy>
 800bd7e:	4631      	mov	r1, r6
 800bd80:	4638      	mov	r0, r7
 800bd82:	f7ff ff33 	bl	800bbec <_free_r>
 800bd86:	e7e9      	b.n	800bd5c <_realloc_r+0x1c>
 800bd88:	4635      	mov	r5, r6
 800bd8a:	e7e7      	b.n	800bd5c <_realloc_r+0x1c>

0800bd8c <_sbrk_r>:
 800bd8c:	b538      	push	{r3, r4, r5, lr}
 800bd8e:	4d06      	ldr	r5, [pc, #24]	; (800bda8 <_sbrk_r+0x1c>)
 800bd90:	2300      	movs	r3, #0
 800bd92:	4604      	mov	r4, r0
 800bd94:	4608      	mov	r0, r1
 800bd96:	602b      	str	r3, [r5, #0]
 800bd98:	f7f9 f8a4 	bl	8004ee4 <_sbrk>
 800bd9c:	1c43      	adds	r3, r0, #1
 800bd9e:	d102      	bne.n	800bda6 <_sbrk_r+0x1a>
 800bda0:	682b      	ldr	r3, [r5, #0]
 800bda2:	b103      	cbz	r3, 800bda6 <_sbrk_r+0x1a>
 800bda4:	6023      	str	r3, [r4, #0]
 800bda6:	bd38      	pop	{r3, r4, r5, pc}
 800bda8:	20000aa4 	.word	0x20000aa4

0800bdac <__malloc_lock>:
 800bdac:	4801      	ldr	r0, [pc, #4]	; (800bdb4 <__malloc_lock+0x8>)
 800bdae:	f000 b811 	b.w	800bdd4 <__retarget_lock_acquire_recursive>
 800bdb2:	bf00      	nop
 800bdb4:	20000aac 	.word	0x20000aac

0800bdb8 <__malloc_unlock>:
 800bdb8:	4801      	ldr	r0, [pc, #4]	; (800bdc0 <__malloc_unlock+0x8>)
 800bdba:	f000 b80c 	b.w	800bdd6 <__retarget_lock_release_recursive>
 800bdbe:	bf00      	nop
 800bdc0:	20000aac 	.word	0x20000aac

0800bdc4 <_malloc_usable_size_r>:
 800bdc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdc8:	1f18      	subs	r0, r3, #4
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	bfbc      	itt	lt
 800bdce:	580b      	ldrlt	r3, [r1, r0]
 800bdd0:	18c0      	addlt	r0, r0, r3
 800bdd2:	4770      	bx	lr

0800bdd4 <__retarget_lock_acquire_recursive>:
 800bdd4:	4770      	bx	lr

0800bdd6 <__retarget_lock_release_recursive>:
 800bdd6:	4770      	bx	lr

0800bdd8 <atan2>:
 800bdd8:	f000 b836 	b.w	800be48 <__ieee754_atan2>

0800bddc <sqrt>:
 800bddc:	b538      	push	{r3, r4, r5, lr}
 800bdde:	ed2d 8b02 	vpush	{d8}
 800bde2:	ec55 4b10 	vmov	r4, r5, d0
 800bde6:	f000 f8f9 	bl	800bfdc <__ieee754_sqrt>
 800bdea:	4b15      	ldr	r3, [pc, #84]	; (800be40 <sqrt+0x64>)
 800bdec:	eeb0 8a40 	vmov.f32	s16, s0
 800bdf0:	eef0 8a60 	vmov.f32	s17, s1
 800bdf4:	f993 3000 	ldrsb.w	r3, [r3]
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	d019      	beq.n	800be30 <sqrt+0x54>
 800bdfc:	4622      	mov	r2, r4
 800bdfe:	462b      	mov	r3, r5
 800be00:	4620      	mov	r0, r4
 800be02:	4629      	mov	r1, r5
 800be04:	f7f4 fe92 	bl	8000b2c <__aeabi_dcmpun>
 800be08:	b990      	cbnz	r0, 800be30 <sqrt+0x54>
 800be0a:	2200      	movs	r2, #0
 800be0c:	2300      	movs	r3, #0
 800be0e:	4620      	mov	r0, r4
 800be10:	4629      	mov	r1, r5
 800be12:	f7f4 fe63 	bl	8000adc <__aeabi_dcmplt>
 800be16:	b158      	cbz	r0, 800be30 <sqrt+0x54>
 800be18:	f7ff f9e0 	bl	800b1dc <__errno>
 800be1c:	2321      	movs	r3, #33	; 0x21
 800be1e:	6003      	str	r3, [r0, #0]
 800be20:	2200      	movs	r2, #0
 800be22:	2300      	movs	r3, #0
 800be24:	4610      	mov	r0, r2
 800be26:	4619      	mov	r1, r3
 800be28:	f7f4 fd10 	bl	800084c <__aeabi_ddiv>
 800be2c:	ec41 0b18 	vmov	d8, r0, r1
 800be30:	eeb0 0a48 	vmov.f32	s0, s16
 800be34:	eef0 0a68 	vmov.f32	s1, s17
 800be38:	ecbd 8b02 	vpop	{d8}
 800be3c:	bd38      	pop	{r3, r4, r5, pc}
 800be3e:	bf00      	nop
 800be40:	200000fc 	.word	0x200000fc
 800be44:	00000000 	.word	0x00000000

0800be48 <__ieee754_atan2>:
 800be48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be4c:	ec57 6b11 	vmov	r6, r7, d1
 800be50:	4273      	negs	r3, r6
 800be52:	f8df e184 	ldr.w	lr, [pc, #388]	; 800bfd8 <__ieee754_atan2+0x190>
 800be56:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800be5a:	4333      	orrs	r3, r6
 800be5c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800be60:	4573      	cmp	r3, lr
 800be62:	ec51 0b10 	vmov	r0, r1, d0
 800be66:	ee11 8a10 	vmov	r8, s2
 800be6a:	d80a      	bhi.n	800be82 <__ieee754_atan2+0x3a>
 800be6c:	4244      	negs	r4, r0
 800be6e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800be72:	4304      	orrs	r4, r0
 800be74:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800be78:	4574      	cmp	r4, lr
 800be7a:	ee10 9a10 	vmov	r9, s0
 800be7e:	468c      	mov	ip, r1
 800be80:	d907      	bls.n	800be92 <__ieee754_atan2+0x4a>
 800be82:	4632      	mov	r2, r6
 800be84:	463b      	mov	r3, r7
 800be86:	f7f4 fa01 	bl	800028c <__adddf3>
 800be8a:	ec41 0b10 	vmov	d0, r0, r1
 800be8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be92:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800be96:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800be9a:	4334      	orrs	r4, r6
 800be9c:	d103      	bne.n	800bea6 <__ieee754_atan2+0x5e>
 800be9e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bea2:	f000 b951 	b.w	800c148 <atan>
 800bea6:	17bc      	asrs	r4, r7, #30
 800bea8:	f004 0402 	and.w	r4, r4, #2
 800beac:	ea53 0909 	orrs.w	r9, r3, r9
 800beb0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800beb4:	d107      	bne.n	800bec6 <__ieee754_atan2+0x7e>
 800beb6:	2c02      	cmp	r4, #2
 800beb8:	d060      	beq.n	800bf7c <__ieee754_atan2+0x134>
 800beba:	2c03      	cmp	r4, #3
 800bebc:	d1e5      	bne.n	800be8a <__ieee754_atan2+0x42>
 800bebe:	a142      	add	r1, pc, #264	; (adr r1, 800bfc8 <__ieee754_atan2+0x180>)
 800bec0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bec4:	e7e1      	b.n	800be8a <__ieee754_atan2+0x42>
 800bec6:	ea52 0808 	orrs.w	r8, r2, r8
 800beca:	d106      	bne.n	800beda <__ieee754_atan2+0x92>
 800becc:	f1bc 0f00 	cmp.w	ip, #0
 800bed0:	da5f      	bge.n	800bf92 <__ieee754_atan2+0x14a>
 800bed2:	a13f      	add	r1, pc, #252	; (adr r1, 800bfd0 <__ieee754_atan2+0x188>)
 800bed4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bed8:	e7d7      	b.n	800be8a <__ieee754_atan2+0x42>
 800beda:	4572      	cmp	r2, lr
 800bedc:	d10f      	bne.n	800befe <__ieee754_atan2+0xb6>
 800bede:	4293      	cmp	r3, r2
 800bee0:	f104 34ff 	add.w	r4, r4, #4294967295
 800bee4:	d107      	bne.n	800bef6 <__ieee754_atan2+0xae>
 800bee6:	2c02      	cmp	r4, #2
 800bee8:	d84c      	bhi.n	800bf84 <__ieee754_atan2+0x13c>
 800beea:	4b35      	ldr	r3, [pc, #212]	; (800bfc0 <__ieee754_atan2+0x178>)
 800beec:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800bef0:	e9d4 0100 	ldrd	r0, r1, [r4]
 800bef4:	e7c9      	b.n	800be8a <__ieee754_atan2+0x42>
 800bef6:	2c02      	cmp	r4, #2
 800bef8:	d848      	bhi.n	800bf8c <__ieee754_atan2+0x144>
 800befa:	4b32      	ldr	r3, [pc, #200]	; (800bfc4 <__ieee754_atan2+0x17c>)
 800befc:	e7f6      	b.n	800beec <__ieee754_atan2+0xa4>
 800befe:	4573      	cmp	r3, lr
 800bf00:	d0e4      	beq.n	800becc <__ieee754_atan2+0x84>
 800bf02:	1a9b      	subs	r3, r3, r2
 800bf04:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800bf08:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bf0c:	da1e      	bge.n	800bf4c <__ieee754_atan2+0x104>
 800bf0e:	2f00      	cmp	r7, #0
 800bf10:	da01      	bge.n	800bf16 <__ieee754_atan2+0xce>
 800bf12:	323c      	adds	r2, #60	; 0x3c
 800bf14:	db1e      	blt.n	800bf54 <__ieee754_atan2+0x10c>
 800bf16:	4632      	mov	r2, r6
 800bf18:	463b      	mov	r3, r7
 800bf1a:	f7f4 fc97 	bl	800084c <__aeabi_ddiv>
 800bf1e:	ec41 0b10 	vmov	d0, r0, r1
 800bf22:	f000 fab1 	bl	800c488 <fabs>
 800bf26:	f000 f90f 	bl	800c148 <atan>
 800bf2a:	ec51 0b10 	vmov	r0, r1, d0
 800bf2e:	2c01      	cmp	r4, #1
 800bf30:	d013      	beq.n	800bf5a <__ieee754_atan2+0x112>
 800bf32:	2c02      	cmp	r4, #2
 800bf34:	d015      	beq.n	800bf62 <__ieee754_atan2+0x11a>
 800bf36:	2c00      	cmp	r4, #0
 800bf38:	d0a7      	beq.n	800be8a <__ieee754_atan2+0x42>
 800bf3a:	a319      	add	r3, pc, #100	; (adr r3, 800bfa0 <__ieee754_atan2+0x158>)
 800bf3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf40:	f7f4 f9a2 	bl	8000288 <__aeabi_dsub>
 800bf44:	a318      	add	r3, pc, #96	; (adr r3, 800bfa8 <__ieee754_atan2+0x160>)
 800bf46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4a:	e014      	b.n	800bf76 <__ieee754_atan2+0x12e>
 800bf4c:	a118      	add	r1, pc, #96	; (adr r1, 800bfb0 <__ieee754_atan2+0x168>)
 800bf4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf52:	e7ec      	b.n	800bf2e <__ieee754_atan2+0xe6>
 800bf54:	2000      	movs	r0, #0
 800bf56:	2100      	movs	r1, #0
 800bf58:	e7e9      	b.n	800bf2e <__ieee754_atan2+0xe6>
 800bf5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf5e:	4619      	mov	r1, r3
 800bf60:	e793      	b.n	800be8a <__ieee754_atan2+0x42>
 800bf62:	a30f      	add	r3, pc, #60	; (adr r3, 800bfa0 <__ieee754_atan2+0x158>)
 800bf64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf68:	f7f4 f98e 	bl	8000288 <__aeabi_dsub>
 800bf6c:	4602      	mov	r2, r0
 800bf6e:	460b      	mov	r3, r1
 800bf70:	a10d      	add	r1, pc, #52	; (adr r1, 800bfa8 <__ieee754_atan2+0x160>)
 800bf72:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf76:	f7f4 f987 	bl	8000288 <__aeabi_dsub>
 800bf7a:	e786      	b.n	800be8a <__ieee754_atan2+0x42>
 800bf7c:	a10a      	add	r1, pc, #40	; (adr r1, 800bfa8 <__ieee754_atan2+0x160>)
 800bf7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf82:	e782      	b.n	800be8a <__ieee754_atan2+0x42>
 800bf84:	a10c      	add	r1, pc, #48	; (adr r1, 800bfb8 <__ieee754_atan2+0x170>)
 800bf86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf8a:	e77e      	b.n	800be8a <__ieee754_atan2+0x42>
 800bf8c:	2000      	movs	r0, #0
 800bf8e:	2100      	movs	r1, #0
 800bf90:	e77b      	b.n	800be8a <__ieee754_atan2+0x42>
 800bf92:	a107      	add	r1, pc, #28	; (adr r1, 800bfb0 <__ieee754_atan2+0x168>)
 800bf94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf98:	e777      	b.n	800be8a <__ieee754_atan2+0x42>
 800bf9a:	bf00      	nop
 800bf9c:	f3af 8000 	nop.w
 800bfa0:	33145c07 	.word	0x33145c07
 800bfa4:	3ca1a626 	.word	0x3ca1a626
 800bfa8:	54442d18 	.word	0x54442d18
 800bfac:	400921fb 	.word	0x400921fb
 800bfb0:	54442d18 	.word	0x54442d18
 800bfb4:	3ff921fb 	.word	0x3ff921fb
 800bfb8:	54442d18 	.word	0x54442d18
 800bfbc:	3fe921fb 	.word	0x3fe921fb
 800bfc0:	0800c608 	.word	0x0800c608
 800bfc4:	0800c620 	.word	0x0800c620
 800bfc8:	54442d18 	.word	0x54442d18
 800bfcc:	c00921fb 	.word	0xc00921fb
 800bfd0:	54442d18 	.word	0x54442d18
 800bfd4:	bff921fb 	.word	0xbff921fb
 800bfd8:	7ff00000 	.word	0x7ff00000

0800bfdc <__ieee754_sqrt>:
 800bfdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfe0:	ec55 4b10 	vmov	r4, r5, d0
 800bfe4:	4e56      	ldr	r6, [pc, #344]	; (800c140 <__ieee754_sqrt+0x164>)
 800bfe6:	43ae      	bics	r6, r5
 800bfe8:	ee10 0a10 	vmov	r0, s0
 800bfec:	ee10 3a10 	vmov	r3, s0
 800bff0:	4629      	mov	r1, r5
 800bff2:	462a      	mov	r2, r5
 800bff4:	d110      	bne.n	800c018 <__ieee754_sqrt+0x3c>
 800bff6:	ee10 2a10 	vmov	r2, s0
 800bffa:	462b      	mov	r3, r5
 800bffc:	f7f4 fafc 	bl	80005f8 <__aeabi_dmul>
 800c000:	4602      	mov	r2, r0
 800c002:	460b      	mov	r3, r1
 800c004:	4620      	mov	r0, r4
 800c006:	4629      	mov	r1, r5
 800c008:	f7f4 f940 	bl	800028c <__adddf3>
 800c00c:	4604      	mov	r4, r0
 800c00e:	460d      	mov	r5, r1
 800c010:	ec45 4b10 	vmov	d0, r4, r5
 800c014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c018:	2d00      	cmp	r5, #0
 800c01a:	dc10      	bgt.n	800c03e <__ieee754_sqrt+0x62>
 800c01c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c020:	4330      	orrs	r0, r6
 800c022:	d0f5      	beq.n	800c010 <__ieee754_sqrt+0x34>
 800c024:	b15d      	cbz	r5, 800c03e <__ieee754_sqrt+0x62>
 800c026:	ee10 2a10 	vmov	r2, s0
 800c02a:	462b      	mov	r3, r5
 800c02c:	ee10 0a10 	vmov	r0, s0
 800c030:	f7f4 f92a 	bl	8000288 <__aeabi_dsub>
 800c034:	4602      	mov	r2, r0
 800c036:	460b      	mov	r3, r1
 800c038:	f7f4 fc08 	bl	800084c <__aeabi_ddiv>
 800c03c:	e7e6      	b.n	800c00c <__ieee754_sqrt+0x30>
 800c03e:	1509      	asrs	r1, r1, #20
 800c040:	d076      	beq.n	800c130 <__ieee754_sqrt+0x154>
 800c042:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c046:	07ce      	lsls	r6, r1, #31
 800c048:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800c04c:	bf5e      	ittt	pl
 800c04e:	0fda      	lsrpl	r2, r3, #31
 800c050:	005b      	lslpl	r3, r3, #1
 800c052:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800c056:	0fda      	lsrs	r2, r3, #31
 800c058:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800c05c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800c060:	2000      	movs	r0, #0
 800c062:	106d      	asrs	r5, r5, #1
 800c064:	005b      	lsls	r3, r3, #1
 800c066:	f04f 0e16 	mov.w	lr, #22
 800c06a:	4684      	mov	ip, r0
 800c06c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c070:	eb0c 0401 	add.w	r4, ip, r1
 800c074:	4294      	cmp	r4, r2
 800c076:	bfde      	ittt	le
 800c078:	1b12      	suble	r2, r2, r4
 800c07a:	eb04 0c01 	addle.w	ip, r4, r1
 800c07e:	1840      	addle	r0, r0, r1
 800c080:	0052      	lsls	r2, r2, #1
 800c082:	f1be 0e01 	subs.w	lr, lr, #1
 800c086:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c08a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c08e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c092:	d1ed      	bne.n	800c070 <__ieee754_sqrt+0x94>
 800c094:	4671      	mov	r1, lr
 800c096:	2720      	movs	r7, #32
 800c098:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c09c:	4562      	cmp	r2, ip
 800c09e:	eb04 060e 	add.w	r6, r4, lr
 800c0a2:	dc02      	bgt.n	800c0aa <__ieee754_sqrt+0xce>
 800c0a4:	d113      	bne.n	800c0ce <__ieee754_sqrt+0xf2>
 800c0a6:	429e      	cmp	r6, r3
 800c0a8:	d811      	bhi.n	800c0ce <__ieee754_sqrt+0xf2>
 800c0aa:	2e00      	cmp	r6, #0
 800c0ac:	eb06 0e04 	add.w	lr, r6, r4
 800c0b0:	da43      	bge.n	800c13a <__ieee754_sqrt+0x15e>
 800c0b2:	f1be 0f00 	cmp.w	lr, #0
 800c0b6:	db40      	blt.n	800c13a <__ieee754_sqrt+0x15e>
 800c0b8:	f10c 0801 	add.w	r8, ip, #1
 800c0bc:	eba2 020c 	sub.w	r2, r2, ip
 800c0c0:	429e      	cmp	r6, r3
 800c0c2:	bf88      	it	hi
 800c0c4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c0c8:	1b9b      	subs	r3, r3, r6
 800c0ca:	4421      	add	r1, r4
 800c0cc:	46c4      	mov	ip, r8
 800c0ce:	0052      	lsls	r2, r2, #1
 800c0d0:	3f01      	subs	r7, #1
 800c0d2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c0d6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c0da:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c0de:	d1dd      	bne.n	800c09c <__ieee754_sqrt+0xc0>
 800c0e0:	4313      	orrs	r3, r2
 800c0e2:	d006      	beq.n	800c0f2 <__ieee754_sqrt+0x116>
 800c0e4:	1c4c      	adds	r4, r1, #1
 800c0e6:	bf13      	iteet	ne
 800c0e8:	3101      	addne	r1, #1
 800c0ea:	3001      	addeq	r0, #1
 800c0ec:	4639      	moveq	r1, r7
 800c0ee:	f021 0101 	bicne.w	r1, r1, #1
 800c0f2:	1043      	asrs	r3, r0, #1
 800c0f4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c0f8:	0849      	lsrs	r1, r1, #1
 800c0fa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c0fe:	07c2      	lsls	r2, r0, #31
 800c100:	bf48      	it	mi
 800c102:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800c106:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800c10a:	460c      	mov	r4, r1
 800c10c:	463d      	mov	r5, r7
 800c10e:	e77f      	b.n	800c010 <__ieee754_sqrt+0x34>
 800c110:	0ada      	lsrs	r2, r3, #11
 800c112:	3815      	subs	r0, #21
 800c114:	055b      	lsls	r3, r3, #21
 800c116:	2a00      	cmp	r2, #0
 800c118:	d0fa      	beq.n	800c110 <__ieee754_sqrt+0x134>
 800c11a:	02d7      	lsls	r7, r2, #11
 800c11c:	d50a      	bpl.n	800c134 <__ieee754_sqrt+0x158>
 800c11e:	f1c1 0420 	rsb	r4, r1, #32
 800c122:	fa23 f404 	lsr.w	r4, r3, r4
 800c126:	1e4d      	subs	r5, r1, #1
 800c128:	408b      	lsls	r3, r1
 800c12a:	4322      	orrs	r2, r4
 800c12c:	1b41      	subs	r1, r0, r5
 800c12e:	e788      	b.n	800c042 <__ieee754_sqrt+0x66>
 800c130:	4608      	mov	r0, r1
 800c132:	e7f0      	b.n	800c116 <__ieee754_sqrt+0x13a>
 800c134:	0052      	lsls	r2, r2, #1
 800c136:	3101      	adds	r1, #1
 800c138:	e7ef      	b.n	800c11a <__ieee754_sqrt+0x13e>
 800c13a:	46e0      	mov	r8, ip
 800c13c:	e7be      	b.n	800c0bc <__ieee754_sqrt+0xe0>
 800c13e:	bf00      	nop
 800c140:	7ff00000 	.word	0x7ff00000
 800c144:	00000000 	.word	0x00000000

0800c148 <atan>:
 800c148:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c14c:	ec55 4b10 	vmov	r4, r5, d0
 800c150:	4bc3      	ldr	r3, [pc, #780]	; (800c460 <atan+0x318>)
 800c152:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c156:	429e      	cmp	r6, r3
 800c158:	46ab      	mov	fp, r5
 800c15a:	dd18      	ble.n	800c18e <atan+0x46>
 800c15c:	4bc1      	ldr	r3, [pc, #772]	; (800c464 <atan+0x31c>)
 800c15e:	429e      	cmp	r6, r3
 800c160:	dc01      	bgt.n	800c166 <atan+0x1e>
 800c162:	d109      	bne.n	800c178 <atan+0x30>
 800c164:	b144      	cbz	r4, 800c178 <atan+0x30>
 800c166:	4622      	mov	r2, r4
 800c168:	462b      	mov	r3, r5
 800c16a:	4620      	mov	r0, r4
 800c16c:	4629      	mov	r1, r5
 800c16e:	f7f4 f88d 	bl	800028c <__adddf3>
 800c172:	4604      	mov	r4, r0
 800c174:	460d      	mov	r5, r1
 800c176:	e006      	b.n	800c186 <atan+0x3e>
 800c178:	f1bb 0f00 	cmp.w	fp, #0
 800c17c:	f300 8131 	bgt.w	800c3e2 <atan+0x29a>
 800c180:	a59b      	add	r5, pc, #620	; (adr r5, 800c3f0 <atan+0x2a8>)
 800c182:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c186:	ec45 4b10 	vmov	d0, r4, r5
 800c18a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c18e:	4bb6      	ldr	r3, [pc, #728]	; (800c468 <atan+0x320>)
 800c190:	429e      	cmp	r6, r3
 800c192:	dc14      	bgt.n	800c1be <atan+0x76>
 800c194:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c198:	429e      	cmp	r6, r3
 800c19a:	dc0d      	bgt.n	800c1b8 <atan+0x70>
 800c19c:	a396      	add	r3, pc, #600	; (adr r3, 800c3f8 <atan+0x2b0>)
 800c19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a2:	ee10 0a10 	vmov	r0, s0
 800c1a6:	4629      	mov	r1, r5
 800c1a8:	f7f4 f870 	bl	800028c <__adddf3>
 800c1ac:	4baf      	ldr	r3, [pc, #700]	; (800c46c <atan+0x324>)
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	f7f4 fcb2 	bl	8000b18 <__aeabi_dcmpgt>
 800c1b4:	2800      	cmp	r0, #0
 800c1b6:	d1e6      	bne.n	800c186 <atan+0x3e>
 800c1b8:	f04f 3aff 	mov.w	sl, #4294967295
 800c1bc:	e02b      	b.n	800c216 <atan+0xce>
 800c1be:	f000 f963 	bl	800c488 <fabs>
 800c1c2:	4bab      	ldr	r3, [pc, #684]	; (800c470 <atan+0x328>)
 800c1c4:	429e      	cmp	r6, r3
 800c1c6:	ec55 4b10 	vmov	r4, r5, d0
 800c1ca:	f300 80bf 	bgt.w	800c34c <atan+0x204>
 800c1ce:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c1d2:	429e      	cmp	r6, r3
 800c1d4:	f300 80a0 	bgt.w	800c318 <atan+0x1d0>
 800c1d8:	ee10 2a10 	vmov	r2, s0
 800c1dc:	ee10 0a10 	vmov	r0, s0
 800c1e0:	462b      	mov	r3, r5
 800c1e2:	4629      	mov	r1, r5
 800c1e4:	f7f4 f852 	bl	800028c <__adddf3>
 800c1e8:	4ba0      	ldr	r3, [pc, #640]	; (800c46c <atan+0x324>)
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	f7f4 f84c 	bl	8000288 <__aeabi_dsub>
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	4606      	mov	r6, r0
 800c1f4:	460f      	mov	r7, r1
 800c1f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c1fa:	4620      	mov	r0, r4
 800c1fc:	4629      	mov	r1, r5
 800c1fe:	f7f4 f845 	bl	800028c <__adddf3>
 800c202:	4602      	mov	r2, r0
 800c204:	460b      	mov	r3, r1
 800c206:	4630      	mov	r0, r6
 800c208:	4639      	mov	r1, r7
 800c20a:	f7f4 fb1f 	bl	800084c <__aeabi_ddiv>
 800c20e:	f04f 0a00 	mov.w	sl, #0
 800c212:	4604      	mov	r4, r0
 800c214:	460d      	mov	r5, r1
 800c216:	4622      	mov	r2, r4
 800c218:	462b      	mov	r3, r5
 800c21a:	4620      	mov	r0, r4
 800c21c:	4629      	mov	r1, r5
 800c21e:	f7f4 f9eb 	bl	80005f8 <__aeabi_dmul>
 800c222:	4602      	mov	r2, r0
 800c224:	460b      	mov	r3, r1
 800c226:	4680      	mov	r8, r0
 800c228:	4689      	mov	r9, r1
 800c22a:	f7f4 f9e5 	bl	80005f8 <__aeabi_dmul>
 800c22e:	a374      	add	r3, pc, #464	; (adr r3, 800c400 <atan+0x2b8>)
 800c230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c234:	4606      	mov	r6, r0
 800c236:	460f      	mov	r7, r1
 800c238:	f7f4 f9de 	bl	80005f8 <__aeabi_dmul>
 800c23c:	a372      	add	r3, pc, #456	; (adr r3, 800c408 <atan+0x2c0>)
 800c23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c242:	f7f4 f823 	bl	800028c <__adddf3>
 800c246:	4632      	mov	r2, r6
 800c248:	463b      	mov	r3, r7
 800c24a:	f7f4 f9d5 	bl	80005f8 <__aeabi_dmul>
 800c24e:	a370      	add	r3, pc, #448	; (adr r3, 800c410 <atan+0x2c8>)
 800c250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c254:	f7f4 f81a 	bl	800028c <__adddf3>
 800c258:	4632      	mov	r2, r6
 800c25a:	463b      	mov	r3, r7
 800c25c:	f7f4 f9cc 	bl	80005f8 <__aeabi_dmul>
 800c260:	a36d      	add	r3, pc, #436	; (adr r3, 800c418 <atan+0x2d0>)
 800c262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c266:	f7f4 f811 	bl	800028c <__adddf3>
 800c26a:	4632      	mov	r2, r6
 800c26c:	463b      	mov	r3, r7
 800c26e:	f7f4 f9c3 	bl	80005f8 <__aeabi_dmul>
 800c272:	a36b      	add	r3, pc, #428	; (adr r3, 800c420 <atan+0x2d8>)
 800c274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c278:	f7f4 f808 	bl	800028c <__adddf3>
 800c27c:	4632      	mov	r2, r6
 800c27e:	463b      	mov	r3, r7
 800c280:	f7f4 f9ba 	bl	80005f8 <__aeabi_dmul>
 800c284:	a368      	add	r3, pc, #416	; (adr r3, 800c428 <atan+0x2e0>)
 800c286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c28a:	f7f3 ffff 	bl	800028c <__adddf3>
 800c28e:	4642      	mov	r2, r8
 800c290:	464b      	mov	r3, r9
 800c292:	f7f4 f9b1 	bl	80005f8 <__aeabi_dmul>
 800c296:	a366      	add	r3, pc, #408	; (adr r3, 800c430 <atan+0x2e8>)
 800c298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29c:	4680      	mov	r8, r0
 800c29e:	4689      	mov	r9, r1
 800c2a0:	4630      	mov	r0, r6
 800c2a2:	4639      	mov	r1, r7
 800c2a4:	f7f4 f9a8 	bl	80005f8 <__aeabi_dmul>
 800c2a8:	a363      	add	r3, pc, #396	; (adr r3, 800c438 <atan+0x2f0>)
 800c2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ae:	f7f3 ffeb 	bl	8000288 <__aeabi_dsub>
 800c2b2:	4632      	mov	r2, r6
 800c2b4:	463b      	mov	r3, r7
 800c2b6:	f7f4 f99f 	bl	80005f8 <__aeabi_dmul>
 800c2ba:	a361      	add	r3, pc, #388	; (adr r3, 800c440 <atan+0x2f8>)
 800c2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c0:	f7f3 ffe2 	bl	8000288 <__aeabi_dsub>
 800c2c4:	4632      	mov	r2, r6
 800c2c6:	463b      	mov	r3, r7
 800c2c8:	f7f4 f996 	bl	80005f8 <__aeabi_dmul>
 800c2cc:	a35e      	add	r3, pc, #376	; (adr r3, 800c448 <atan+0x300>)
 800c2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d2:	f7f3 ffd9 	bl	8000288 <__aeabi_dsub>
 800c2d6:	4632      	mov	r2, r6
 800c2d8:	463b      	mov	r3, r7
 800c2da:	f7f4 f98d 	bl	80005f8 <__aeabi_dmul>
 800c2de:	a35c      	add	r3, pc, #368	; (adr r3, 800c450 <atan+0x308>)
 800c2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e4:	f7f3 ffd0 	bl	8000288 <__aeabi_dsub>
 800c2e8:	4632      	mov	r2, r6
 800c2ea:	463b      	mov	r3, r7
 800c2ec:	f7f4 f984 	bl	80005f8 <__aeabi_dmul>
 800c2f0:	4602      	mov	r2, r0
 800c2f2:	460b      	mov	r3, r1
 800c2f4:	4640      	mov	r0, r8
 800c2f6:	4649      	mov	r1, r9
 800c2f8:	f7f3 ffc8 	bl	800028c <__adddf3>
 800c2fc:	4622      	mov	r2, r4
 800c2fe:	462b      	mov	r3, r5
 800c300:	f7f4 f97a 	bl	80005f8 <__aeabi_dmul>
 800c304:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c308:	4602      	mov	r2, r0
 800c30a:	460b      	mov	r3, r1
 800c30c:	d14b      	bne.n	800c3a6 <atan+0x25e>
 800c30e:	4620      	mov	r0, r4
 800c310:	4629      	mov	r1, r5
 800c312:	f7f3 ffb9 	bl	8000288 <__aeabi_dsub>
 800c316:	e72c      	b.n	800c172 <atan+0x2a>
 800c318:	ee10 0a10 	vmov	r0, s0
 800c31c:	4b53      	ldr	r3, [pc, #332]	; (800c46c <atan+0x324>)
 800c31e:	2200      	movs	r2, #0
 800c320:	4629      	mov	r1, r5
 800c322:	f7f3 ffb1 	bl	8000288 <__aeabi_dsub>
 800c326:	4b51      	ldr	r3, [pc, #324]	; (800c46c <atan+0x324>)
 800c328:	4606      	mov	r6, r0
 800c32a:	460f      	mov	r7, r1
 800c32c:	2200      	movs	r2, #0
 800c32e:	4620      	mov	r0, r4
 800c330:	4629      	mov	r1, r5
 800c332:	f7f3 ffab 	bl	800028c <__adddf3>
 800c336:	4602      	mov	r2, r0
 800c338:	460b      	mov	r3, r1
 800c33a:	4630      	mov	r0, r6
 800c33c:	4639      	mov	r1, r7
 800c33e:	f7f4 fa85 	bl	800084c <__aeabi_ddiv>
 800c342:	f04f 0a01 	mov.w	sl, #1
 800c346:	4604      	mov	r4, r0
 800c348:	460d      	mov	r5, r1
 800c34a:	e764      	b.n	800c216 <atan+0xce>
 800c34c:	4b49      	ldr	r3, [pc, #292]	; (800c474 <atan+0x32c>)
 800c34e:	429e      	cmp	r6, r3
 800c350:	da1d      	bge.n	800c38e <atan+0x246>
 800c352:	ee10 0a10 	vmov	r0, s0
 800c356:	4b48      	ldr	r3, [pc, #288]	; (800c478 <atan+0x330>)
 800c358:	2200      	movs	r2, #0
 800c35a:	4629      	mov	r1, r5
 800c35c:	f7f3 ff94 	bl	8000288 <__aeabi_dsub>
 800c360:	4b45      	ldr	r3, [pc, #276]	; (800c478 <atan+0x330>)
 800c362:	4606      	mov	r6, r0
 800c364:	460f      	mov	r7, r1
 800c366:	2200      	movs	r2, #0
 800c368:	4620      	mov	r0, r4
 800c36a:	4629      	mov	r1, r5
 800c36c:	f7f4 f944 	bl	80005f8 <__aeabi_dmul>
 800c370:	4b3e      	ldr	r3, [pc, #248]	; (800c46c <atan+0x324>)
 800c372:	2200      	movs	r2, #0
 800c374:	f7f3 ff8a 	bl	800028c <__adddf3>
 800c378:	4602      	mov	r2, r0
 800c37a:	460b      	mov	r3, r1
 800c37c:	4630      	mov	r0, r6
 800c37e:	4639      	mov	r1, r7
 800c380:	f7f4 fa64 	bl	800084c <__aeabi_ddiv>
 800c384:	f04f 0a02 	mov.w	sl, #2
 800c388:	4604      	mov	r4, r0
 800c38a:	460d      	mov	r5, r1
 800c38c:	e743      	b.n	800c216 <atan+0xce>
 800c38e:	462b      	mov	r3, r5
 800c390:	ee10 2a10 	vmov	r2, s0
 800c394:	4939      	ldr	r1, [pc, #228]	; (800c47c <atan+0x334>)
 800c396:	2000      	movs	r0, #0
 800c398:	f7f4 fa58 	bl	800084c <__aeabi_ddiv>
 800c39c:	f04f 0a03 	mov.w	sl, #3
 800c3a0:	4604      	mov	r4, r0
 800c3a2:	460d      	mov	r5, r1
 800c3a4:	e737      	b.n	800c216 <atan+0xce>
 800c3a6:	4b36      	ldr	r3, [pc, #216]	; (800c480 <atan+0x338>)
 800c3a8:	4e36      	ldr	r6, [pc, #216]	; (800c484 <atan+0x33c>)
 800c3aa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c3ae:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800c3b2:	e9da 2300 	ldrd	r2, r3, [sl]
 800c3b6:	f7f3 ff67 	bl	8000288 <__aeabi_dsub>
 800c3ba:	4622      	mov	r2, r4
 800c3bc:	462b      	mov	r3, r5
 800c3be:	f7f3 ff63 	bl	8000288 <__aeabi_dsub>
 800c3c2:	4602      	mov	r2, r0
 800c3c4:	460b      	mov	r3, r1
 800c3c6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c3ca:	f7f3 ff5d 	bl	8000288 <__aeabi_dsub>
 800c3ce:	f1bb 0f00 	cmp.w	fp, #0
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	460d      	mov	r5, r1
 800c3d6:	f6bf aed6 	bge.w	800c186 <atan+0x3e>
 800c3da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c3de:	461d      	mov	r5, r3
 800c3e0:	e6d1      	b.n	800c186 <atan+0x3e>
 800c3e2:	a51d      	add	r5, pc, #116	; (adr r5, 800c458 <atan+0x310>)
 800c3e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c3e8:	e6cd      	b.n	800c186 <atan+0x3e>
 800c3ea:	bf00      	nop
 800c3ec:	f3af 8000 	nop.w
 800c3f0:	54442d18 	.word	0x54442d18
 800c3f4:	bff921fb 	.word	0xbff921fb
 800c3f8:	8800759c 	.word	0x8800759c
 800c3fc:	7e37e43c 	.word	0x7e37e43c
 800c400:	e322da11 	.word	0xe322da11
 800c404:	3f90ad3a 	.word	0x3f90ad3a
 800c408:	24760deb 	.word	0x24760deb
 800c40c:	3fa97b4b 	.word	0x3fa97b4b
 800c410:	a0d03d51 	.word	0xa0d03d51
 800c414:	3fb10d66 	.word	0x3fb10d66
 800c418:	c54c206e 	.word	0xc54c206e
 800c41c:	3fb745cd 	.word	0x3fb745cd
 800c420:	920083ff 	.word	0x920083ff
 800c424:	3fc24924 	.word	0x3fc24924
 800c428:	5555550d 	.word	0x5555550d
 800c42c:	3fd55555 	.word	0x3fd55555
 800c430:	2c6a6c2f 	.word	0x2c6a6c2f
 800c434:	bfa2b444 	.word	0xbfa2b444
 800c438:	52defd9a 	.word	0x52defd9a
 800c43c:	3fadde2d 	.word	0x3fadde2d
 800c440:	af749a6d 	.word	0xaf749a6d
 800c444:	3fb3b0f2 	.word	0x3fb3b0f2
 800c448:	fe231671 	.word	0xfe231671
 800c44c:	3fbc71c6 	.word	0x3fbc71c6
 800c450:	9998ebc4 	.word	0x9998ebc4
 800c454:	3fc99999 	.word	0x3fc99999
 800c458:	54442d18 	.word	0x54442d18
 800c45c:	3ff921fb 	.word	0x3ff921fb
 800c460:	440fffff 	.word	0x440fffff
 800c464:	7ff00000 	.word	0x7ff00000
 800c468:	3fdbffff 	.word	0x3fdbffff
 800c46c:	3ff00000 	.word	0x3ff00000
 800c470:	3ff2ffff 	.word	0x3ff2ffff
 800c474:	40038000 	.word	0x40038000
 800c478:	3ff80000 	.word	0x3ff80000
 800c47c:	bff00000 	.word	0xbff00000
 800c480:	0800c658 	.word	0x0800c658
 800c484:	0800c638 	.word	0x0800c638

0800c488 <fabs>:
 800c488:	ec51 0b10 	vmov	r0, r1, d0
 800c48c:	ee10 2a10 	vmov	r2, s0
 800c490:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c494:	ec43 2b10 	vmov	d0, r2, r3
 800c498:	4770      	bx	lr
	...

0800c49c <_init>:
 800c49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c49e:	bf00      	nop
 800c4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4a2:	bc08      	pop	{r3}
 800c4a4:	469e      	mov	lr, r3
 800c4a6:	4770      	bx	lr

0800c4a8 <_fini>:
 800c4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4aa:	bf00      	nop
 800c4ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4ae:	bc08      	pop	{r3}
 800c4b0:	469e      	mov	lr, r3
 800c4b2:	4770      	bx	lr
